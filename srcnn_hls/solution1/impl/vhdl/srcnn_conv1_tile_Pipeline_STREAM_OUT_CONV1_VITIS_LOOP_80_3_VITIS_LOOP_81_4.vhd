-- ==============================================================
-- Generated by Vitis HLS v2023.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity srcnn_conv1_tile_Pipeline_STREAM_OUT_CONV1_VITIS_LOOP_80_3_VITIS_LOOP_81_4 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    conv1_to_conv2_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    conv1_to_conv2_full_n : IN STD_LOGIC;
    conv1_to_conv2_write : OUT STD_LOGIC;
    layer1_output_tile_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    layer1_output_tile_ce0 : OUT STD_LOGIC;
    layer1_output_tile_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    layer1_output_tile_1_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    layer1_output_tile_1_ce0 : OUT STD_LOGIC;
    layer1_output_tile_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    layer1_output_tile_2_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    layer1_output_tile_2_ce0 : OUT STD_LOGIC;
    layer1_output_tile_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    layer1_output_tile_3_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    layer1_output_tile_3_ce0 : OUT STD_LOGIC;
    layer1_output_tile_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    layer1_output_tile_4_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    layer1_output_tile_4_ce0 : OUT STD_LOGIC;
    layer1_output_tile_4_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    layer1_output_tile_5_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    layer1_output_tile_5_ce0 : OUT STD_LOGIC;
    layer1_output_tile_5_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    layer1_output_tile_6_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    layer1_output_tile_6_ce0 : OUT STD_LOGIC;
    layer1_output_tile_6_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    layer1_output_tile_7_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    layer1_output_tile_7_ce0 : OUT STD_LOGIC;
    layer1_output_tile_7_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    layer1_output_tile_8_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    layer1_output_tile_8_ce0 : OUT STD_LOGIC;
    layer1_output_tile_8_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    layer1_output_tile_9_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    layer1_output_tile_9_ce0 : OUT STD_LOGIC;
    layer1_output_tile_9_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    layer1_output_tile_10_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    layer1_output_tile_10_ce0 : OUT STD_LOGIC;
    layer1_output_tile_10_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    layer1_output_tile_11_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    layer1_output_tile_11_ce0 : OUT STD_LOGIC;
    layer1_output_tile_11_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    layer1_output_tile_12_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    layer1_output_tile_12_ce0 : OUT STD_LOGIC;
    layer1_output_tile_12_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    layer1_output_tile_13_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    layer1_output_tile_13_ce0 : OUT STD_LOGIC;
    layer1_output_tile_13_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    layer1_output_tile_14_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    layer1_output_tile_14_ce0 : OUT STD_LOGIC;
    layer1_output_tile_14_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    layer1_output_tile_15_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    layer1_output_tile_15_ce0 : OUT STD_LOGIC;
    layer1_output_tile_15_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    layer1_output_tile_16_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    layer1_output_tile_16_ce0 : OUT STD_LOGIC;
    layer1_output_tile_16_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    layer1_output_tile_17_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    layer1_output_tile_17_ce0 : OUT STD_LOGIC;
    layer1_output_tile_17_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    layer1_output_tile_18_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    layer1_output_tile_18_ce0 : OUT STD_LOGIC;
    layer1_output_tile_18_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    layer1_output_tile_19_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    layer1_output_tile_19_ce0 : OUT STD_LOGIC;
    layer1_output_tile_19_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    layer1_output_tile_20_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    layer1_output_tile_20_ce0 : OUT STD_LOGIC;
    layer1_output_tile_20_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    layer1_output_tile_21_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    layer1_output_tile_21_ce0 : OUT STD_LOGIC;
    layer1_output_tile_21_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    layer1_output_tile_22_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    layer1_output_tile_22_ce0 : OUT STD_LOGIC;
    layer1_output_tile_22_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    layer1_output_tile_23_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    layer1_output_tile_23_ce0 : OUT STD_LOGIC;
    layer1_output_tile_23_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    layer1_output_tile_24_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    layer1_output_tile_24_ce0 : OUT STD_LOGIC;
    layer1_output_tile_24_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    layer1_output_tile_25_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    layer1_output_tile_25_ce0 : OUT STD_LOGIC;
    layer1_output_tile_25_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    layer1_output_tile_26_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    layer1_output_tile_26_ce0 : OUT STD_LOGIC;
    layer1_output_tile_26_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    layer1_output_tile_27_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    layer1_output_tile_27_ce0 : OUT STD_LOGIC;
    layer1_output_tile_27_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    layer1_output_tile_28_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    layer1_output_tile_28_ce0 : OUT STD_LOGIC;
    layer1_output_tile_28_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    layer1_output_tile_29_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    layer1_output_tile_29_ce0 : OUT STD_LOGIC;
    layer1_output_tile_29_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    layer1_output_tile_30_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    layer1_output_tile_30_ce0 : OUT STD_LOGIC;
    layer1_output_tile_30_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    layer1_output_tile_31_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    layer1_output_tile_31_ce0 : OUT STD_LOGIC;
    layer1_output_tile_31_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    layer1_output_tile_32_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    layer1_output_tile_32_ce0 : OUT STD_LOGIC;
    layer1_output_tile_32_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    layer1_output_tile_33_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    layer1_output_tile_33_ce0 : OUT STD_LOGIC;
    layer1_output_tile_33_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    layer1_output_tile_34_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    layer1_output_tile_34_ce0 : OUT STD_LOGIC;
    layer1_output_tile_34_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    layer1_output_tile_35_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    layer1_output_tile_35_ce0 : OUT STD_LOGIC;
    layer1_output_tile_35_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    layer1_output_tile_36_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    layer1_output_tile_36_ce0 : OUT STD_LOGIC;
    layer1_output_tile_36_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    layer1_output_tile_37_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    layer1_output_tile_37_ce0 : OUT STD_LOGIC;
    layer1_output_tile_37_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    layer1_output_tile_38_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    layer1_output_tile_38_ce0 : OUT STD_LOGIC;
    layer1_output_tile_38_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    layer1_output_tile_39_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    layer1_output_tile_39_ce0 : OUT STD_LOGIC;
    layer1_output_tile_39_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    layer1_output_tile_40_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    layer1_output_tile_40_ce0 : OUT STD_LOGIC;
    layer1_output_tile_40_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    layer1_output_tile_41_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    layer1_output_tile_41_ce0 : OUT STD_LOGIC;
    layer1_output_tile_41_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    layer1_output_tile_42_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    layer1_output_tile_42_ce0 : OUT STD_LOGIC;
    layer1_output_tile_42_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    layer1_output_tile_43_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    layer1_output_tile_43_ce0 : OUT STD_LOGIC;
    layer1_output_tile_43_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    layer1_output_tile_44_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    layer1_output_tile_44_ce0 : OUT STD_LOGIC;
    layer1_output_tile_44_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    layer1_output_tile_45_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    layer1_output_tile_45_ce0 : OUT STD_LOGIC;
    layer1_output_tile_45_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    layer1_output_tile_46_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    layer1_output_tile_46_ce0 : OUT STD_LOGIC;
    layer1_output_tile_46_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    layer1_output_tile_47_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    layer1_output_tile_47_ce0 : OUT STD_LOGIC;
    layer1_output_tile_47_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    layer1_output_tile_48_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    layer1_output_tile_48_ce0 : OUT STD_LOGIC;
    layer1_output_tile_48_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    layer1_output_tile_49_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    layer1_output_tile_49_ce0 : OUT STD_LOGIC;
    layer1_output_tile_49_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    layer1_output_tile_50_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    layer1_output_tile_50_ce0 : OUT STD_LOGIC;
    layer1_output_tile_50_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    layer1_output_tile_51_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    layer1_output_tile_51_ce0 : OUT STD_LOGIC;
    layer1_output_tile_51_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    layer1_output_tile_52_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    layer1_output_tile_52_ce0 : OUT STD_LOGIC;
    layer1_output_tile_52_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    layer1_output_tile_53_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    layer1_output_tile_53_ce0 : OUT STD_LOGIC;
    layer1_output_tile_53_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    layer1_output_tile_54_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    layer1_output_tile_54_ce0 : OUT STD_LOGIC;
    layer1_output_tile_54_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    layer1_output_tile_55_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    layer1_output_tile_55_ce0 : OUT STD_LOGIC;
    layer1_output_tile_55_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    layer1_output_tile_56_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    layer1_output_tile_56_ce0 : OUT STD_LOGIC;
    layer1_output_tile_56_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    layer1_output_tile_57_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    layer1_output_tile_57_ce0 : OUT STD_LOGIC;
    layer1_output_tile_57_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    layer1_output_tile_58_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    layer1_output_tile_58_ce0 : OUT STD_LOGIC;
    layer1_output_tile_58_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    layer1_output_tile_59_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    layer1_output_tile_59_ce0 : OUT STD_LOGIC;
    layer1_output_tile_59_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    layer1_output_tile_60_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    layer1_output_tile_60_ce0 : OUT STD_LOGIC;
    layer1_output_tile_60_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    layer1_output_tile_61_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    layer1_output_tile_61_ce0 : OUT STD_LOGIC;
    layer1_output_tile_61_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    layer1_output_tile_62_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    layer1_output_tile_62_ce0 : OUT STD_LOGIC;
    layer1_output_tile_62_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    layer1_output_tile_63_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    layer1_output_tile_63_ce0 : OUT STD_LOGIC;
    layer1_output_tile_63_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of srcnn_conv1_tile_Pipeline_STREAM_OUT_CONV1_VITIS_LOOP_80_3_VITIS_LOOP_81_4 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_lv15_4840 : STD_LOGIC_VECTOR (14 downto 0) := "100100001000000";
    constant ap_const_lv15_1 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    constant ap_const_lv10_121 : STD_LOGIC_VECTOR (9 downto 0) := "0100100001";
    constant ap_const_lv5_11 : STD_LOGIC_VECTOR (4 downto 0) := "10001";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln79_fu_1079_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal conv1_to_conv2_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln80_fu_1100_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln80_reg_1498 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln82_2_fu_1188_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tw_fu_192 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln81_fu_1256_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal th_1_fu_196 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln80_1_fu_1152_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvar_flatten479_fu_200 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln80_2_fu_1268_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal feat_fu_204 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln79_1_fu_1305_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal indvar_flatten492_fu_208 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln79_1_fu_1085_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal icmp_ln81_fu_1120_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln79_fu_1114_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln79_fu_1106_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal and_ln79_fu_1126_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln80_fu_1138_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln80_fu_1132_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_shl2_fu_1164_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln82_fu_1160_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln80_fu_1144_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln82_fu_1172_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln82_1_fu_1178_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln82_1_fu_1182_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln80_1_fu_1262_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln79_fu_1299_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_253_fu_1316_p65 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_253_fu_1316_p66 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component srcnn_mux_64_6_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        din10_WIDTH : INTEGER;
        din11_WIDTH : INTEGER;
        din12_WIDTH : INTEGER;
        din13_WIDTH : INTEGER;
        din14_WIDTH : INTEGER;
        din15_WIDTH : INTEGER;
        din16_WIDTH : INTEGER;
        din17_WIDTH : INTEGER;
        din18_WIDTH : INTEGER;
        din19_WIDTH : INTEGER;
        din20_WIDTH : INTEGER;
        din21_WIDTH : INTEGER;
        din22_WIDTH : INTEGER;
        din23_WIDTH : INTEGER;
        din24_WIDTH : INTEGER;
        din25_WIDTH : INTEGER;
        din26_WIDTH : INTEGER;
        din27_WIDTH : INTEGER;
        din28_WIDTH : INTEGER;
        din29_WIDTH : INTEGER;
        din30_WIDTH : INTEGER;
        din31_WIDTH : INTEGER;
        din32_WIDTH : INTEGER;
        din33_WIDTH : INTEGER;
        din34_WIDTH : INTEGER;
        din35_WIDTH : INTEGER;
        din36_WIDTH : INTEGER;
        din37_WIDTH : INTEGER;
        din38_WIDTH : INTEGER;
        din39_WIDTH : INTEGER;
        din40_WIDTH : INTEGER;
        din41_WIDTH : INTEGER;
        din42_WIDTH : INTEGER;
        din43_WIDTH : INTEGER;
        din44_WIDTH : INTEGER;
        din45_WIDTH : INTEGER;
        din46_WIDTH : INTEGER;
        din47_WIDTH : INTEGER;
        din48_WIDTH : INTEGER;
        din49_WIDTH : INTEGER;
        din50_WIDTH : INTEGER;
        din51_WIDTH : INTEGER;
        din52_WIDTH : INTEGER;
        din53_WIDTH : INTEGER;
        din54_WIDTH : INTEGER;
        din55_WIDTH : INTEGER;
        din56_WIDTH : INTEGER;
        din57_WIDTH : INTEGER;
        din58_WIDTH : INTEGER;
        din59_WIDTH : INTEGER;
        din60_WIDTH : INTEGER;
        din61_WIDTH : INTEGER;
        din62_WIDTH : INTEGER;
        din63_WIDTH : INTEGER;
        din64_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (31 downto 0);
        din5 : IN STD_LOGIC_VECTOR (31 downto 0);
        din6 : IN STD_LOGIC_VECTOR (31 downto 0);
        din7 : IN STD_LOGIC_VECTOR (31 downto 0);
        din8 : IN STD_LOGIC_VECTOR (31 downto 0);
        din9 : IN STD_LOGIC_VECTOR (31 downto 0);
        din10 : IN STD_LOGIC_VECTOR (31 downto 0);
        din11 : IN STD_LOGIC_VECTOR (31 downto 0);
        din12 : IN STD_LOGIC_VECTOR (31 downto 0);
        din13 : IN STD_LOGIC_VECTOR (31 downto 0);
        din14 : IN STD_LOGIC_VECTOR (31 downto 0);
        din15 : IN STD_LOGIC_VECTOR (31 downto 0);
        din16 : IN STD_LOGIC_VECTOR (31 downto 0);
        din17 : IN STD_LOGIC_VECTOR (31 downto 0);
        din18 : IN STD_LOGIC_VECTOR (31 downto 0);
        din19 : IN STD_LOGIC_VECTOR (31 downto 0);
        din20 : IN STD_LOGIC_VECTOR (31 downto 0);
        din21 : IN STD_LOGIC_VECTOR (31 downto 0);
        din22 : IN STD_LOGIC_VECTOR (31 downto 0);
        din23 : IN STD_LOGIC_VECTOR (31 downto 0);
        din24 : IN STD_LOGIC_VECTOR (31 downto 0);
        din25 : IN STD_LOGIC_VECTOR (31 downto 0);
        din26 : IN STD_LOGIC_VECTOR (31 downto 0);
        din27 : IN STD_LOGIC_VECTOR (31 downto 0);
        din28 : IN STD_LOGIC_VECTOR (31 downto 0);
        din29 : IN STD_LOGIC_VECTOR (31 downto 0);
        din30 : IN STD_LOGIC_VECTOR (31 downto 0);
        din31 : IN STD_LOGIC_VECTOR (31 downto 0);
        din32 : IN STD_LOGIC_VECTOR (31 downto 0);
        din33 : IN STD_LOGIC_VECTOR (31 downto 0);
        din34 : IN STD_LOGIC_VECTOR (31 downto 0);
        din35 : IN STD_LOGIC_VECTOR (31 downto 0);
        din36 : IN STD_LOGIC_VECTOR (31 downto 0);
        din37 : IN STD_LOGIC_VECTOR (31 downto 0);
        din38 : IN STD_LOGIC_VECTOR (31 downto 0);
        din39 : IN STD_LOGIC_VECTOR (31 downto 0);
        din40 : IN STD_LOGIC_VECTOR (31 downto 0);
        din41 : IN STD_LOGIC_VECTOR (31 downto 0);
        din42 : IN STD_LOGIC_VECTOR (31 downto 0);
        din43 : IN STD_LOGIC_VECTOR (31 downto 0);
        din44 : IN STD_LOGIC_VECTOR (31 downto 0);
        din45 : IN STD_LOGIC_VECTOR (31 downto 0);
        din46 : IN STD_LOGIC_VECTOR (31 downto 0);
        din47 : IN STD_LOGIC_VECTOR (31 downto 0);
        din48 : IN STD_LOGIC_VECTOR (31 downto 0);
        din49 : IN STD_LOGIC_VECTOR (31 downto 0);
        din50 : IN STD_LOGIC_VECTOR (31 downto 0);
        din51 : IN STD_LOGIC_VECTOR (31 downto 0);
        din52 : IN STD_LOGIC_VECTOR (31 downto 0);
        din53 : IN STD_LOGIC_VECTOR (31 downto 0);
        din54 : IN STD_LOGIC_VECTOR (31 downto 0);
        din55 : IN STD_LOGIC_VECTOR (31 downto 0);
        din56 : IN STD_LOGIC_VECTOR (31 downto 0);
        din57 : IN STD_LOGIC_VECTOR (31 downto 0);
        din58 : IN STD_LOGIC_VECTOR (31 downto 0);
        din59 : IN STD_LOGIC_VECTOR (31 downto 0);
        din60 : IN STD_LOGIC_VECTOR (31 downto 0);
        din61 : IN STD_LOGIC_VECTOR (31 downto 0);
        din62 : IN STD_LOGIC_VECTOR (31 downto 0);
        din63 : IN STD_LOGIC_VECTOR (31 downto 0);
        din64 : IN STD_LOGIC_VECTOR (5 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component srcnn_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mux_64_6_32_1_1_U1198 : component srcnn_mux_64_6_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 32,
        din8_WIDTH => 32,
        din9_WIDTH => 32,
        din10_WIDTH => 32,
        din11_WIDTH => 32,
        din12_WIDTH => 32,
        din13_WIDTH => 32,
        din14_WIDTH => 32,
        din15_WIDTH => 32,
        din16_WIDTH => 32,
        din17_WIDTH => 32,
        din18_WIDTH => 32,
        din19_WIDTH => 32,
        din20_WIDTH => 32,
        din21_WIDTH => 32,
        din22_WIDTH => 32,
        din23_WIDTH => 32,
        din24_WIDTH => 32,
        din25_WIDTH => 32,
        din26_WIDTH => 32,
        din27_WIDTH => 32,
        din28_WIDTH => 32,
        din29_WIDTH => 32,
        din30_WIDTH => 32,
        din31_WIDTH => 32,
        din32_WIDTH => 32,
        din33_WIDTH => 32,
        din34_WIDTH => 32,
        din35_WIDTH => 32,
        din36_WIDTH => 32,
        din37_WIDTH => 32,
        din38_WIDTH => 32,
        din39_WIDTH => 32,
        din40_WIDTH => 32,
        din41_WIDTH => 32,
        din42_WIDTH => 32,
        din43_WIDTH => 32,
        din44_WIDTH => 32,
        din45_WIDTH => 32,
        din46_WIDTH => 32,
        din47_WIDTH => 32,
        din48_WIDTH => 32,
        din49_WIDTH => 32,
        din50_WIDTH => 32,
        din51_WIDTH => 32,
        din52_WIDTH => 32,
        din53_WIDTH => 32,
        din54_WIDTH => 32,
        din55_WIDTH => 32,
        din56_WIDTH => 32,
        din57_WIDTH => 32,
        din58_WIDTH => 32,
        din59_WIDTH => 32,
        din60_WIDTH => 32,
        din61_WIDTH => 32,
        din62_WIDTH => 32,
        din63_WIDTH => 32,
        din64_WIDTH => 6,
        dout_WIDTH => 32)
    port map (
        din0 => layer1_output_tile_q0,
        din1 => layer1_output_tile_1_q0,
        din2 => layer1_output_tile_2_q0,
        din3 => layer1_output_tile_3_q0,
        din4 => layer1_output_tile_4_q0,
        din5 => layer1_output_tile_5_q0,
        din6 => layer1_output_tile_6_q0,
        din7 => layer1_output_tile_7_q0,
        din8 => layer1_output_tile_8_q0,
        din9 => layer1_output_tile_9_q0,
        din10 => layer1_output_tile_10_q0,
        din11 => layer1_output_tile_11_q0,
        din12 => layer1_output_tile_12_q0,
        din13 => layer1_output_tile_13_q0,
        din14 => layer1_output_tile_14_q0,
        din15 => layer1_output_tile_15_q0,
        din16 => layer1_output_tile_16_q0,
        din17 => layer1_output_tile_17_q0,
        din18 => layer1_output_tile_18_q0,
        din19 => layer1_output_tile_19_q0,
        din20 => layer1_output_tile_20_q0,
        din21 => layer1_output_tile_21_q0,
        din22 => layer1_output_tile_22_q0,
        din23 => layer1_output_tile_23_q0,
        din24 => layer1_output_tile_24_q0,
        din25 => layer1_output_tile_25_q0,
        din26 => layer1_output_tile_26_q0,
        din27 => layer1_output_tile_27_q0,
        din28 => layer1_output_tile_28_q0,
        din29 => layer1_output_tile_29_q0,
        din30 => layer1_output_tile_30_q0,
        din31 => layer1_output_tile_31_q0,
        din32 => layer1_output_tile_32_q0,
        din33 => layer1_output_tile_33_q0,
        din34 => layer1_output_tile_34_q0,
        din35 => layer1_output_tile_35_q0,
        din36 => layer1_output_tile_36_q0,
        din37 => layer1_output_tile_37_q0,
        din38 => layer1_output_tile_38_q0,
        din39 => layer1_output_tile_39_q0,
        din40 => layer1_output_tile_40_q0,
        din41 => layer1_output_tile_41_q0,
        din42 => layer1_output_tile_42_q0,
        din43 => layer1_output_tile_43_q0,
        din44 => layer1_output_tile_44_q0,
        din45 => layer1_output_tile_45_q0,
        din46 => layer1_output_tile_46_q0,
        din47 => layer1_output_tile_47_q0,
        din48 => layer1_output_tile_48_q0,
        din49 => layer1_output_tile_49_q0,
        din50 => layer1_output_tile_50_q0,
        din51 => layer1_output_tile_51_q0,
        din52 => layer1_output_tile_52_q0,
        din53 => layer1_output_tile_53_q0,
        din54 => layer1_output_tile_54_q0,
        din55 => layer1_output_tile_55_q0,
        din56 => layer1_output_tile_56_q0,
        din57 => layer1_output_tile_57_q0,
        din58 => layer1_output_tile_58_q0,
        din59 => layer1_output_tile_59_q0,
        din60 => layer1_output_tile_60_q0,
        din61 => layer1_output_tile_61_q0,
        din62 => layer1_output_tile_62_q0,
        din63 => layer1_output_tile_63_q0,
        din64 => tmp_253_fu_1316_p65,
        dout => tmp_253_fu_1316_p66);

    flow_control_loop_pipe_sequential_init_U : component srcnn_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter1_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    feat_fu_204_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    feat_fu_204 <= ap_const_lv7_0;
                elsif ((ap_enable_reg_pp0_iter2 = ap_const_logic_1)) then 
                    feat_fu_204 <= select_ln79_1_fu_1305_p3;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten479_fu_200_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten479_fu_200 <= ap_const_lv10_0;
                elsif (((icmp_ln79_fu_1079_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    indvar_flatten479_fu_200 <= select_ln80_2_fu_1268_p3;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten492_fu_208_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten492_fu_208 <= ap_const_lv15_0;
                elsif (((icmp_ln79_fu_1079_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    indvar_flatten492_fu_208 <= add_ln79_1_fu_1085_p2;
                end if;
            end if; 
        end if;
    end process;

    th_1_fu_196_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    th_1_fu_196 <= ap_const_lv5_0;
                elsif (((icmp_ln79_fu_1079_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    th_1_fu_196 <= select_ln80_1_fu_1152_p3;
                end if;
            end if; 
        end if;
    end process;

    tw_fu_192_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    tw_fu_192 <= ap_const_lv5_0;
                elsif (((icmp_ln79_fu_1079_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    tw_fu_192 <= add_ln81_fu_1256_p2;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln79_fu_1079_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln80_reg_1498 <= icmp_ln80_fu_1100_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln79_1_fu_1085_p2 <= std_logic_vector(unsigned(indvar_flatten492_fu_208) + unsigned(ap_const_lv15_1));
    add_ln79_fu_1299_p2 <= std_logic_vector(unsigned(feat_fu_204) + unsigned(ap_const_lv7_1));
    add_ln80_1_fu_1262_p2 <= std_logic_vector(unsigned(indvar_flatten479_fu_200) + unsigned(ap_const_lv10_1));
    add_ln80_fu_1132_p2 <= std_logic_vector(unsigned(select_ln79_fu_1106_p3) + unsigned(ap_const_lv5_1));
    add_ln81_fu_1256_p2 <= std_logic_vector(unsigned(select_ln80_fu_1144_p3) + unsigned(ap_const_lv5_1));
    add_ln82_1_fu_1182_p2 <= std_logic_vector(unsigned(add_ln82_fu_1172_p2) + unsigned(zext_ln82_1_fu_1178_p1));
    add_ln82_fu_1172_p2 <= std_logic_vector(unsigned(p_shl2_fu_1164_p3) + unsigned(zext_ln82_fu_1160_p1));
    and_ln79_fu_1126_p2 <= (xor_ln79_fu_1114_p2 and icmp_ln81_fu_1120_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter2, conv1_to_conv2_full_n)
    begin
                ap_block_pp0_stage0_01001 <= ((conv1_to_conv2_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter2, conv1_to_conv2_full_n)
    begin
                ap_block_pp0_stage0_11001 <= ((conv1_to_conv2_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter2, conv1_to_conv2_full_n)
    begin
                ap_block_pp0_stage0_subdone <= ((conv1_to_conv2_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1));
    end process;

        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state3_pp0_stage0_iter2_assign_proc : process(conv1_to_conv2_full_n)
    begin
                ap_block_state3_pp0_stage0_iter2 <= (conv1_to_conv2_full_n = ap_const_logic_0);
    end process;


    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, icmp_ln79_fu_1079_p2)
    begin
        if (((icmp_ln79_fu_1079_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter1_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    conv1_to_conv2_blk_n_assign_proc : process(ap_enable_reg_pp0_iter2, conv1_to_conv2_full_n, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            conv1_to_conv2_blk_n <= conv1_to_conv2_full_n;
        else 
            conv1_to_conv2_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    conv1_to_conv2_din <= tmp_253_fu_1316_p66;

    conv1_to_conv2_write_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            conv1_to_conv2_write <= ap_const_logic_1;
        else 
            conv1_to_conv2_write <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln79_fu_1079_p2 <= "1" when (indvar_flatten492_fu_208 = ap_const_lv15_4840) else "0";
    icmp_ln80_fu_1100_p2 <= "1" when (indvar_flatten479_fu_200 = ap_const_lv10_121) else "0";
    icmp_ln81_fu_1120_p2 <= "1" when (tw_fu_192 = ap_const_lv5_11) else "0";
    layer1_output_tile_10_address0 <= zext_ln82_2_fu_1188_p1(9 - 1 downto 0);

    layer1_output_tile_10_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            layer1_output_tile_10_ce0 <= ap_const_logic_1;
        else 
            layer1_output_tile_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer1_output_tile_11_address0 <= zext_ln82_2_fu_1188_p1(9 - 1 downto 0);

    layer1_output_tile_11_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            layer1_output_tile_11_ce0 <= ap_const_logic_1;
        else 
            layer1_output_tile_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer1_output_tile_12_address0 <= zext_ln82_2_fu_1188_p1(9 - 1 downto 0);

    layer1_output_tile_12_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            layer1_output_tile_12_ce0 <= ap_const_logic_1;
        else 
            layer1_output_tile_12_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer1_output_tile_13_address0 <= zext_ln82_2_fu_1188_p1(9 - 1 downto 0);

    layer1_output_tile_13_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            layer1_output_tile_13_ce0 <= ap_const_logic_1;
        else 
            layer1_output_tile_13_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer1_output_tile_14_address0 <= zext_ln82_2_fu_1188_p1(9 - 1 downto 0);

    layer1_output_tile_14_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            layer1_output_tile_14_ce0 <= ap_const_logic_1;
        else 
            layer1_output_tile_14_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer1_output_tile_15_address0 <= zext_ln82_2_fu_1188_p1(9 - 1 downto 0);

    layer1_output_tile_15_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            layer1_output_tile_15_ce0 <= ap_const_logic_1;
        else 
            layer1_output_tile_15_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer1_output_tile_16_address0 <= zext_ln82_2_fu_1188_p1(9 - 1 downto 0);

    layer1_output_tile_16_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            layer1_output_tile_16_ce0 <= ap_const_logic_1;
        else 
            layer1_output_tile_16_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer1_output_tile_17_address0 <= zext_ln82_2_fu_1188_p1(9 - 1 downto 0);

    layer1_output_tile_17_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            layer1_output_tile_17_ce0 <= ap_const_logic_1;
        else 
            layer1_output_tile_17_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer1_output_tile_18_address0 <= zext_ln82_2_fu_1188_p1(9 - 1 downto 0);

    layer1_output_tile_18_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            layer1_output_tile_18_ce0 <= ap_const_logic_1;
        else 
            layer1_output_tile_18_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer1_output_tile_19_address0 <= zext_ln82_2_fu_1188_p1(9 - 1 downto 0);

    layer1_output_tile_19_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            layer1_output_tile_19_ce0 <= ap_const_logic_1;
        else 
            layer1_output_tile_19_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer1_output_tile_1_address0 <= zext_ln82_2_fu_1188_p1(9 - 1 downto 0);

    layer1_output_tile_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            layer1_output_tile_1_ce0 <= ap_const_logic_1;
        else 
            layer1_output_tile_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer1_output_tile_20_address0 <= zext_ln82_2_fu_1188_p1(9 - 1 downto 0);

    layer1_output_tile_20_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            layer1_output_tile_20_ce0 <= ap_const_logic_1;
        else 
            layer1_output_tile_20_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer1_output_tile_21_address0 <= zext_ln82_2_fu_1188_p1(9 - 1 downto 0);

    layer1_output_tile_21_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            layer1_output_tile_21_ce0 <= ap_const_logic_1;
        else 
            layer1_output_tile_21_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer1_output_tile_22_address0 <= zext_ln82_2_fu_1188_p1(9 - 1 downto 0);

    layer1_output_tile_22_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            layer1_output_tile_22_ce0 <= ap_const_logic_1;
        else 
            layer1_output_tile_22_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer1_output_tile_23_address0 <= zext_ln82_2_fu_1188_p1(9 - 1 downto 0);

    layer1_output_tile_23_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            layer1_output_tile_23_ce0 <= ap_const_logic_1;
        else 
            layer1_output_tile_23_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer1_output_tile_24_address0 <= zext_ln82_2_fu_1188_p1(9 - 1 downto 0);

    layer1_output_tile_24_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            layer1_output_tile_24_ce0 <= ap_const_logic_1;
        else 
            layer1_output_tile_24_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer1_output_tile_25_address0 <= zext_ln82_2_fu_1188_p1(9 - 1 downto 0);

    layer1_output_tile_25_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            layer1_output_tile_25_ce0 <= ap_const_logic_1;
        else 
            layer1_output_tile_25_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer1_output_tile_26_address0 <= zext_ln82_2_fu_1188_p1(9 - 1 downto 0);

    layer1_output_tile_26_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            layer1_output_tile_26_ce0 <= ap_const_logic_1;
        else 
            layer1_output_tile_26_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer1_output_tile_27_address0 <= zext_ln82_2_fu_1188_p1(9 - 1 downto 0);

    layer1_output_tile_27_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            layer1_output_tile_27_ce0 <= ap_const_logic_1;
        else 
            layer1_output_tile_27_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer1_output_tile_28_address0 <= zext_ln82_2_fu_1188_p1(9 - 1 downto 0);

    layer1_output_tile_28_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            layer1_output_tile_28_ce0 <= ap_const_logic_1;
        else 
            layer1_output_tile_28_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer1_output_tile_29_address0 <= zext_ln82_2_fu_1188_p1(9 - 1 downto 0);

    layer1_output_tile_29_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            layer1_output_tile_29_ce0 <= ap_const_logic_1;
        else 
            layer1_output_tile_29_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer1_output_tile_2_address0 <= zext_ln82_2_fu_1188_p1(9 - 1 downto 0);

    layer1_output_tile_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            layer1_output_tile_2_ce0 <= ap_const_logic_1;
        else 
            layer1_output_tile_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer1_output_tile_30_address0 <= zext_ln82_2_fu_1188_p1(9 - 1 downto 0);

    layer1_output_tile_30_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            layer1_output_tile_30_ce0 <= ap_const_logic_1;
        else 
            layer1_output_tile_30_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer1_output_tile_31_address0 <= zext_ln82_2_fu_1188_p1(9 - 1 downto 0);

    layer1_output_tile_31_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            layer1_output_tile_31_ce0 <= ap_const_logic_1;
        else 
            layer1_output_tile_31_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer1_output_tile_32_address0 <= zext_ln82_2_fu_1188_p1(9 - 1 downto 0);

    layer1_output_tile_32_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            layer1_output_tile_32_ce0 <= ap_const_logic_1;
        else 
            layer1_output_tile_32_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer1_output_tile_33_address0 <= zext_ln82_2_fu_1188_p1(9 - 1 downto 0);

    layer1_output_tile_33_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            layer1_output_tile_33_ce0 <= ap_const_logic_1;
        else 
            layer1_output_tile_33_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer1_output_tile_34_address0 <= zext_ln82_2_fu_1188_p1(9 - 1 downto 0);

    layer1_output_tile_34_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            layer1_output_tile_34_ce0 <= ap_const_logic_1;
        else 
            layer1_output_tile_34_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer1_output_tile_35_address0 <= zext_ln82_2_fu_1188_p1(9 - 1 downto 0);

    layer1_output_tile_35_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            layer1_output_tile_35_ce0 <= ap_const_logic_1;
        else 
            layer1_output_tile_35_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer1_output_tile_36_address0 <= zext_ln82_2_fu_1188_p1(9 - 1 downto 0);

    layer1_output_tile_36_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            layer1_output_tile_36_ce0 <= ap_const_logic_1;
        else 
            layer1_output_tile_36_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer1_output_tile_37_address0 <= zext_ln82_2_fu_1188_p1(9 - 1 downto 0);

    layer1_output_tile_37_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            layer1_output_tile_37_ce0 <= ap_const_logic_1;
        else 
            layer1_output_tile_37_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer1_output_tile_38_address0 <= zext_ln82_2_fu_1188_p1(9 - 1 downto 0);

    layer1_output_tile_38_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            layer1_output_tile_38_ce0 <= ap_const_logic_1;
        else 
            layer1_output_tile_38_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer1_output_tile_39_address0 <= zext_ln82_2_fu_1188_p1(9 - 1 downto 0);

    layer1_output_tile_39_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            layer1_output_tile_39_ce0 <= ap_const_logic_1;
        else 
            layer1_output_tile_39_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer1_output_tile_3_address0 <= zext_ln82_2_fu_1188_p1(9 - 1 downto 0);

    layer1_output_tile_3_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            layer1_output_tile_3_ce0 <= ap_const_logic_1;
        else 
            layer1_output_tile_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer1_output_tile_40_address0 <= zext_ln82_2_fu_1188_p1(9 - 1 downto 0);

    layer1_output_tile_40_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            layer1_output_tile_40_ce0 <= ap_const_logic_1;
        else 
            layer1_output_tile_40_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer1_output_tile_41_address0 <= zext_ln82_2_fu_1188_p1(9 - 1 downto 0);

    layer1_output_tile_41_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            layer1_output_tile_41_ce0 <= ap_const_logic_1;
        else 
            layer1_output_tile_41_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer1_output_tile_42_address0 <= zext_ln82_2_fu_1188_p1(9 - 1 downto 0);

    layer1_output_tile_42_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            layer1_output_tile_42_ce0 <= ap_const_logic_1;
        else 
            layer1_output_tile_42_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer1_output_tile_43_address0 <= zext_ln82_2_fu_1188_p1(9 - 1 downto 0);

    layer1_output_tile_43_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            layer1_output_tile_43_ce0 <= ap_const_logic_1;
        else 
            layer1_output_tile_43_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer1_output_tile_44_address0 <= zext_ln82_2_fu_1188_p1(9 - 1 downto 0);

    layer1_output_tile_44_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            layer1_output_tile_44_ce0 <= ap_const_logic_1;
        else 
            layer1_output_tile_44_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer1_output_tile_45_address0 <= zext_ln82_2_fu_1188_p1(9 - 1 downto 0);

    layer1_output_tile_45_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            layer1_output_tile_45_ce0 <= ap_const_logic_1;
        else 
            layer1_output_tile_45_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer1_output_tile_46_address0 <= zext_ln82_2_fu_1188_p1(9 - 1 downto 0);

    layer1_output_tile_46_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            layer1_output_tile_46_ce0 <= ap_const_logic_1;
        else 
            layer1_output_tile_46_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer1_output_tile_47_address0 <= zext_ln82_2_fu_1188_p1(9 - 1 downto 0);

    layer1_output_tile_47_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            layer1_output_tile_47_ce0 <= ap_const_logic_1;
        else 
            layer1_output_tile_47_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer1_output_tile_48_address0 <= zext_ln82_2_fu_1188_p1(9 - 1 downto 0);

    layer1_output_tile_48_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            layer1_output_tile_48_ce0 <= ap_const_logic_1;
        else 
            layer1_output_tile_48_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer1_output_tile_49_address0 <= zext_ln82_2_fu_1188_p1(9 - 1 downto 0);

    layer1_output_tile_49_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            layer1_output_tile_49_ce0 <= ap_const_logic_1;
        else 
            layer1_output_tile_49_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer1_output_tile_4_address0 <= zext_ln82_2_fu_1188_p1(9 - 1 downto 0);

    layer1_output_tile_4_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            layer1_output_tile_4_ce0 <= ap_const_logic_1;
        else 
            layer1_output_tile_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer1_output_tile_50_address0 <= zext_ln82_2_fu_1188_p1(9 - 1 downto 0);

    layer1_output_tile_50_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            layer1_output_tile_50_ce0 <= ap_const_logic_1;
        else 
            layer1_output_tile_50_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer1_output_tile_51_address0 <= zext_ln82_2_fu_1188_p1(9 - 1 downto 0);

    layer1_output_tile_51_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            layer1_output_tile_51_ce0 <= ap_const_logic_1;
        else 
            layer1_output_tile_51_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer1_output_tile_52_address0 <= zext_ln82_2_fu_1188_p1(9 - 1 downto 0);

    layer1_output_tile_52_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            layer1_output_tile_52_ce0 <= ap_const_logic_1;
        else 
            layer1_output_tile_52_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer1_output_tile_53_address0 <= zext_ln82_2_fu_1188_p1(9 - 1 downto 0);

    layer1_output_tile_53_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            layer1_output_tile_53_ce0 <= ap_const_logic_1;
        else 
            layer1_output_tile_53_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer1_output_tile_54_address0 <= zext_ln82_2_fu_1188_p1(9 - 1 downto 0);

    layer1_output_tile_54_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            layer1_output_tile_54_ce0 <= ap_const_logic_1;
        else 
            layer1_output_tile_54_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer1_output_tile_55_address0 <= zext_ln82_2_fu_1188_p1(9 - 1 downto 0);

    layer1_output_tile_55_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            layer1_output_tile_55_ce0 <= ap_const_logic_1;
        else 
            layer1_output_tile_55_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer1_output_tile_56_address0 <= zext_ln82_2_fu_1188_p1(9 - 1 downto 0);

    layer1_output_tile_56_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            layer1_output_tile_56_ce0 <= ap_const_logic_1;
        else 
            layer1_output_tile_56_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer1_output_tile_57_address0 <= zext_ln82_2_fu_1188_p1(9 - 1 downto 0);

    layer1_output_tile_57_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            layer1_output_tile_57_ce0 <= ap_const_logic_1;
        else 
            layer1_output_tile_57_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer1_output_tile_58_address0 <= zext_ln82_2_fu_1188_p1(9 - 1 downto 0);

    layer1_output_tile_58_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            layer1_output_tile_58_ce0 <= ap_const_logic_1;
        else 
            layer1_output_tile_58_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer1_output_tile_59_address0 <= zext_ln82_2_fu_1188_p1(9 - 1 downto 0);

    layer1_output_tile_59_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            layer1_output_tile_59_ce0 <= ap_const_logic_1;
        else 
            layer1_output_tile_59_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer1_output_tile_5_address0 <= zext_ln82_2_fu_1188_p1(9 - 1 downto 0);

    layer1_output_tile_5_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            layer1_output_tile_5_ce0 <= ap_const_logic_1;
        else 
            layer1_output_tile_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer1_output_tile_60_address0 <= zext_ln82_2_fu_1188_p1(9 - 1 downto 0);

    layer1_output_tile_60_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            layer1_output_tile_60_ce0 <= ap_const_logic_1;
        else 
            layer1_output_tile_60_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer1_output_tile_61_address0 <= zext_ln82_2_fu_1188_p1(9 - 1 downto 0);

    layer1_output_tile_61_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            layer1_output_tile_61_ce0 <= ap_const_logic_1;
        else 
            layer1_output_tile_61_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer1_output_tile_62_address0 <= zext_ln82_2_fu_1188_p1(9 - 1 downto 0);

    layer1_output_tile_62_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            layer1_output_tile_62_ce0 <= ap_const_logic_1;
        else 
            layer1_output_tile_62_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer1_output_tile_63_address0 <= zext_ln82_2_fu_1188_p1(9 - 1 downto 0);

    layer1_output_tile_63_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            layer1_output_tile_63_ce0 <= ap_const_logic_1;
        else 
            layer1_output_tile_63_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer1_output_tile_6_address0 <= zext_ln82_2_fu_1188_p1(9 - 1 downto 0);

    layer1_output_tile_6_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            layer1_output_tile_6_ce0 <= ap_const_logic_1;
        else 
            layer1_output_tile_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer1_output_tile_7_address0 <= zext_ln82_2_fu_1188_p1(9 - 1 downto 0);

    layer1_output_tile_7_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            layer1_output_tile_7_ce0 <= ap_const_logic_1;
        else 
            layer1_output_tile_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer1_output_tile_8_address0 <= zext_ln82_2_fu_1188_p1(9 - 1 downto 0);

    layer1_output_tile_8_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            layer1_output_tile_8_ce0 <= ap_const_logic_1;
        else 
            layer1_output_tile_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer1_output_tile_9_address0 <= zext_ln82_2_fu_1188_p1(9 - 1 downto 0);

    layer1_output_tile_9_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            layer1_output_tile_9_ce0 <= ap_const_logic_1;
        else 
            layer1_output_tile_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer1_output_tile_address0 <= zext_ln82_2_fu_1188_p1(9 - 1 downto 0);

    layer1_output_tile_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            layer1_output_tile_ce0 <= ap_const_logic_1;
        else 
            layer1_output_tile_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    or_ln80_fu_1138_p2 <= (icmp_ln80_fu_1100_p2 or and_ln79_fu_1126_p2);
    p_shl2_fu_1164_p3 <= (select_ln80_1_fu_1152_p3 & ap_const_lv4_0);
    select_ln79_1_fu_1305_p3 <= 
        add_ln79_fu_1299_p2 when (icmp_ln80_reg_1498(0) = '1') else 
        feat_fu_204;
    select_ln79_fu_1106_p3 <= 
        ap_const_lv5_0 when (icmp_ln80_fu_1100_p2(0) = '1') else 
        th_1_fu_196;
    select_ln80_1_fu_1152_p3 <= 
        add_ln80_fu_1132_p2 when (and_ln79_fu_1126_p2(0) = '1') else 
        select_ln79_fu_1106_p3;
    select_ln80_2_fu_1268_p3 <= 
        ap_const_lv10_1 when (icmp_ln80_fu_1100_p2(0) = '1') else 
        add_ln80_1_fu_1262_p2;
    select_ln80_fu_1144_p3 <= 
        ap_const_lv5_0 when (or_ln80_fu_1138_p2(0) = '1') else 
        tw_fu_192;
    tmp_253_fu_1316_p65 <= select_ln79_1_fu_1305_p3(6 - 1 downto 0);
    xor_ln79_fu_1114_p2 <= (icmp_ln80_fu_1100_p2 xor ap_const_lv1_1);
    zext_ln82_1_fu_1178_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln80_fu_1144_p3),9));
    zext_ln82_2_fu_1188_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln82_1_fu_1182_p2),64));
    zext_ln82_fu_1160_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln80_1_fu_1152_p3),9));
end behav;
