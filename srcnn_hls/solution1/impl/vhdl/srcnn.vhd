-- ==============================================================
-- Generated by Vitis HLS v2023.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity srcnn is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_ftmap_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    input_ftmap_ce0 : OUT STD_LOGIC;
    input_ftmap_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv1_weights_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    conv1_weights_ce0 : OUT STD_LOGIC;
    conv1_weights_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv1_weights_address1 : OUT STD_LOGIC_VECTOR (12 downto 0);
    conv1_weights_ce1 : OUT STD_LOGIC;
    conv1_weights_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv1_biases_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    conv1_biases_ce0 : OUT STD_LOGIC;
    conv1_biases_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv2_weights_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    conv2_weights_ce0 : OUT STD_LOGIC;
    conv2_weights_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv2_weights_address1 : OUT STD_LOGIC_VECTOR (10 downto 0);
    conv2_weights_ce1 : OUT STD_LOGIC;
    conv2_weights_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv2_biases_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    conv2_biases_ce0 : OUT STD_LOGIC;
    conv2_biases_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv3_weights_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    conv3_weights_ce0 : OUT STD_LOGIC;
    conv3_weights_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv3_weights_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    conv3_weights_ce1 : OUT STD_LOGIC;
    conv3_weights_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv3_biases : IN STD_LOGIC_VECTOR (31 downto 0);
    output_ftmap_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    output_ftmap_ce0 : OUT STD_LOGIC;
    output_ftmap_we0 : OUT STD_LOGIC;
    output_ftmap_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of srcnn is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "srcnn_srcnn,hls_ip_2023_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xck26-sfvc784-2LV-c,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.360400,HLS_SYN_LAT=1624584872,HLS_SYN_TPT=none,HLS_SYN_MEM=11064,HLS_SYN_DSP=0,HLS_SYN_FF=12832,HLS_SYN_LUT=36144,HLS_VERSION=2023_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal layer1_output_address0 : STD_LOGIC_VECTOR (21 downto 0);
    signal layer1_output_ce0 : STD_LOGIC;
    signal layer1_output_we0 : STD_LOGIC;
    signal layer1_output_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal layer1_output_ce1 : STD_LOGIC;
    signal layer1_output_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal layer2_output_address0 : STD_LOGIC_VECTOR (20 downto 0);
    signal layer2_output_ce0 : STD_LOGIC;
    signal layer2_output_we0 : STD_LOGIC;
    signal layer2_output_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_fu_87_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_reg_92 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal grp_conv1_fu_52_ap_start : STD_LOGIC;
    signal grp_conv1_fu_52_ap_done : STD_LOGIC;
    signal grp_conv1_fu_52_ap_idle : STD_LOGIC;
    signal grp_conv1_fu_52_ap_ready : STD_LOGIC;
    signal grp_conv1_fu_52_input_ftmap_address0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_conv1_fu_52_input_ftmap_ce0 : STD_LOGIC;
    signal grp_conv1_fu_52_conv1_weights_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_conv1_fu_52_conv1_weights_ce0 : STD_LOGIC;
    signal grp_conv1_fu_52_conv1_weights_address1 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_conv1_fu_52_conv1_weights_ce1 : STD_LOGIC;
    signal grp_conv1_fu_52_conv1_biases_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_conv1_fu_52_conv1_biases_ce0 : STD_LOGIC;
    signal grp_conv1_fu_52_layer1_output_address0 : STD_LOGIC_VECTOR (21 downto 0);
    signal grp_conv1_fu_52_layer1_output_ce0 : STD_LOGIC;
    signal grp_conv1_fu_52_layer1_output_we0 : STD_LOGIC;
    signal grp_conv1_fu_52_layer1_output_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv1_fu_52_grp_fu_97_p_din0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv1_fu_52_grp_fu_97_p_din1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv1_fu_52_grp_fu_97_p_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_conv1_fu_52_grp_fu_97_p_ce : STD_LOGIC;
    signal grp_conv1_fu_52_grp_fu_101_p_din0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv1_fu_52_grp_fu_101_p_din1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv1_fu_52_grp_fu_101_p_ce : STD_LOGIC;
    signal grp_conv1_fu_52_grp_fu_105_p_din0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv1_fu_52_grp_fu_105_p_ce : STD_LOGIC;
    signal grp_conv2_fu_64_ap_start : STD_LOGIC;
    signal grp_conv2_fu_64_ap_done : STD_LOGIC;
    signal grp_conv2_fu_64_ap_idle : STD_LOGIC;
    signal grp_conv2_fu_64_ap_ready : STD_LOGIC;
    signal grp_conv2_fu_64_conv2_weights_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_conv2_fu_64_conv2_weights_ce0 : STD_LOGIC;
    signal grp_conv2_fu_64_conv2_weights_address1 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_conv2_fu_64_conv2_weights_ce1 : STD_LOGIC;
    signal grp_conv2_fu_64_conv2_biases_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_conv2_fu_64_conv2_biases_ce0 : STD_LOGIC;
    signal grp_conv2_fu_64_layer1_output_address0 : STD_LOGIC_VECTOR (21 downto 0);
    signal grp_conv2_fu_64_layer1_output_ce0 : STD_LOGIC;
    signal grp_conv2_fu_64_layer1_output_address1 : STD_LOGIC_VECTOR (21 downto 0);
    signal grp_conv2_fu_64_layer1_output_ce1 : STD_LOGIC;
    signal grp_conv2_fu_64_layer2_output_address0 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_conv2_fu_64_layer2_output_ce0 : STD_LOGIC;
    signal grp_conv2_fu_64_layer2_output_we0 : STD_LOGIC;
    signal grp_conv2_fu_64_layer2_output_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv2_fu_64_grp_fu_97_p_din0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv2_fu_64_grp_fu_97_p_din1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv2_fu_64_grp_fu_97_p_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_conv2_fu_64_grp_fu_97_p_ce : STD_LOGIC;
    signal grp_conv2_fu_64_grp_fu_101_p_din0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv2_fu_64_grp_fu_101_p_din1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv2_fu_64_grp_fu_101_p_ce : STD_LOGIC;
    signal grp_conv2_fu_64_grp_fu_108_p_din0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv2_fu_64_grp_fu_108_p_ce : STD_LOGIC;
    signal grp_conv3_fu_76_ap_start : STD_LOGIC;
    signal grp_conv3_fu_76_ap_done : STD_LOGIC;
    signal grp_conv3_fu_76_ap_idle : STD_LOGIC;
    signal grp_conv3_fu_76_ap_ready : STD_LOGIC;
    signal grp_conv3_fu_76_conv3_weights_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_conv3_fu_76_conv3_weights_ce0 : STD_LOGIC;
    signal grp_conv3_fu_76_conv3_weights_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_conv3_fu_76_conv3_weights_ce1 : STD_LOGIC;
    signal grp_conv3_fu_76_output_ftmap_address0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_conv3_fu_76_output_ftmap_ce0 : STD_LOGIC;
    signal grp_conv3_fu_76_output_ftmap_we0 : STD_LOGIC;
    signal grp_conv3_fu_76_output_ftmap_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv3_fu_76_layer2_output_address0 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_conv3_fu_76_layer2_output_ce0 : STD_LOGIC;
    signal grp_conv3_fu_76_grp_fu_97_p_din0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv3_fu_76_grp_fu_97_p_din1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv3_fu_76_grp_fu_97_p_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_conv3_fu_76_grp_fu_97_p_ce : STD_LOGIC;
    signal grp_conv3_fu_76_grp_fu_108_p_din0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv3_fu_76_grp_fu_108_p_ce : STD_LOGIC;
    signal grp_conv3_fu_76_grp_fu_101_p_din0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv3_fu_76_grp_fu_101_p_din1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv3_fu_76_grp_fu_101_p_ce : STD_LOGIC;
    signal grp_conv3_fu_76_grp_fu_105_p_din0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv3_fu_76_grp_fu_105_p_ce : STD_LOGIC;
    signal grp_conv1_fu_52_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal grp_conv2_fu_64_ap_start_reg : STD_LOGIC := '0';
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_NS_fsm_state3 : STD_LOGIC;
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal grp_conv3_fu_76_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal grp_fu_97_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_97_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_97_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_97_ce : STD_LOGIC;
    signal grp_fu_101_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_101_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_101_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_101_ce : STD_LOGIC;
    signal grp_fu_105_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_105_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_105_ce : STD_LOGIC;
    signal grp_fu_108_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_108_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_108_ce : STD_LOGIC;
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component srcnn_conv1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_ftmap_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        input_ftmap_ce0 : OUT STD_LOGIC;
        input_ftmap_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        conv1_weights_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        conv1_weights_ce0 : OUT STD_LOGIC;
        conv1_weights_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        conv1_weights_address1 : OUT STD_LOGIC_VECTOR (12 downto 0);
        conv1_weights_ce1 : OUT STD_LOGIC;
        conv1_weights_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        conv1_biases_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        conv1_biases_ce0 : OUT STD_LOGIC;
        conv1_biases_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        layer1_output_address0 : OUT STD_LOGIC_VECTOR (21 downto 0);
        layer1_output_ce0 : OUT STD_LOGIC;
        layer1_output_we0 : OUT STD_LOGIC;
        layer1_output_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_97_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_97_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_97_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
        grp_fu_97_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_97_p_ce : OUT STD_LOGIC;
        grp_fu_101_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_101_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_101_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_101_p_ce : OUT STD_LOGIC;
        grp_fu_105_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_105_p_dout0 : IN STD_LOGIC_VECTOR (63 downto 0);
        grp_fu_105_p_ce : OUT STD_LOGIC );
    end component;


    component srcnn_conv2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        conv2_weights_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        conv2_weights_ce0 : OUT STD_LOGIC;
        conv2_weights_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        conv2_weights_address1 : OUT STD_LOGIC_VECTOR (10 downto 0);
        conv2_weights_ce1 : OUT STD_LOGIC;
        conv2_weights_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        conv2_biases_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        conv2_biases_ce0 : OUT STD_LOGIC;
        conv2_biases_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        layer1_output_address0 : OUT STD_LOGIC_VECTOR (21 downto 0);
        layer1_output_ce0 : OUT STD_LOGIC;
        layer1_output_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        layer1_output_address1 : OUT STD_LOGIC_VECTOR (21 downto 0);
        layer1_output_ce1 : OUT STD_LOGIC;
        layer1_output_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        layer2_output_address0 : OUT STD_LOGIC_VECTOR (20 downto 0);
        layer2_output_ce0 : OUT STD_LOGIC;
        layer2_output_we0 : OUT STD_LOGIC;
        layer2_output_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_97_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_97_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_97_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
        grp_fu_97_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_97_p_ce : OUT STD_LOGIC;
        grp_fu_101_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_101_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_101_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_101_p_ce : OUT STD_LOGIC;
        grp_fu_108_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_108_p_dout0 : IN STD_LOGIC_VECTOR (63 downto 0);
        grp_fu_108_p_ce : OUT STD_LOGIC );
    end component;


    component srcnn_conv3 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        conv3_weights_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        conv3_weights_ce0 : OUT STD_LOGIC;
        conv3_weights_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        conv3_weights_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        conv3_weights_ce1 : OUT STD_LOGIC;
        conv3_weights_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        conv3_biases_0_0_val : IN STD_LOGIC_VECTOR (31 downto 0);
        output_ftmap_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        output_ftmap_ce0 : OUT STD_LOGIC;
        output_ftmap_we0 : OUT STD_LOGIC;
        output_ftmap_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        layer2_output_address0 : OUT STD_LOGIC_VECTOR (20 downto 0);
        layer2_output_ce0 : OUT STD_LOGIC;
        layer2_output_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_97_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_97_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_97_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
        grp_fu_97_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_97_p_ce : OUT STD_LOGIC;
        grp_fu_108_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_108_p_dout0 : IN STD_LOGIC_VECTOR (63 downto 0);
        grp_fu_108_p_ce : OUT STD_LOGIC;
        grp_fu_101_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_101_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_101_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_101_p_ce : OUT STD_LOGIC;
        grp_fu_105_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_105_p_dout0 : IN STD_LOGIC_VECTOR (63 downto 0);
        grp_fu_105_p_ce : OUT STD_LOGIC );
    end component;


    component srcnn_fadd_32ns_32ns_32_4_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component srcnn_fmul_32ns_32ns_32_3_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component srcnn_sitodp_32s_64_4_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component srcnn_layer1_output_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (21 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (21 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component srcnn_layer2_output_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (20 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    layer1_output_U : component srcnn_layer1_output_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 4161600,
        AddressWidth => 22)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => layer1_output_address0,
        ce0 => layer1_output_ce0,
        we0 => layer1_output_we0,
        d0 => grp_conv1_fu_52_layer1_output_d0,
        q0 => layer1_output_q0,
        address1 => grp_conv2_fu_64_layer1_output_address1,
        ce1 => layer1_output_ce1,
        q1 => layer1_output_q1);

    layer2_output_U : component srcnn_layer2_output_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 2080800,
        AddressWidth => 21)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => layer2_output_address0,
        ce0 => layer2_output_ce0,
        we0 => layer2_output_we0,
        d0 => grp_conv2_fu_64_layer2_output_d0,
        q0 => layer2_output_q0);

    grp_conv1_fu_52 : component srcnn_conv1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_conv1_fu_52_ap_start,
        ap_done => grp_conv1_fu_52_ap_done,
        ap_idle => grp_conv1_fu_52_ap_idle,
        ap_ready => grp_conv1_fu_52_ap_ready,
        input_ftmap_address0 => grp_conv1_fu_52_input_ftmap_address0,
        input_ftmap_ce0 => grp_conv1_fu_52_input_ftmap_ce0,
        input_ftmap_q0 => input_ftmap_q0,
        conv1_weights_address0 => grp_conv1_fu_52_conv1_weights_address0,
        conv1_weights_ce0 => grp_conv1_fu_52_conv1_weights_ce0,
        conv1_weights_q0 => conv1_weights_q0,
        conv1_weights_address1 => grp_conv1_fu_52_conv1_weights_address1,
        conv1_weights_ce1 => grp_conv1_fu_52_conv1_weights_ce1,
        conv1_weights_q1 => conv1_weights_q1,
        conv1_biases_address0 => grp_conv1_fu_52_conv1_biases_address0,
        conv1_biases_ce0 => grp_conv1_fu_52_conv1_biases_ce0,
        conv1_biases_q0 => conv1_biases_q0,
        layer1_output_address0 => grp_conv1_fu_52_layer1_output_address0,
        layer1_output_ce0 => grp_conv1_fu_52_layer1_output_ce0,
        layer1_output_we0 => grp_conv1_fu_52_layer1_output_we0,
        layer1_output_d0 => grp_conv1_fu_52_layer1_output_d0,
        grp_fu_97_p_din0 => grp_conv1_fu_52_grp_fu_97_p_din0,
        grp_fu_97_p_din1 => grp_conv1_fu_52_grp_fu_97_p_din1,
        grp_fu_97_p_opcode => grp_conv1_fu_52_grp_fu_97_p_opcode,
        grp_fu_97_p_dout0 => grp_fu_97_p2,
        grp_fu_97_p_ce => grp_conv1_fu_52_grp_fu_97_p_ce,
        grp_fu_101_p_din0 => grp_conv1_fu_52_grp_fu_101_p_din0,
        grp_fu_101_p_din1 => grp_conv1_fu_52_grp_fu_101_p_din1,
        grp_fu_101_p_dout0 => grp_fu_101_p2,
        grp_fu_101_p_ce => grp_conv1_fu_52_grp_fu_101_p_ce,
        grp_fu_105_p_din0 => grp_conv1_fu_52_grp_fu_105_p_din0,
        grp_fu_105_p_dout0 => grp_fu_105_p1,
        grp_fu_105_p_ce => grp_conv1_fu_52_grp_fu_105_p_ce);

    grp_conv2_fu_64 : component srcnn_conv2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_conv2_fu_64_ap_start,
        ap_done => grp_conv2_fu_64_ap_done,
        ap_idle => grp_conv2_fu_64_ap_idle,
        ap_ready => grp_conv2_fu_64_ap_ready,
        conv2_weights_address0 => grp_conv2_fu_64_conv2_weights_address0,
        conv2_weights_ce0 => grp_conv2_fu_64_conv2_weights_ce0,
        conv2_weights_q0 => conv2_weights_q0,
        conv2_weights_address1 => grp_conv2_fu_64_conv2_weights_address1,
        conv2_weights_ce1 => grp_conv2_fu_64_conv2_weights_ce1,
        conv2_weights_q1 => conv2_weights_q1,
        conv2_biases_address0 => grp_conv2_fu_64_conv2_biases_address0,
        conv2_biases_ce0 => grp_conv2_fu_64_conv2_biases_ce0,
        conv2_biases_q0 => conv2_biases_q0,
        layer1_output_address0 => grp_conv2_fu_64_layer1_output_address0,
        layer1_output_ce0 => grp_conv2_fu_64_layer1_output_ce0,
        layer1_output_q0 => layer1_output_q0,
        layer1_output_address1 => grp_conv2_fu_64_layer1_output_address1,
        layer1_output_ce1 => grp_conv2_fu_64_layer1_output_ce1,
        layer1_output_q1 => layer1_output_q1,
        layer2_output_address0 => grp_conv2_fu_64_layer2_output_address0,
        layer2_output_ce0 => grp_conv2_fu_64_layer2_output_ce0,
        layer2_output_we0 => grp_conv2_fu_64_layer2_output_we0,
        layer2_output_d0 => grp_conv2_fu_64_layer2_output_d0,
        grp_fu_97_p_din0 => grp_conv2_fu_64_grp_fu_97_p_din0,
        grp_fu_97_p_din1 => grp_conv2_fu_64_grp_fu_97_p_din1,
        grp_fu_97_p_opcode => grp_conv2_fu_64_grp_fu_97_p_opcode,
        grp_fu_97_p_dout0 => grp_fu_97_p2,
        grp_fu_97_p_ce => grp_conv2_fu_64_grp_fu_97_p_ce,
        grp_fu_101_p_din0 => grp_conv2_fu_64_grp_fu_101_p_din0,
        grp_fu_101_p_din1 => grp_conv2_fu_64_grp_fu_101_p_din1,
        grp_fu_101_p_dout0 => grp_fu_101_p2,
        grp_fu_101_p_ce => grp_conv2_fu_64_grp_fu_101_p_ce,
        grp_fu_108_p_din0 => grp_conv2_fu_64_grp_fu_108_p_din0,
        grp_fu_108_p_dout0 => grp_fu_108_p1,
        grp_fu_108_p_ce => grp_conv2_fu_64_grp_fu_108_p_ce);

    grp_conv3_fu_76 : component srcnn_conv3
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_conv3_fu_76_ap_start,
        ap_done => grp_conv3_fu_76_ap_done,
        ap_idle => grp_conv3_fu_76_ap_idle,
        ap_ready => grp_conv3_fu_76_ap_ready,
        conv3_weights_address0 => grp_conv3_fu_76_conv3_weights_address0,
        conv3_weights_ce0 => grp_conv3_fu_76_conv3_weights_ce0,
        conv3_weights_q0 => conv3_weights_q0,
        conv3_weights_address1 => grp_conv3_fu_76_conv3_weights_address1,
        conv3_weights_ce1 => grp_conv3_fu_76_conv3_weights_ce1,
        conv3_weights_q1 => conv3_weights_q1,
        conv3_biases_0_0_val => empty_reg_92,
        output_ftmap_address0 => grp_conv3_fu_76_output_ftmap_address0,
        output_ftmap_ce0 => grp_conv3_fu_76_output_ftmap_ce0,
        output_ftmap_we0 => grp_conv3_fu_76_output_ftmap_we0,
        output_ftmap_d0 => grp_conv3_fu_76_output_ftmap_d0,
        layer2_output_address0 => grp_conv3_fu_76_layer2_output_address0,
        layer2_output_ce0 => grp_conv3_fu_76_layer2_output_ce0,
        layer2_output_q0 => layer2_output_q0,
        grp_fu_97_p_din0 => grp_conv3_fu_76_grp_fu_97_p_din0,
        grp_fu_97_p_din1 => grp_conv3_fu_76_grp_fu_97_p_din1,
        grp_fu_97_p_opcode => grp_conv3_fu_76_grp_fu_97_p_opcode,
        grp_fu_97_p_dout0 => grp_fu_97_p2,
        grp_fu_97_p_ce => grp_conv3_fu_76_grp_fu_97_p_ce,
        grp_fu_108_p_din0 => grp_conv3_fu_76_grp_fu_108_p_din0,
        grp_fu_108_p_dout0 => grp_fu_108_p1,
        grp_fu_108_p_ce => grp_conv3_fu_76_grp_fu_108_p_ce,
        grp_fu_101_p_din0 => grp_conv3_fu_76_grp_fu_101_p_din0,
        grp_fu_101_p_din1 => grp_conv3_fu_76_grp_fu_101_p_din1,
        grp_fu_101_p_dout0 => grp_fu_101_p2,
        grp_fu_101_p_ce => grp_conv3_fu_76_grp_fu_101_p_ce,
        grp_fu_105_p_din0 => grp_conv3_fu_76_grp_fu_105_p_din0,
        grp_fu_105_p_dout0 => grp_fu_105_p1,
        grp_fu_105_p_ce => grp_conv3_fu_76_grp_fu_105_p_ce);

    fadd_32ns_32ns_32_4_full_dsp_1_U42 : component srcnn_fadd_32ns_32ns_32_4_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_97_p0,
        din1 => grp_fu_97_p1,
        ce => grp_fu_97_ce,
        dout => grp_fu_97_p2);

    fmul_32ns_32ns_32_3_max_dsp_1_U43 : component srcnn_fmul_32ns_32ns_32_3_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_101_p0,
        din1 => grp_fu_101_p1,
        ce => grp_fu_101_ce,
        dout => grp_fu_101_p2);

    sitodp_32s_64_4_no_dsp_1_U44 : component srcnn_sitodp_32s_64_4_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_105_p0,
        ce => grp_fu_105_ce,
        dout => grp_fu_105_p1);

    sitodp_32s_64_4_no_dsp_1_U45 : component srcnn_sitodp_32s_64_4_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_108_p0,
        ce => grp_fu_108_ce,
        dout => grp_fu_108_p1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_conv1_fu_52_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_conv1_fu_52_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    grp_conv1_fu_52_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_conv1_fu_52_ap_ready = ap_const_logic_1)) then 
                    grp_conv1_fu_52_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_conv2_fu_64_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_conv2_fu_64_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_NS_fsm_state3) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    grp_conv2_fu_64_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_conv2_fu_64_ap_ready = ap_const_logic_1)) then 
                    grp_conv2_fu_64_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_conv3_fu_76_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_conv3_fu_76_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                    grp_conv3_fu_76_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_conv3_fu_76_ap_ready = ap_const_logic_1)) then 
                    grp_conv3_fu_76_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                empty_reg_92 <= empty_fu_87_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, grp_conv1_fu_52_ap_done, grp_conv2_fu_64_ap_done, grp_conv3_fu_76_ap_done, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state6)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (grp_conv1_fu_52_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (grp_conv2_fu_64_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (grp_conv3_fu_76_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_NS_fsm_state3 <= ap_NS_fsm(2);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state2_blk_assign_proc : process(grp_conv1_fu_52_ap_done)
    begin
        if ((grp_conv1_fu_52_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state2_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state2_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state3_blk <= ap_const_logic_0;

    ap_ST_fsm_state4_blk_assign_proc : process(grp_conv2_fu_64_ap_done)
    begin
        if ((grp_conv2_fu_64_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state4_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state4_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state5_blk <= ap_const_logic_0;

    ap_ST_fsm_state6_blk_assign_proc : process(grp_conv3_fu_76_ap_done)
    begin
        if ((grp_conv3_fu_76_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state6_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state6_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(grp_conv3_fu_76_ap_done, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) and (grp_conv3_fu_76_ap_done = ap_const_logic_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(grp_conv3_fu_76_ap_done, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) and (grp_conv3_fu_76_ap_done = ap_const_logic_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    conv1_biases_address0 <= grp_conv1_fu_52_conv1_biases_address0;
    conv1_biases_ce0 <= grp_conv1_fu_52_conv1_biases_ce0;
    conv1_weights_address0 <= grp_conv1_fu_52_conv1_weights_address0;
    conv1_weights_address1 <= grp_conv1_fu_52_conv1_weights_address1;
    conv1_weights_ce0 <= grp_conv1_fu_52_conv1_weights_ce0;
    conv1_weights_ce1 <= grp_conv1_fu_52_conv1_weights_ce1;
    conv2_biases_address0 <= grp_conv2_fu_64_conv2_biases_address0;
    conv2_biases_ce0 <= grp_conv2_fu_64_conv2_biases_ce0;
    conv2_weights_address0 <= grp_conv2_fu_64_conv2_weights_address0;
    conv2_weights_address1 <= grp_conv2_fu_64_conv2_weights_address1;
    conv2_weights_ce0 <= grp_conv2_fu_64_conv2_weights_ce0;
    conv2_weights_ce1 <= grp_conv2_fu_64_conv2_weights_ce1;
    conv3_weights_address0 <= grp_conv3_fu_76_conv3_weights_address0;
    conv3_weights_address1 <= grp_conv3_fu_76_conv3_weights_address1;
    conv3_weights_ce0 <= grp_conv3_fu_76_conv3_weights_ce0;
    conv3_weights_ce1 <= grp_conv3_fu_76_conv3_weights_ce1;
    empty_fu_87_p1 <= conv3_biases;
    grp_conv1_fu_52_ap_start <= grp_conv1_fu_52_ap_start_reg;
    grp_conv2_fu_64_ap_start <= grp_conv2_fu_64_ap_start_reg;
    grp_conv3_fu_76_ap_start <= grp_conv3_fu_76_ap_start_reg;

    grp_fu_101_ce_assign_proc : process(grp_conv1_fu_52_grp_fu_101_p_ce, grp_conv2_fu_64_grp_fu_101_p_ce, grp_conv3_fu_76_grp_fu_101_p_ce, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_101_ce <= grp_conv3_fu_76_grp_fu_101_p_ce;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_fu_101_ce <= grp_conv2_fu_64_grp_fu_101_p_ce;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_101_ce <= grp_conv1_fu_52_grp_fu_101_p_ce;
        else 
            grp_fu_101_ce <= ap_const_logic_1;
        end if; 
    end process;


    grp_fu_101_p0_assign_proc : process(grp_conv1_fu_52_grp_fu_101_p_din0, grp_conv2_fu_64_grp_fu_101_p_din0, grp_conv3_fu_76_grp_fu_101_p_din0, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_101_p0 <= grp_conv3_fu_76_grp_fu_101_p_din0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_fu_101_p0 <= grp_conv2_fu_64_grp_fu_101_p_din0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_101_p0 <= grp_conv1_fu_52_grp_fu_101_p_din0;
        else 
            grp_fu_101_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_101_p1_assign_proc : process(grp_conv1_fu_52_grp_fu_101_p_din1, grp_conv2_fu_64_grp_fu_101_p_din1, grp_conv3_fu_76_grp_fu_101_p_din1, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_101_p1 <= grp_conv3_fu_76_grp_fu_101_p_din1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_fu_101_p1 <= grp_conv2_fu_64_grp_fu_101_p_din1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_101_p1 <= grp_conv1_fu_52_grp_fu_101_p_din1;
        else 
            grp_fu_101_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_105_ce_assign_proc : process(grp_conv1_fu_52_grp_fu_105_p_ce, grp_conv3_fu_76_grp_fu_105_p_ce, ap_CS_fsm_state2, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_105_ce <= grp_conv3_fu_76_grp_fu_105_p_ce;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_105_ce <= grp_conv1_fu_52_grp_fu_105_p_ce;
        else 
            grp_fu_105_ce <= ap_const_logic_1;
        end if; 
    end process;


    grp_fu_105_p0_assign_proc : process(grp_conv1_fu_52_grp_fu_105_p_din0, grp_conv3_fu_76_grp_fu_105_p_din0, ap_CS_fsm_state2, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_105_p0 <= grp_conv3_fu_76_grp_fu_105_p_din0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_105_p0 <= grp_conv1_fu_52_grp_fu_105_p_din0;
        else 
            grp_fu_105_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_108_ce_assign_proc : process(grp_conv2_fu_64_grp_fu_108_p_ce, grp_conv3_fu_76_grp_fu_108_p_ce, ap_CS_fsm_state4, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_108_ce <= grp_conv3_fu_76_grp_fu_108_p_ce;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_fu_108_ce <= grp_conv2_fu_64_grp_fu_108_p_ce;
        else 
            grp_fu_108_ce <= ap_const_logic_1;
        end if; 
    end process;


    grp_fu_108_p0_assign_proc : process(grp_conv2_fu_64_grp_fu_108_p_din0, grp_conv3_fu_76_grp_fu_108_p_din0, ap_CS_fsm_state4, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_108_p0 <= grp_conv3_fu_76_grp_fu_108_p_din0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_fu_108_p0 <= grp_conv2_fu_64_grp_fu_108_p_din0;
        else 
            grp_fu_108_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_97_ce_assign_proc : process(grp_conv1_fu_52_grp_fu_97_p_ce, grp_conv2_fu_64_grp_fu_97_p_ce, grp_conv3_fu_76_grp_fu_97_p_ce, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_97_ce <= grp_conv3_fu_76_grp_fu_97_p_ce;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_fu_97_ce <= grp_conv2_fu_64_grp_fu_97_p_ce;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_97_ce <= grp_conv1_fu_52_grp_fu_97_p_ce;
        else 
            grp_fu_97_ce <= ap_const_logic_1;
        end if; 
    end process;


    grp_fu_97_p0_assign_proc : process(grp_conv1_fu_52_grp_fu_97_p_din0, grp_conv2_fu_64_grp_fu_97_p_din0, grp_conv3_fu_76_grp_fu_97_p_din0, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_97_p0 <= grp_conv3_fu_76_grp_fu_97_p_din0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_fu_97_p0 <= grp_conv2_fu_64_grp_fu_97_p_din0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_97_p0 <= grp_conv1_fu_52_grp_fu_97_p_din0;
        else 
            grp_fu_97_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_97_p1_assign_proc : process(grp_conv1_fu_52_grp_fu_97_p_din1, grp_conv2_fu_64_grp_fu_97_p_din1, grp_conv3_fu_76_grp_fu_97_p_din1, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_97_p1 <= grp_conv3_fu_76_grp_fu_97_p_din1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_fu_97_p1 <= grp_conv2_fu_64_grp_fu_97_p_din1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_97_p1 <= grp_conv1_fu_52_grp_fu_97_p_din1;
        else 
            grp_fu_97_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    input_ftmap_address0 <= grp_conv1_fu_52_input_ftmap_address0;
    input_ftmap_ce0 <= grp_conv1_fu_52_input_ftmap_ce0;

    layer1_output_address0_assign_proc : process(grp_conv1_fu_52_layer1_output_address0, grp_conv2_fu_64_layer1_output_address0, ap_CS_fsm_state2, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            layer1_output_address0 <= grp_conv2_fu_64_layer1_output_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            layer1_output_address0 <= grp_conv1_fu_52_layer1_output_address0;
        else 
            layer1_output_address0 <= "XXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    layer1_output_ce0_assign_proc : process(grp_conv1_fu_52_layer1_output_ce0, grp_conv2_fu_64_layer1_output_ce0, ap_CS_fsm_state2, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            layer1_output_ce0 <= grp_conv2_fu_64_layer1_output_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            layer1_output_ce0 <= grp_conv1_fu_52_layer1_output_ce0;
        else 
            layer1_output_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_output_ce1_assign_proc : process(grp_conv2_fu_64_layer1_output_ce1, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            layer1_output_ce1 <= grp_conv2_fu_64_layer1_output_ce1;
        else 
            layer1_output_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_output_we0_assign_proc : process(grp_conv1_fu_52_layer1_output_we0, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            layer1_output_we0 <= grp_conv1_fu_52_layer1_output_we0;
        else 
            layer1_output_we0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_output_address0_assign_proc : process(grp_conv2_fu_64_layer2_output_address0, grp_conv3_fu_76_layer2_output_address0, ap_CS_fsm_state4, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            layer2_output_address0 <= grp_conv3_fu_76_layer2_output_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            layer2_output_address0 <= grp_conv2_fu_64_layer2_output_address0;
        else 
            layer2_output_address0 <= "XXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    layer2_output_ce0_assign_proc : process(grp_conv2_fu_64_layer2_output_ce0, grp_conv3_fu_76_layer2_output_ce0, ap_CS_fsm_state4, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            layer2_output_ce0 <= grp_conv3_fu_76_layer2_output_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            layer2_output_ce0 <= grp_conv2_fu_64_layer2_output_ce0;
        else 
            layer2_output_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_output_we0_assign_proc : process(grp_conv2_fu_64_layer2_output_we0, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            layer2_output_we0 <= grp_conv2_fu_64_layer2_output_we0;
        else 
            layer2_output_we0 <= ap_const_logic_0;
        end if; 
    end process;

    output_ftmap_address0 <= grp_conv3_fu_76_output_ftmap_address0;
    output_ftmap_ce0 <= grp_conv3_fu_76_output_ftmap_ce0;
    output_ftmap_d0 <= grp_conv3_fu_76_output_ftmap_d0;
    output_ftmap_we0 <= grp_conv3_fu_76_output_ftmap_we0;
end behav;
