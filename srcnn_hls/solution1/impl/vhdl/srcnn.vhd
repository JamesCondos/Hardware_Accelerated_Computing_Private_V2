-- ==============================================================
-- Generated by Vitis HLS v2023.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity srcnn is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_ftmap_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    input_ftmap_ce0 : OUT STD_LOGIC;
    input_ftmap_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv1_weights_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    conv1_weights_ce0 : OUT STD_LOGIC;
    conv1_weights_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv1_biases_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    conv1_biases_ce0 : OUT STD_LOGIC;
    conv1_biases_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv2_weights_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    conv2_weights_ce0 : OUT STD_LOGIC;
    conv2_weights_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv2_biases_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    conv2_biases_ce0 : OUT STD_LOGIC;
    conv2_biases_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv3_weights_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    conv3_weights_ce0 : OUT STD_LOGIC;
    conv3_weights_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv3_biases : IN STD_LOGIC_VECTOR (31 downto 0);
    output_ftmap_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    output_ftmap_ce0 : OUT STD_LOGIC;
    output_ftmap_we0 : OUT STD_LOGIC;
    output_ftmap_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of srcnn is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "srcnn_srcnn,hls_ip_2023_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xck26-sfvc784-2LV-c,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.016000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=283,HLS_SYN_DSP=0,HLS_SYN_FF=4567,HLS_SYN_LUT=5090,HLS_VERSION=2023_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (7 downto 0) := "00100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (7 downto 0) := "01000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv9_FF : STD_LOGIC_VECTOR (8 downto 0) := "011111111";
    constant ap_const_lv9_40 : STD_LOGIC_VECTOR (8 downto 0) := "001000000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv8_40 : STD_LOGIC_VECTOR (7 downto 0) := "01000000";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal h0_2_reg_244 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal h0_3_fu_156_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal h0_3_reg_254 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln239_fu_150_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal th_eff_fu_180_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal th_eff_reg_259 : STD_LOGIC_VECTOR (7 downto 0);
    signal w0_1_fu_194_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal w0_1_reg_269 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal icmp_ln242_fu_188_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln242_fu_208_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln242_reg_274 : STD_LOGIC_VECTOR (7 downto 0);
    signal tw_eff_fu_219_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tw_eff_reg_281 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_fu_232_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_reg_288 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal patch_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal patch_ce0 : STD_LOGIC;
    signal patch_we0 : STD_LOGIC;
    signal patch_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv2_buf_address0 : STD_LOGIC_VECTOR (17 downto 0);
    signal conv2_buf_ce0 : STD_LOGIC;
    signal conv2_buf_we0 : STD_LOGIC;
    signal conv2_buf_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_load_patch_tile_fu_99_ap_start : STD_LOGIC;
    signal grp_load_patch_tile_fu_99_ap_done : STD_LOGIC;
    signal grp_load_patch_tile_fu_99_ap_idle : STD_LOGIC;
    signal grp_load_patch_tile_fu_99_ap_ready : STD_LOGIC;
    signal grp_load_patch_tile_fu_99_input_ftmap_address0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_load_patch_tile_fu_99_input_ftmap_ce0 : STD_LOGIC;
    signal grp_load_patch_tile_fu_99_patch_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_load_patch_tile_fu_99_patch_ce0 : STD_LOGIC;
    signal grp_load_patch_tile_fu_99_patch_we0 : STD_LOGIC;
    signal grp_load_patch_tile_fu_99_patch_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_precompute_conv12_halo_fu_110_ap_start : STD_LOGIC;
    signal grp_precompute_conv12_halo_fu_110_ap_done : STD_LOGIC;
    signal grp_precompute_conv12_halo_fu_110_ap_idle : STD_LOGIC;
    signal grp_precompute_conv12_halo_fu_110_ap_ready : STD_LOGIC;
    signal grp_precompute_conv12_halo_fu_110_patch_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_precompute_conv12_halo_fu_110_patch_ce0 : STD_LOGIC;
    signal grp_precompute_conv12_halo_fu_110_conv1_weights_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_precompute_conv12_halo_fu_110_conv1_weights_ce0 : STD_LOGIC;
    signal grp_precompute_conv12_halo_fu_110_conv1_biases_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_precompute_conv12_halo_fu_110_conv1_biases_ce0 : STD_LOGIC;
    signal grp_precompute_conv12_halo_fu_110_conv2_weights_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_precompute_conv12_halo_fu_110_conv2_weights_ce0 : STD_LOGIC;
    signal grp_precompute_conv12_halo_fu_110_conv2_biases_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_precompute_conv12_halo_fu_110_conv2_biases_ce0 : STD_LOGIC;
    signal grp_precompute_conv12_halo_fu_110_conv2_buf_address0 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_precompute_conv12_halo_fu_110_conv2_buf_ce0 : STD_LOGIC;
    signal grp_precompute_conv12_halo_fu_110_conv2_buf_we0 : STD_LOGIC;
    signal grp_precompute_conv12_halo_fu_110_conv2_buf_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_precompute_conv12_halo_fu_110_grp_fu_293_p_din0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_precompute_conv12_halo_fu_110_grp_fu_293_p_din1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_precompute_conv12_halo_fu_110_grp_fu_293_p_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_precompute_conv12_halo_fu_110_grp_fu_293_p_ce : STD_LOGIC;
    signal grp_precompute_conv12_halo_fu_110_grp_fu_297_p_din0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_precompute_conv12_halo_fu_110_grp_fu_297_p_din1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_precompute_conv12_halo_fu_110_grp_fu_297_p_ce : STD_LOGIC;
    signal grp_conv3_from_precomputed_conv2_fu_128_ap_start : STD_LOGIC;
    signal grp_conv3_from_precomputed_conv2_fu_128_ap_done : STD_LOGIC;
    signal grp_conv3_from_precomputed_conv2_fu_128_ap_idle : STD_LOGIC;
    signal grp_conv3_from_precomputed_conv2_fu_128_ap_ready : STD_LOGIC;
    signal grp_conv3_from_precomputed_conv2_fu_128_conv3_weights_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_conv3_from_precomputed_conv2_fu_128_conv3_weights_ce0 : STD_LOGIC;
    signal grp_conv3_from_precomputed_conv2_fu_128_conv2_buf_address0 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_conv3_from_precomputed_conv2_fu_128_conv2_buf_ce0 : STD_LOGIC;
    signal grp_conv3_from_precomputed_conv2_fu_128_output_ftmap_address0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_conv3_from_precomputed_conv2_fu_128_output_ftmap_ce0 : STD_LOGIC;
    signal grp_conv3_from_precomputed_conv2_fu_128_output_ftmap_we0 : STD_LOGIC;
    signal grp_conv3_from_precomputed_conv2_fu_128_output_ftmap_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv3_from_precomputed_conv2_fu_128_grp_fu_293_p_din0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv3_from_precomputed_conv2_fu_128_grp_fu_293_p_din1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv3_from_precomputed_conv2_fu_128_grp_fu_293_p_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_conv3_from_precomputed_conv2_fu_128_grp_fu_293_p_ce : STD_LOGIC;
    signal grp_conv3_from_precomputed_conv2_fu_128_grp_fu_297_p_din0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv3_from_precomputed_conv2_fu_128_grp_fu_297_p_din1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv3_from_precomputed_conv2_fu_128_grp_fu_297_p_ce : STD_LOGIC;
    signal w0_reg_88 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal grp_load_patch_tile_fu_99_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal grp_precompute_conv12_halo_fu_110_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal grp_conv3_from_precomputed_conv2_fu_128_ap_start_reg : STD_LOGIC := '0';
    signal h0_fu_70 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln239_fu_170_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_fu_162_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln240_fu_174_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_1_fu_200_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln243_fu_213_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_293_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_293_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_293_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_293_ce : STD_LOGIC;
    signal grp_fu_297_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_297_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_297_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_297_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component srcnn_load_patch_tile IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_ftmap_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        input_ftmap_ce0 : OUT STD_LOGIC;
        input_ftmap_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        h0 : IN STD_LOGIC_VECTOR (8 downto 0);
        w0 : IN STD_LOGIC_VECTOR (7 downto 0);
        th_eff : IN STD_LOGIC_VECTOR (7 downto 0);
        tw_eff : IN STD_LOGIC_VECTOR (7 downto 0);
        patch_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        patch_ce0 : OUT STD_LOGIC;
        patch_we0 : OUT STD_LOGIC;
        patch_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component srcnn_precompute_conv12_halo IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        patch_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        patch_ce0 : OUT STD_LOGIC;
        patch_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        h0 : IN STD_LOGIC_VECTOR (8 downto 0);
        w0 : IN STD_LOGIC_VECTOR (7 downto 0);
        th_eff : IN STD_LOGIC_VECTOR (7 downto 0);
        tw_eff : IN STD_LOGIC_VECTOR (7 downto 0);
        conv1_weights_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        conv1_weights_ce0 : OUT STD_LOGIC;
        conv1_weights_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        conv1_biases_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        conv1_biases_ce0 : OUT STD_LOGIC;
        conv1_biases_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        conv2_weights_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        conv2_weights_ce0 : OUT STD_LOGIC;
        conv2_weights_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        conv2_biases_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        conv2_biases_ce0 : OUT STD_LOGIC;
        conv2_biases_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        conv2_buf_address0 : OUT STD_LOGIC_VECTOR (17 downto 0);
        conv2_buf_ce0 : OUT STD_LOGIC;
        conv2_buf_we0 : OUT STD_LOGIC;
        conv2_buf_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_293_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_293_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_293_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
        grp_fu_293_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_293_p_ce : OUT STD_LOGIC;
        grp_fu_297_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_297_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_297_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_297_p_ce : OUT STD_LOGIC );
    end component;


    component srcnn_conv3_from_precomputed_conv2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        h0 : IN STD_LOGIC_VECTOR (8 downto 0);
        w0 : IN STD_LOGIC_VECTOR (7 downto 0);
        th_eff : IN STD_LOGIC_VECTOR (7 downto 0);
        tw_eff : IN STD_LOGIC_VECTOR (7 downto 0);
        conv3_weights_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        conv3_weights_ce0 : OUT STD_LOGIC;
        conv3_weights_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        conv3_b_0_0_val : IN STD_LOGIC_VECTOR (31 downto 0);
        conv2_buf_address0 : OUT STD_LOGIC_VECTOR (17 downto 0);
        conv2_buf_ce0 : OUT STD_LOGIC;
        conv2_buf_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        output_ftmap_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        output_ftmap_ce0 : OUT STD_LOGIC;
        output_ftmap_we0 : OUT STD_LOGIC;
        output_ftmap_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_293_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_293_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_293_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
        grp_fu_293_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_293_p_ce : OUT STD_LOGIC;
        grp_fu_297_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_297_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_297_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_297_p_ce : OUT STD_LOGIC );
    end component;


    component srcnn_fadd_32ns_32ns_32_4_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component srcnn_fmul_32ns_32ns_32_3_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component srcnn_patch_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component srcnn_conv2_buf_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (17 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    patch_U : component srcnn_patch_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 5776,
        AddressWidth => 13)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => patch_address0,
        ce0 => patch_ce0,
        we0 => patch_we0,
        d0 => grp_load_patch_tile_fu_99_patch_d0,
        q0 => patch_q0);

    conv2_buf_U : component srcnn_conv2_buf_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 147968,
        AddressWidth => 18)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv2_buf_address0,
        ce0 => conv2_buf_ce0,
        we0 => conv2_buf_we0,
        d0 => grp_precompute_conv12_halo_fu_110_conv2_buf_d0,
        q0 => conv2_buf_q0);

    grp_load_patch_tile_fu_99 : component srcnn_load_patch_tile
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_load_patch_tile_fu_99_ap_start,
        ap_done => grp_load_patch_tile_fu_99_ap_done,
        ap_idle => grp_load_patch_tile_fu_99_ap_idle,
        ap_ready => grp_load_patch_tile_fu_99_ap_ready,
        input_ftmap_address0 => grp_load_patch_tile_fu_99_input_ftmap_address0,
        input_ftmap_ce0 => grp_load_patch_tile_fu_99_input_ftmap_ce0,
        input_ftmap_q0 => input_ftmap_q0,
        h0 => h0_2_reg_244,
        w0 => trunc_ln242_reg_274,
        th_eff => th_eff_reg_259,
        tw_eff => tw_eff_reg_281,
        patch_address0 => grp_load_patch_tile_fu_99_patch_address0,
        patch_ce0 => grp_load_patch_tile_fu_99_patch_ce0,
        patch_we0 => grp_load_patch_tile_fu_99_patch_we0,
        patch_d0 => grp_load_patch_tile_fu_99_patch_d0);

    grp_precompute_conv12_halo_fu_110 : component srcnn_precompute_conv12_halo
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_precompute_conv12_halo_fu_110_ap_start,
        ap_done => grp_precompute_conv12_halo_fu_110_ap_done,
        ap_idle => grp_precompute_conv12_halo_fu_110_ap_idle,
        ap_ready => grp_precompute_conv12_halo_fu_110_ap_ready,
        patch_address0 => grp_precompute_conv12_halo_fu_110_patch_address0,
        patch_ce0 => grp_precompute_conv12_halo_fu_110_patch_ce0,
        patch_q0 => patch_q0,
        h0 => h0_2_reg_244,
        w0 => trunc_ln242_reg_274,
        th_eff => th_eff_reg_259,
        tw_eff => tw_eff_reg_281,
        conv1_weights_address0 => grp_precompute_conv12_halo_fu_110_conv1_weights_address0,
        conv1_weights_ce0 => grp_precompute_conv12_halo_fu_110_conv1_weights_ce0,
        conv1_weights_q0 => conv1_weights_q0,
        conv1_biases_address0 => grp_precompute_conv12_halo_fu_110_conv1_biases_address0,
        conv1_biases_ce0 => grp_precompute_conv12_halo_fu_110_conv1_biases_ce0,
        conv1_biases_q0 => conv1_biases_q0,
        conv2_weights_address0 => grp_precompute_conv12_halo_fu_110_conv2_weights_address0,
        conv2_weights_ce0 => grp_precompute_conv12_halo_fu_110_conv2_weights_ce0,
        conv2_weights_q0 => conv2_weights_q0,
        conv2_biases_address0 => grp_precompute_conv12_halo_fu_110_conv2_biases_address0,
        conv2_biases_ce0 => grp_precompute_conv12_halo_fu_110_conv2_biases_ce0,
        conv2_biases_q0 => conv2_biases_q0,
        conv2_buf_address0 => grp_precompute_conv12_halo_fu_110_conv2_buf_address0,
        conv2_buf_ce0 => grp_precompute_conv12_halo_fu_110_conv2_buf_ce0,
        conv2_buf_we0 => grp_precompute_conv12_halo_fu_110_conv2_buf_we0,
        conv2_buf_d0 => grp_precompute_conv12_halo_fu_110_conv2_buf_d0,
        grp_fu_293_p_din0 => grp_precompute_conv12_halo_fu_110_grp_fu_293_p_din0,
        grp_fu_293_p_din1 => grp_precompute_conv12_halo_fu_110_grp_fu_293_p_din1,
        grp_fu_293_p_opcode => grp_precompute_conv12_halo_fu_110_grp_fu_293_p_opcode,
        grp_fu_293_p_dout0 => grp_fu_293_p2,
        grp_fu_293_p_ce => grp_precompute_conv12_halo_fu_110_grp_fu_293_p_ce,
        grp_fu_297_p_din0 => grp_precompute_conv12_halo_fu_110_grp_fu_297_p_din0,
        grp_fu_297_p_din1 => grp_precompute_conv12_halo_fu_110_grp_fu_297_p_din1,
        grp_fu_297_p_dout0 => grp_fu_297_p2,
        grp_fu_297_p_ce => grp_precompute_conv12_halo_fu_110_grp_fu_297_p_ce);

    grp_conv3_from_precomputed_conv2_fu_128 : component srcnn_conv3_from_precomputed_conv2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_conv3_from_precomputed_conv2_fu_128_ap_start,
        ap_done => grp_conv3_from_precomputed_conv2_fu_128_ap_done,
        ap_idle => grp_conv3_from_precomputed_conv2_fu_128_ap_idle,
        ap_ready => grp_conv3_from_precomputed_conv2_fu_128_ap_ready,
        h0 => h0_2_reg_244,
        w0 => trunc_ln242_reg_274,
        th_eff => th_eff_reg_259,
        tw_eff => tw_eff_reg_281,
        conv3_weights_address0 => grp_conv3_from_precomputed_conv2_fu_128_conv3_weights_address0,
        conv3_weights_ce0 => grp_conv3_from_precomputed_conv2_fu_128_conv3_weights_ce0,
        conv3_weights_q0 => conv3_weights_q0,
        conv3_b_0_0_val => empty_reg_288,
        conv2_buf_address0 => grp_conv3_from_precomputed_conv2_fu_128_conv2_buf_address0,
        conv2_buf_ce0 => grp_conv3_from_precomputed_conv2_fu_128_conv2_buf_ce0,
        conv2_buf_q0 => conv2_buf_q0,
        output_ftmap_address0 => grp_conv3_from_precomputed_conv2_fu_128_output_ftmap_address0,
        output_ftmap_ce0 => grp_conv3_from_precomputed_conv2_fu_128_output_ftmap_ce0,
        output_ftmap_we0 => grp_conv3_from_precomputed_conv2_fu_128_output_ftmap_we0,
        output_ftmap_d0 => grp_conv3_from_precomputed_conv2_fu_128_output_ftmap_d0,
        grp_fu_293_p_din0 => grp_conv3_from_precomputed_conv2_fu_128_grp_fu_293_p_din0,
        grp_fu_293_p_din1 => grp_conv3_from_precomputed_conv2_fu_128_grp_fu_293_p_din1,
        grp_fu_293_p_opcode => grp_conv3_from_precomputed_conv2_fu_128_grp_fu_293_p_opcode,
        grp_fu_293_p_dout0 => grp_fu_293_p2,
        grp_fu_293_p_ce => grp_conv3_from_precomputed_conv2_fu_128_grp_fu_293_p_ce,
        grp_fu_297_p_din0 => grp_conv3_from_precomputed_conv2_fu_128_grp_fu_297_p_din0,
        grp_fu_297_p_din1 => grp_conv3_from_precomputed_conv2_fu_128_grp_fu_297_p_din1,
        grp_fu_297_p_dout0 => grp_fu_297_p2,
        grp_fu_297_p_ce => grp_conv3_from_precomputed_conv2_fu_128_grp_fu_297_p_ce);

    fadd_32ns_32ns_32_4_full_dsp_1_U277 : component srcnn_fadd_32ns_32ns_32_4_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_293_p0,
        din1 => grp_fu_293_p1,
        ce => grp_fu_293_ce,
        dout => grp_fu_293_p2);

    fmul_32ns_32ns_32_3_max_dsp_1_U278 : component srcnn_fmul_32ns_32ns_32_3_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_297_p0,
        din1 => grp_fu_297_p1,
        ce => grp_fu_297_ce,
        dout => grp_fu_297_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_conv3_from_precomputed_conv2_fu_128_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_conv3_from_precomputed_conv2_fu_128_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                    grp_conv3_from_precomputed_conv2_fu_128_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_conv3_from_precomputed_conv2_fu_128_ap_ready = ap_const_logic_1)) then 
                    grp_conv3_from_precomputed_conv2_fu_128_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_load_patch_tile_fu_99_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_load_patch_tile_fu_99_ap_start_reg <= ap_const_logic_0;
            else
                if (((icmp_ln242_fu_188_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                    grp_load_patch_tile_fu_99_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_load_patch_tile_fu_99_ap_ready = ap_const_logic_1)) then 
                    grp_load_patch_tile_fu_99_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_precompute_conv12_halo_fu_110_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_precompute_conv12_halo_fu_110_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                    grp_precompute_conv12_halo_fu_110_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_precompute_conv12_halo_fu_110_ap_ready = ap_const_logic_1)) then 
                    grp_precompute_conv12_halo_fu_110_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    h0_fu_70_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                h0_fu_70 <= ap_const_lv9_0;
            elsif (((icmp_ln242_fu_188_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                h0_fu_70 <= h0_3_reg_254;
            end if; 
        end if;
    end process;

    w0_reg_88_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (grp_conv3_from_precomputed_conv2_fu_128_ap_done = ap_const_logic_1))) then 
                w0_reg_88 <= w0_1_reg_269;
            elsif (((icmp_ln239_fu_150_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                w0_reg_88 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                empty_reg_288 <= empty_fu_232_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                h0_2_reg_244 <= h0_fu_70;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln239_fu_150_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                h0_3_reg_254 <= h0_3_fu_156_p2;
                th_eff_reg_259 <= th_eff_fu_180_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln242_fu_188_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                trunc_ln242_reg_274 <= trunc_ln242_fu_208_p1;
                tw_eff_reg_281 <= tw_eff_fu_219_p3;
                w0_1_reg_269 <= w0_1_fu_194_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln239_fu_150_p2, ap_CS_fsm_state3, icmp_ln242_fu_188_p2, grp_load_patch_tile_fu_99_ap_done, grp_precompute_conv12_halo_fu_110_ap_done, grp_conv3_from_precomputed_conv2_fu_128_ap_done, ap_CS_fsm_state8, ap_CS_fsm_state4, ap_CS_fsm_state6)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln239_fu_150_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln242_fu_188_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (grp_load_patch_tile_fu_99_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (grp_precompute_conv12_halo_fu_110_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and (grp_conv3_from_precomputed_conv2_fu_128_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;

    ap_ST_fsm_state4_blk_assign_proc : process(grp_load_patch_tile_fu_99_ap_done)
    begin
        if ((grp_load_patch_tile_fu_99_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state4_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state4_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state5_blk <= ap_const_logic_0;

    ap_ST_fsm_state6_blk_assign_proc : process(grp_precompute_conv12_halo_fu_110_ap_done)
    begin
        if ((grp_precompute_conv12_halo_fu_110_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state6_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state6_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state7_blk <= ap_const_logic_0;

    ap_ST_fsm_state8_blk_assign_proc : process(grp_conv3_from_precomputed_conv2_fu_128_ap_done)
    begin
        if ((grp_conv3_from_precomputed_conv2_fu_128_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state8_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state8_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state2, icmp_ln239_fu_150_p2)
    begin
        if (((icmp_ln239_fu_150_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln239_fu_150_p2)
    begin
        if (((icmp_ln239_fu_150_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    conv1_biases_address0 <= grp_precompute_conv12_halo_fu_110_conv1_biases_address0;
    conv1_biases_ce0 <= grp_precompute_conv12_halo_fu_110_conv1_biases_ce0;
    conv1_weights_address0 <= grp_precompute_conv12_halo_fu_110_conv1_weights_address0;
    conv1_weights_ce0 <= grp_precompute_conv12_halo_fu_110_conv1_weights_ce0;
    conv2_biases_address0 <= grp_precompute_conv12_halo_fu_110_conv2_biases_address0;
    conv2_biases_ce0 <= grp_precompute_conv12_halo_fu_110_conv2_biases_ce0;

    conv2_buf_address0_assign_proc : process(grp_precompute_conv12_halo_fu_110_conv2_buf_address0, grp_conv3_from_precomputed_conv2_fu_128_conv2_buf_address0, ap_CS_fsm_state8, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            conv2_buf_address0 <= grp_conv3_from_precomputed_conv2_fu_128_conv2_buf_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            conv2_buf_address0 <= grp_precompute_conv12_halo_fu_110_conv2_buf_address0;
        else 
            conv2_buf_address0 <= "XXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    conv2_buf_ce0_assign_proc : process(grp_precompute_conv12_halo_fu_110_conv2_buf_ce0, grp_conv3_from_precomputed_conv2_fu_128_conv2_buf_ce0, ap_CS_fsm_state8, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            conv2_buf_ce0 <= grp_conv3_from_precomputed_conv2_fu_128_conv2_buf_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            conv2_buf_ce0 <= grp_precompute_conv12_halo_fu_110_conv2_buf_ce0;
        else 
            conv2_buf_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    conv2_buf_we0_assign_proc : process(grp_precompute_conv12_halo_fu_110_conv2_buf_we0, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            conv2_buf_we0 <= grp_precompute_conv12_halo_fu_110_conv2_buf_we0;
        else 
            conv2_buf_we0 <= ap_const_logic_0;
        end if; 
    end process;

    conv2_weights_address0 <= grp_precompute_conv12_halo_fu_110_conv2_weights_address0;
    conv2_weights_ce0 <= grp_precompute_conv12_halo_fu_110_conv2_weights_ce0;
    conv3_weights_address0 <= grp_conv3_from_precomputed_conv2_fu_128_conv3_weights_address0;
    conv3_weights_ce0 <= grp_conv3_from_precomputed_conv2_fu_128_conv3_weights_ce0;
    empty_fu_232_p1 <= conv3_biases;
    grp_conv3_from_precomputed_conv2_fu_128_ap_start <= grp_conv3_from_precomputed_conv2_fu_128_ap_start_reg;

    grp_fu_293_ce_assign_proc : process(grp_precompute_conv12_halo_fu_110_grp_fu_293_p_ce, grp_conv3_from_precomputed_conv2_fu_128_grp_fu_293_p_ce, ap_CS_fsm_state8, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_fu_293_ce <= grp_conv3_from_precomputed_conv2_fu_128_grp_fu_293_p_ce;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_293_ce <= grp_precompute_conv12_halo_fu_110_grp_fu_293_p_ce;
        else 
            grp_fu_293_ce <= ap_const_logic_1;
        end if; 
    end process;


    grp_fu_293_p0_assign_proc : process(grp_precompute_conv12_halo_fu_110_grp_fu_293_p_din0, grp_conv3_from_precomputed_conv2_fu_128_grp_fu_293_p_din0, ap_CS_fsm_state8, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_fu_293_p0 <= grp_conv3_from_precomputed_conv2_fu_128_grp_fu_293_p_din0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_293_p0 <= grp_precompute_conv12_halo_fu_110_grp_fu_293_p_din0;
        else 
            grp_fu_293_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_293_p1_assign_proc : process(grp_precompute_conv12_halo_fu_110_grp_fu_293_p_din1, grp_conv3_from_precomputed_conv2_fu_128_grp_fu_293_p_din1, ap_CS_fsm_state8, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_fu_293_p1 <= grp_conv3_from_precomputed_conv2_fu_128_grp_fu_293_p_din1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_293_p1 <= grp_precompute_conv12_halo_fu_110_grp_fu_293_p_din1;
        else 
            grp_fu_293_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_297_ce_assign_proc : process(grp_precompute_conv12_halo_fu_110_grp_fu_297_p_ce, grp_conv3_from_precomputed_conv2_fu_128_grp_fu_297_p_ce, ap_CS_fsm_state8, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_fu_297_ce <= grp_conv3_from_precomputed_conv2_fu_128_grp_fu_297_p_ce;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_297_ce <= grp_precompute_conv12_halo_fu_110_grp_fu_297_p_ce;
        else 
            grp_fu_297_ce <= ap_const_logic_1;
        end if; 
    end process;


    grp_fu_297_p0_assign_proc : process(grp_precompute_conv12_halo_fu_110_grp_fu_297_p_din0, grp_conv3_from_precomputed_conv2_fu_128_grp_fu_297_p_din0, ap_CS_fsm_state8, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_fu_297_p0 <= grp_conv3_from_precomputed_conv2_fu_128_grp_fu_297_p_din0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_297_p0 <= grp_precompute_conv12_halo_fu_110_grp_fu_297_p_din0;
        else 
            grp_fu_297_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_297_p1_assign_proc : process(grp_precompute_conv12_halo_fu_110_grp_fu_297_p_din1, grp_conv3_from_precomputed_conv2_fu_128_grp_fu_297_p_din1, ap_CS_fsm_state8, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_fu_297_p1 <= grp_conv3_from_precomputed_conv2_fu_128_grp_fu_297_p_din1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_297_p1 <= grp_precompute_conv12_halo_fu_110_grp_fu_297_p_din1;
        else 
            grp_fu_297_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_load_patch_tile_fu_99_ap_start <= grp_load_patch_tile_fu_99_ap_start_reg;
    grp_precompute_conv12_halo_fu_110_ap_start <= grp_precompute_conv12_halo_fu_110_ap_start_reg;
    h0_3_fu_156_p2 <= std_logic_vector(unsigned(h0_fu_70) + unsigned(ap_const_lv9_40));
    icmp_ln239_fu_150_p2 <= "1" when (unsigned(h0_fu_70) < unsigned(ap_const_lv9_FF)) else "0";
    icmp_ln242_fu_188_p2 <= "1" when (unsigned(w0_reg_88) < unsigned(ap_const_lv9_FF)) else "0";
    input_ftmap_address0 <= grp_load_patch_tile_fu_99_input_ftmap_address0;
    input_ftmap_ce0 <= grp_load_patch_tile_fu_99_input_ftmap_ce0;
    output_ftmap_address0 <= grp_conv3_from_precomputed_conv2_fu_128_output_ftmap_address0;
    output_ftmap_ce0 <= grp_conv3_from_precomputed_conv2_fu_128_output_ftmap_ce0;
    output_ftmap_d0 <= grp_conv3_from_precomputed_conv2_fu_128_output_ftmap_d0;
    output_ftmap_we0 <= grp_conv3_from_precomputed_conv2_fu_128_output_ftmap_we0;

    patch_address0_assign_proc : process(grp_load_patch_tile_fu_99_patch_address0, grp_precompute_conv12_halo_fu_110_patch_address0, ap_CS_fsm_state4, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            patch_address0 <= grp_precompute_conv12_halo_fu_110_patch_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            patch_address0 <= grp_load_patch_tile_fu_99_patch_address0;
        else 
            patch_address0 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    patch_ce0_assign_proc : process(grp_load_patch_tile_fu_99_patch_ce0, grp_precompute_conv12_halo_fu_110_patch_ce0, ap_CS_fsm_state4, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            patch_ce0 <= grp_precompute_conv12_halo_fu_110_patch_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            patch_ce0 <= grp_load_patch_tile_fu_99_patch_ce0;
        else 
            patch_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    patch_we0_assign_proc : process(grp_load_patch_tile_fu_99_patch_we0, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            patch_we0 <= grp_load_patch_tile_fu_99_patch_we0;
        else 
            patch_we0 <= ap_const_logic_0;
        end if; 
    end process;

    th_eff_fu_180_p3 <= 
        xor_ln240_fu_174_p2 when (tmp_fu_162_p3(0) = '1') else 
        ap_const_lv8_40;
    tmp_1_fu_200_p3 <= w0_1_fu_194_p2(8 downto 8);
    tmp_fu_162_p3 <= h0_3_fu_156_p2(8 downto 8);
    trunc_ln239_fu_170_p1 <= h0_fu_70(8 - 1 downto 0);
    trunc_ln242_fu_208_p1 <= w0_reg_88(8 - 1 downto 0);
    tw_eff_fu_219_p3 <= 
        xor_ln243_fu_213_p2 when (tmp_1_fu_200_p3(0) = '1') else 
        ap_const_lv8_40;
    w0_1_fu_194_p2 <= std_logic_vector(unsigned(w0_reg_88) + unsigned(ap_const_lv9_40));
    xor_ln240_fu_174_p2 <= (trunc_ln239_fu_170_p1 xor ap_const_lv8_FF);
    xor_ln243_fu_213_p2 <= (trunc_ln242_fu_208_p1 xor ap_const_lv8_FF);
end behav;
