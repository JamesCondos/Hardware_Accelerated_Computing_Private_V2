-- ==============================================================
-- Generated by Vitis HLS v2023.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity srcnn_conv3_from_precomputed_conv2_Pipeline_VITIS_LOOP_186_5_VITIS_LOOP_187_6 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    add_ln189 : IN STD_LOGIC_VECTOR (8 downto 0);
    conv3_weights_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    conv3_weights_ce0 : OUT STD_LOGIC;
    conv3_weights_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    mux_case_487236_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    mux_case_487236_out_ap_vld : OUT STD_LOGIC;
    mux_case_385230_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    mux_case_385230_out_ap_vld : OUT STD_LOGIC;
    mux_case_283224_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    mux_case_283224_out_ap_vld : OUT STD_LOGIC;
    mux_case_181218_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    mux_case_181218_out_ap_vld : OUT STD_LOGIC;
    mux_case_079212_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    mux_case_079212_out_ap_vld : OUT STD_LOGIC;
    mux_case_476206_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    mux_case_476206_out_ap_vld : OUT STD_LOGIC;
    mux_case_374200_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    mux_case_374200_out_ap_vld : OUT STD_LOGIC;
    mux_case_272194_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    mux_case_272194_out_ap_vld : OUT STD_LOGIC;
    mux_case_170188_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    mux_case_170188_out_ap_vld : OUT STD_LOGIC;
    mux_case_068182_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    mux_case_068182_out_ap_vld : OUT STD_LOGIC;
    mux_case_465176_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    mux_case_465176_out_ap_vld : OUT STD_LOGIC;
    mux_case_363170_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    mux_case_363170_out_ap_vld : OUT STD_LOGIC;
    mux_case_261164_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    mux_case_261164_out_ap_vld : OUT STD_LOGIC;
    mux_case_159158_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    mux_case_159158_out_ap_vld : OUT STD_LOGIC;
    mux_case_057152_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    mux_case_057152_out_ap_vld : OUT STD_LOGIC;
    mux_case_454146_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    mux_case_454146_out_ap_vld : OUT STD_LOGIC;
    mux_case_352140_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    mux_case_352140_out_ap_vld : OUT STD_LOGIC;
    mux_case_250134_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    mux_case_250134_out_ap_vld : OUT STD_LOGIC;
    mux_case_148128_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    mux_case_148128_out_ap_vld : OUT STD_LOGIC;
    mux_case_046122_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    mux_case_046122_out_ap_vld : OUT STD_LOGIC;
    mux_case_4115_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    mux_case_4115_out_ap_vld : OUT STD_LOGIC;
    mux_case_3109_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    mux_case_3109_out_ap_vld : OUT STD_LOGIC;
    mux_case_2103_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    mux_case_2103_out_ap_vld : OUT STD_LOGIC;
    mux_case_197_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    mux_case_197_out_ap_vld : OUT STD_LOGIC;
    mux_case_091_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    mux_case_091_out_ap_vld : OUT STD_LOGIC );
end;


architecture behav of srcnn_conv3_from_precomputed_conv2_Pipeline_VITIS_LOOP_186_5_VITIS_LOOP_187_6 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv5_19 : STD_LOGIC_VECTOR (4 downto 0) := "11001";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal icmp_ln186_fu_430_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal add_ln186_1_fu_436_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln186_1_reg_944 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln186_fu_460_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln186_reg_949 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln186_1_fu_468_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln186_1_reg_954 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln189_3_fu_518_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal kx_fu_106 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln187_fu_652_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_kx_load : STD_LOGIC_VECTOR (2 downto 0);
    signal ky_fu_110 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_sig_allocacmp_ky_load : STD_LOGIC_VECTOR (2 downto 0);
    signal indvar_flatten_fu_114 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_sig_allocacmp_indvar_flatten_load : STD_LOGIC_VECTOR (4 downto 0);
    signal mux_case_091_fu_118 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln189_fu_523_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mux_case_197_fu_122 : STD_LOGIC_VECTOR (31 downto 0);
    signal mux_case_2103_fu_126 : STD_LOGIC_VECTOR (31 downto 0);
    signal mux_case_3109_fu_130 : STD_LOGIC_VECTOR (31 downto 0);
    signal mux_case_4115_fu_134 : STD_LOGIC_VECTOR (31 downto 0);
    signal mux_case_046122_fu_138 : STD_LOGIC_VECTOR (31 downto 0);
    signal mux_case_148128_fu_142 : STD_LOGIC_VECTOR (31 downto 0);
    signal mux_case_250134_fu_146 : STD_LOGIC_VECTOR (31 downto 0);
    signal mux_case_352140_fu_150 : STD_LOGIC_VECTOR (31 downto 0);
    signal mux_case_454146_fu_154 : STD_LOGIC_VECTOR (31 downto 0);
    signal mux_case_057152_fu_158 : STD_LOGIC_VECTOR (31 downto 0);
    signal mux_case_159158_fu_162 : STD_LOGIC_VECTOR (31 downto 0);
    signal mux_case_261164_fu_166 : STD_LOGIC_VECTOR (31 downto 0);
    signal mux_case_363170_fu_170 : STD_LOGIC_VECTOR (31 downto 0);
    signal mux_case_465176_fu_174 : STD_LOGIC_VECTOR (31 downto 0);
    signal mux_case_068182_fu_178 : STD_LOGIC_VECTOR (31 downto 0);
    signal mux_case_170188_fu_182 : STD_LOGIC_VECTOR (31 downto 0);
    signal mux_case_272194_fu_186 : STD_LOGIC_VECTOR (31 downto 0);
    signal mux_case_374200_fu_190 : STD_LOGIC_VECTOR (31 downto 0);
    signal mux_case_476206_fu_194 : STD_LOGIC_VECTOR (31 downto 0);
    signal mux_case_079212_fu_198 : STD_LOGIC_VECTOR (31 downto 0);
    signal mux_case_181218_fu_202 : STD_LOGIC_VECTOR (31 downto 0);
    signal mux_case_283224_fu_206 : STD_LOGIC_VECTOR (31 downto 0);
    signal mux_case_385230_fu_210 : STD_LOGIC_VECTOR (31 downto 0);
    signal mux_case_487236_fu_214 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln187_fu_454_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln186_fu_448_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln189_fu_476_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln189_1_fu_480_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln189_fu_490_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl4_fu_494_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln189_1_fu_486_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln189_2_fu_502_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln189_2_fu_508_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln189_3_fu_512_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component srcnn_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component srcnn_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_start_int = ap_const_logic_1) and (ap_loop_exit_ready = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    indvar_flatten_fu_114_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_loop_init = ap_const_logic_1))) then 
                indvar_flatten_fu_114 <= ap_const_lv5_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                indvar_flatten_fu_114 <= add_ln186_1_reg_944;
            end if; 
        end if;
    end process;

    kx_fu_106_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_loop_init = ap_const_logic_1))) then 
                kx_fu_106 <= ap_const_lv3_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                kx_fu_106 <= add_ln187_fu_652_p2;
            end if; 
        end if;
    end process;

    ky_fu_110_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_loop_init = ap_const_logic_1))) then 
                ky_fu_110 <= ap_const_lv3_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                ky_fu_110 <= select_ln186_1_reg_954;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                add_ln186_1_reg_944 <= add_ln186_1_fu_436_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((select_ln186_reg_949 = ap_const_lv3_0) and (ap_const_logic_1 = ap_CS_fsm_state2) and (select_ln186_1_reg_954 = ap_const_lv3_1))) then
                mux_case_046122_fu_138 <= bitcast_ln189_fu_523_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((select_ln186_reg_949 = ap_const_lv3_0) and (ap_const_logic_1 = ap_CS_fsm_state2) and (select_ln186_1_reg_954 = ap_const_lv3_2))) then
                mux_case_057152_fu_158 <= bitcast_ln189_fu_523_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((select_ln186_reg_949 = ap_const_lv3_0) and (ap_const_logic_1 = ap_CS_fsm_state2) and (select_ln186_1_reg_954 = ap_const_lv3_3))) then
                mux_case_068182_fu_178 <= bitcast_ln189_fu_523_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((select_ln186_1_reg_954 = ap_const_lv3_3)) and not((select_ln186_1_reg_954 = ap_const_lv3_2)) and not((select_ln186_1_reg_954 = ap_const_lv3_1)) and not((select_ln186_1_reg_954 = ap_const_lv3_0)) and (select_ln186_reg_949 = ap_const_lv3_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                mux_case_079212_fu_198 <= bitcast_ln189_fu_523_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((select_ln186_reg_949 = ap_const_lv3_0) and (ap_const_logic_1 = ap_CS_fsm_state2) and (select_ln186_1_reg_954 = ap_const_lv3_0))) then
                mux_case_091_fu_118 <= bitcast_ln189_fu_523_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((select_ln186_reg_949 = ap_const_lv3_1) and (ap_const_logic_1 = ap_CS_fsm_state2) and (select_ln186_1_reg_954 = ap_const_lv3_1))) then
                mux_case_148128_fu_142 <= bitcast_ln189_fu_523_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((select_ln186_reg_949 = ap_const_lv3_1) and (ap_const_logic_1 = ap_CS_fsm_state2) and (select_ln186_1_reg_954 = ap_const_lv3_2))) then
                mux_case_159158_fu_162 <= bitcast_ln189_fu_523_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((select_ln186_reg_949 = ap_const_lv3_1) and (ap_const_logic_1 = ap_CS_fsm_state2) and (select_ln186_1_reg_954 = ap_const_lv3_3))) then
                mux_case_170188_fu_182 <= bitcast_ln189_fu_523_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((select_ln186_1_reg_954 = ap_const_lv3_3)) and not((select_ln186_1_reg_954 = ap_const_lv3_2)) and not((select_ln186_1_reg_954 = ap_const_lv3_1)) and not((select_ln186_1_reg_954 = ap_const_lv3_0)) and (select_ln186_reg_949 = ap_const_lv3_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                mux_case_181218_fu_202 <= bitcast_ln189_fu_523_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((select_ln186_reg_949 = ap_const_lv3_1) and (ap_const_logic_1 = ap_CS_fsm_state2) and (select_ln186_1_reg_954 = ap_const_lv3_0))) then
                mux_case_197_fu_122 <= bitcast_ln189_fu_523_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((select_ln186_reg_949 = ap_const_lv3_2) and (ap_const_logic_1 = ap_CS_fsm_state2) and (select_ln186_1_reg_954 = ap_const_lv3_0))) then
                mux_case_2103_fu_126 <= bitcast_ln189_fu_523_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((select_ln186_reg_949 = ap_const_lv3_2) and (ap_const_logic_1 = ap_CS_fsm_state2) and (select_ln186_1_reg_954 = ap_const_lv3_1))) then
                mux_case_250134_fu_146 <= bitcast_ln189_fu_523_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((select_ln186_reg_949 = ap_const_lv3_2) and (ap_const_logic_1 = ap_CS_fsm_state2) and (select_ln186_1_reg_954 = ap_const_lv3_2))) then
                mux_case_261164_fu_166 <= bitcast_ln189_fu_523_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((select_ln186_reg_949 = ap_const_lv3_2) and (ap_const_logic_1 = ap_CS_fsm_state2) and (select_ln186_1_reg_954 = ap_const_lv3_3))) then
                mux_case_272194_fu_186 <= bitcast_ln189_fu_523_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((select_ln186_1_reg_954 = ap_const_lv3_3)) and not((select_ln186_1_reg_954 = ap_const_lv3_2)) and not((select_ln186_1_reg_954 = ap_const_lv3_1)) and not((select_ln186_1_reg_954 = ap_const_lv3_0)) and (select_ln186_reg_949 = ap_const_lv3_2) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                mux_case_283224_fu_206 <= bitcast_ln189_fu_523_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((select_ln186_reg_949 = ap_const_lv3_3) and (ap_const_logic_1 = ap_CS_fsm_state2) and (select_ln186_1_reg_954 = ap_const_lv3_0))) then
                mux_case_3109_fu_130 <= bitcast_ln189_fu_523_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((select_ln186_reg_949 = ap_const_lv3_3) and (ap_const_logic_1 = ap_CS_fsm_state2) and (select_ln186_1_reg_954 = ap_const_lv3_1))) then
                mux_case_352140_fu_150 <= bitcast_ln189_fu_523_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((select_ln186_reg_949 = ap_const_lv3_3) and (ap_const_logic_1 = ap_CS_fsm_state2) and (select_ln186_1_reg_954 = ap_const_lv3_2))) then
                mux_case_363170_fu_170 <= bitcast_ln189_fu_523_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((select_ln186_reg_949 = ap_const_lv3_3) and (ap_const_logic_1 = ap_CS_fsm_state2) and (select_ln186_1_reg_954 = ap_const_lv3_3))) then
                mux_case_374200_fu_190 <= bitcast_ln189_fu_523_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((select_ln186_1_reg_954 = ap_const_lv3_3)) and not((select_ln186_1_reg_954 = ap_const_lv3_2)) and not((select_ln186_1_reg_954 = ap_const_lv3_1)) and not((select_ln186_1_reg_954 = ap_const_lv3_0)) and (select_ln186_reg_949 = ap_const_lv3_3) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                mux_case_385230_fu_210 <= bitcast_ln189_fu_523_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((select_ln186_reg_949 = ap_const_lv3_3)) and not((select_ln186_reg_949 = ap_const_lv3_2)) and not((select_ln186_reg_949 = ap_const_lv3_1)) and not((select_ln186_reg_949 = ap_const_lv3_0)) and (ap_const_logic_1 = ap_CS_fsm_state2) and (select_ln186_1_reg_954 = ap_const_lv3_0))) then
                mux_case_4115_fu_134 <= bitcast_ln189_fu_523_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((select_ln186_reg_949 = ap_const_lv3_3)) and not((select_ln186_reg_949 = ap_const_lv3_2)) and not((select_ln186_reg_949 = ap_const_lv3_1)) and not((select_ln186_reg_949 = ap_const_lv3_0)) and (ap_const_logic_1 = ap_CS_fsm_state2) and (select_ln186_1_reg_954 = ap_const_lv3_1))) then
                mux_case_454146_fu_154 <= bitcast_ln189_fu_523_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((select_ln186_reg_949 = ap_const_lv3_3)) and not((select_ln186_reg_949 = ap_const_lv3_2)) and not((select_ln186_reg_949 = ap_const_lv3_1)) and not((select_ln186_reg_949 = ap_const_lv3_0)) and (ap_const_logic_1 = ap_CS_fsm_state2) and (select_ln186_1_reg_954 = ap_const_lv3_2))) then
                mux_case_465176_fu_174 <= bitcast_ln189_fu_523_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((select_ln186_reg_949 = ap_const_lv3_3)) and not((select_ln186_reg_949 = ap_const_lv3_2)) and not((select_ln186_reg_949 = ap_const_lv3_1)) and not((select_ln186_reg_949 = ap_const_lv3_0)) and (ap_const_logic_1 = ap_CS_fsm_state2) and (select_ln186_1_reg_954 = ap_const_lv3_3))) then
                mux_case_476206_fu_194 <= bitcast_ln189_fu_523_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((select_ln186_1_reg_954 = ap_const_lv3_3)) and not((select_ln186_1_reg_954 = ap_const_lv3_2)) and not((select_ln186_1_reg_954 = ap_const_lv3_1)) and not((select_ln186_reg_949 = ap_const_lv3_3)) and not((select_ln186_reg_949 = ap_const_lv3_2)) and not((select_ln186_reg_949 = ap_const_lv3_1)) and not((select_ln186_reg_949 = ap_const_lv3_0)) and not((select_ln186_1_reg_954 = ap_const_lv3_0)) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                mux_case_487236_fu_214 <= bitcast_ln189_fu_523_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start_int = ap_const_logic_1) and (icmp_ln186_fu_430_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                select_ln186_1_reg_954 <= select_ln186_1_fu_468_p3;
                select_ln186_reg_949 <= select_ln186_fu_460_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state1, icmp_ln186_fu_430_p2, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start_int = ap_const_logic_1) and (icmp_ln186_fu_430_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    add_ln186_1_fu_436_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten_load) + unsigned(ap_const_lv5_1));
    add_ln186_fu_448_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_ky_load) + unsigned(ap_const_lv3_1));
    add_ln187_fu_652_p2 <= std_logic_vector(unsigned(select_ln186_reg_949) + unsigned(ap_const_lv3_1));
    add_ln189_1_fu_480_p2 <= std_logic_vector(unsigned(add_ln189) + unsigned(zext_ln189_fu_476_p1));
    add_ln189_2_fu_502_p2 <= std_logic_vector(unsigned(p_shl4_fu_494_p3) + unsigned(zext_ln189_1_fu_486_p1));
    add_ln189_3_fu_512_p2 <= std_logic_vector(unsigned(add_ln189_2_fu_502_p2) + unsigned(zext_ln189_2_fu_508_p1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start_int)
    begin
        if ((ap_start_int = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;

    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start_int)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_start_int = ap_const_logic_0);
    end process;

        ap_block_state2_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_state1, icmp_ln186_fu_430_p2, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (icmp_ln186_fu_430_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_state1, ap_loop_exit_ready, ap_done_reg, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (ap_loop_exit_ready = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten_load_assign_proc : process(ap_CS_fsm_state1, ap_loop_init, indvar_flatten_fu_114)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_indvar_flatten_load <= ap_const_lv5_0;
        else 
            ap_sig_allocacmp_indvar_flatten_load <= indvar_flatten_fu_114;
        end if; 
    end process;


    ap_sig_allocacmp_kx_load_assign_proc : process(ap_CS_fsm_state1, kx_fu_106, ap_loop_init)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_kx_load <= ap_const_lv3_0;
        else 
            ap_sig_allocacmp_kx_load <= kx_fu_106;
        end if; 
    end process;


    ap_sig_allocacmp_ky_load_assign_proc : process(ap_CS_fsm_state1, ap_loop_init, ky_fu_110)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_ky_load <= ap_const_lv3_0;
        else 
            ap_sig_allocacmp_ky_load <= ky_fu_110;
        end if; 
    end process;

    bitcast_ln189_fu_523_p1 <= conv3_weights_q0;
    conv3_weights_address0 <= zext_ln189_3_fu_518_p1(10 - 1 downto 0);

    conv3_weights_ce0_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            conv3_weights_ce0 <= ap_const_logic_1;
        else 
            conv3_weights_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln186_fu_430_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten_load = ap_const_lv5_19) else "0";
    icmp_ln187_fu_454_p2 <= "1" when (ap_sig_allocacmp_kx_load = ap_const_lv3_5) else "0";
    mux_case_046122_out <= mux_case_046122_fu_138;

    mux_case_046122_out_ap_vld_assign_proc : process(ap_CS_fsm_state1, icmp_ln186_fu_430_p2, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (icmp_ln186_fu_430_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            mux_case_046122_out_ap_vld <= ap_const_logic_1;
        else 
            mux_case_046122_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    mux_case_057152_out <= mux_case_057152_fu_158;

    mux_case_057152_out_ap_vld_assign_proc : process(ap_CS_fsm_state1, icmp_ln186_fu_430_p2, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (icmp_ln186_fu_430_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            mux_case_057152_out_ap_vld <= ap_const_logic_1;
        else 
            mux_case_057152_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    mux_case_068182_out <= mux_case_068182_fu_178;

    mux_case_068182_out_ap_vld_assign_proc : process(ap_CS_fsm_state1, icmp_ln186_fu_430_p2, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (icmp_ln186_fu_430_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            mux_case_068182_out_ap_vld <= ap_const_logic_1;
        else 
            mux_case_068182_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    mux_case_079212_out <= mux_case_079212_fu_198;

    mux_case_079212_out_ap_vld_assign_proc : process(ap_CS_fsm_state1, icmp_ln186_fu_430_p2, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (icmp_ln186_fu_430_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            mux_case_079212_out_ap_vld <= ap_const_logic_1;
        else 
            mux_case_079212_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    mux_case_091_out <= mux_case_091_fu_118;

    mux_case_091_out_ap_vld_assign_proc : process(ap_CS_fsm_state1, icmp_ln186_fu_430_p2, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (icmp_ln186_fu_430_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            mux_case_091_out_ap_vld <= ap_const_logic_1;
        else 
            mux_case_091_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    mux_case_148128_out <= mux_case_148128_fu_142;

    mux_case_148128_out_ap_vld_assign_proc : process(ap_CS_fsm_state1, icmp_ln186_fu_430_p2, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (icmp_ln186_fu_430_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            mux_case_148128_out_ap_vld <= ap_const_logic_1;
        else 
            mux_case_148128_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    mux_case_159158_out <= mux_case_159158_fu_162;

    mux_case_159158_out_ap_vld_assign_proc : process(ap_CS_fsm_state1, icmp_ln186_fu_430_p2, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (icmp_ln186_fu_430_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            mux_case_159158_out_ap_vld <= ap_const_logic_1;
        else 
            mux_case_159158_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    mux_case_170188_out <= mux_case_170188_fu_182;

    mux_case_170188_out_ap_vld_assign_proc : process(ap_CS_fsm_state1, icmp_ln186_fu_430_p2, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (icmp_ln186_fu_430_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            mux_case_170188_out_ap_vld <= ap_const_logic_1;
        else 
            mux_case_170188_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    mux_case_181218_out <= mux_case_181218_fu_202;

    mux_case_181218_out_ap_vld_assign_proc : process(ap_CS_fsm_state1, icmp_ln186_fu_430_p2, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (icmp_ln186_fu_430_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            mux_case_181218_out_ap_vld <= ap_const_logic_1;
        else 
            mux_case_181218_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    mux_case_197_out <= mux_case_197_fu_122;

    mux_case_197_out_ap_vld_assign_proc : process(ap_CS_fsm_state1, icmp_ln186_fu_430_p2, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (icmp_ln186_fu_430_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            mux_case_197_out_ap_vld <= ap_const_logic_1;
        else 
            mux_case_197_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    mux_case_2103_out <= mux_case_2103_fu_126;

    mux_case_2103_out_ap_vld_assign_proc : process(ap_CS_fsm_state1, icmp_ln186_fu_430_p2, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (icmp_ln186_fu_430_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            mux_case_2103_out_ap_vld <= ap_const_logic_1;
        else 
            mux_case_2103_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    mux_case_250134_out <= mux_case_250134_fu_146;

    mux_case_250134_out_ap_vld_assign_proc : process(ap_CS_fsm_state1, icmp_ln186_fu_430_p2, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (icmp_ln186_fu_430_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            mux_case_250134_out_ap_vld <= ap_const_logic_1;
        else 
            mux_case_250134_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    mux_case_261164_out <= mux_case_261164_fu_166;

    mux_case_261164_out_ap_vld_assign_proc : process(ap_CS_fsm_state1, icmp_ln186_fu_430_p2, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (icmp_ln186_fu_430_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            mux_case_261164_out_ap_vld <= ap_const_logic_1;
        else 
            mux_case_261164_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    mux_case_272194_out <= mux_case_272194_fu_186;

    mux_case_272194_out_ap_vld_assign_proc : process(ap_CS_fsm_state1, icmp_ln186_fu_430_p2, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (icmp_ln186_fu_430_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            mux_case_272194_out_ap_vld <= ap_const_logic_1;
        else 
            mux_case_272194_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    mux_case_283224_out <= mux_case_283224_fu_206;

    mux_case_283224_out_ap_vld_assign_proc : process(ap_CS_fsm_state1, icmp_ln186_fu_430_p2, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (icmp_ln186_fu_430_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            mux_case_283224_out_ap_vld <= ap_const_logic_1;
        else 
            mux_case_283224_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    mux_case_3109_out <= mux_case_3109_fu_130;

    mux_case_3109_out_ap_vld_assign_proc : process(ap_CS_fsm_state1, icmp_ln186_fu_430_p2, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (icmp_ln186_fu_430_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            mux_case_3109_out_ap_vld <= ap_const_logic_1;
        else 
            mux_case_3109_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    mux_case_352140_out <= mux_case_352140_fu_150;

    mux_case_352140_out_ap_vld_assign_proc : process(ap_CS_fsm_state1, icmp_ln186_fu_430_p2, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (icmp_ln186_fu_430_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            mux_case_352140_out_ap_vld <= ap_const_logic_1;
        else 
            mux_case_352140_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    mux_case_363170_out <= mux_case_363170_fu_170;

    mux_case_363170_out_ap_vld_assign_proc : process(ap_CS_fsm_state1, icmp_ln186_fu_430_p2, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (icmp_ln186_fu_430_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            mux_case_363170_out_ap_vld <= ap_const_logic_1;
        else 
            mux_case_363170_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    mux_case_374200_out <= mux_case_374200_fu_190;

    mux_case_374200_out_ap_vld_assign_proc : process(ap_CS_fsm_state1, icmp_ln186_fu_430_p2, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (icmp_ln186_fu_430_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            mux_case_374200_out_ap_vld <= ap_const_logic_1;
        else 
            mux_case_374200_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    mux_case_385230_out <= mux_case_385230_fu_210;

    mux_case_385230_out_ap_vld_assign_proc : process(ap_CS_fsm_state1, icmp_ln186_fu_430_p2, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (icmp_ln186_fu_430_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            mux_case_385230_out_ap_vld <= ap_const_logic_1;
        else 
            mux_case_385230_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    mux_case_4115_out <= mux_case_4115_fu_134;

    mux_case_4115_out_ap_vld_assign_proc : process(ap_CS_fsm_state1, icmp_ln186_fu_430_p2, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (icmp_ln186_fu_430_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            mux_case_4115_out_ap_vld <= ap_const_logic_1;
        else 
            mux_case_4115_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    mux_case_454146_out <= mux_case_454146_fu_154;

    mux_case_454146_out_ap_vld_assign_proc : process(ap_CS_fsm_state1, icmp_ln186_fu_430_p2, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (icmp_ln186_fu_430_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            mux_case_454146_out_ap_vld <= ap_const_logic_1;
        else 
            mux_case_454146_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    mux_case_465176_out <= mux_case_465176_fu_174;

    mux_case_465176_out_ap_vld_assign_proc : process(ap_CS_fsm_state1, icmp_ln186_fu_430_p2, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (icmp_ln186_fu_430_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            mux_case_465176_out_ap_vld <= ap_const_logic_1;
        else 
            mux_case_465176_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    mux_case_476206_out <= mux_case_476206_fu_194;

    mux_case_476206_out_ap_vld_assign_proc : process(ap_CS_fsm_state1, icmp_ln186_fu_430_p2, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (icmp_ln186_fu_430_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            mux_case_476206_out_ap_vld <= ap_const_logic_1;
        else 
            mux_case_476206_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    mux_case_487236_out <= mux_case_487236_fu_214;

    mux_case_487236_out_ap_vld_assign_proc : process(ap_CS_fsm_state1, icmp_ln186_fu_430_p2, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (icmp_ln186_fu_430_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            mux_case_487236_out_ap_vld <= ap_const_logic_1;
        else 
            mux_case_487236_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    p_shl4_fu_494_p3 <= (trunc_ln189_fu_490_p1 & ap_const_lv2_0);
    select_ln186_1_fu_468_p3 <= 
        add_ln186_fu_448_p2 when (icmp_ln187_fu_454_p2(0) = '1') else 
        ap_sig_allocacmp_ky_load;
    select_ln186_fu_460_p3 <= 
        ap_const_lv3_0 when (icmp_ln187_fu_454_p2(0) = '1') else 
        ap_sig_allocacmp_kx_load;
    trunc_ln189_fu_490_p1 <= add_ln189_1_fu_480_p2(8 - 1 downto 0);
    zext_ln189_1_fu_486_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln189_1_fu_480_p2),10));
    zext_ln189_2_fu_508_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln186_fu_460_p3),10));
    zext_ln189_3_fu_518_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln189_3_fu_512_p2),64));
    zext_ln189_fu_476_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln186_1_fu_468_p3),9));
end behav;
