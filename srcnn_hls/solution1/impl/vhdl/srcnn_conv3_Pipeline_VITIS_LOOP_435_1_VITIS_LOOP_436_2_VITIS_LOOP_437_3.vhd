-- ==============================================================
-- Generated by Vitis HLS v2023.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity srcnn_conv3_Pipeline_VITIS_LOOP_435_1_VITIS_LOOP_436_2_VITIS_LOOP_437_3 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    conv2_to_conv3_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    conv2_to_conv3_num_data_valid : IN STD_LOGIC_VECTOR (9 downto 0);
    conv2_to_conv3_fifo_cap : IN STD_LOGIC_VECTOR (9 downto 0);
    conv2_to_conv3_empty_n : IN STD_LOGIC;
    conv2_to_conv3_read : OUT STD_LOGIC;
    input_tile_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    input_tile_ce0 : OUT STD_LOGIC;
    input_tile_we0 : OUT STD_LOGIC;
    input_tile_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of srcnn_conv3_Pipeline_VITIS_LOOP_435_1_VITIS_LOOP_436_2_VITIS_LOOP_437_3 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv14_2420 : STD_LOGIC_VECTOR (13 downto 0) := "10010000100000";
    constant ap_const_lv14_1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv10_121 : STD_LOGIC_VECTOR (9 downto 0) := "0100100001";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv5_11 : STD_LOGIC_VECTOR (4 downto 0) := "10001";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln435_fu_141_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal conv2_to_conv3_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln438_5_fu_308_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_1_fu_74 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln437_fu_318_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal ap_loop_init : STD_LOGIC;
    signal i_1_fu_78 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln436_1_fu_258_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvar_flatten_fu_82 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln436_2_fu_330_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal feat_fu_86 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln435_1_fu_190_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal indvar_flatten12_fu_90 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln435_1_fu_147_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_sig_allocacmp_indvar_flatten12_load : STD_LOGIC_VECTOR (13 downto 0);
    signal icmp_ln436_fu_176_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln435_fu_170_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_24_fu_202_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln438_1_fu_210_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln438_fu_198_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln437_fu_226_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln435_fu_220_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln435_fu_182_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal and_ln435_fu_232_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln436_fu_244_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln436_fu_238_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln438_fu_214_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln438_2_fu_266_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln438_1_fu_270_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln438_fu_280_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl_fu_284_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln438_3_fu_276_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal select_ln436_fu_250_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln438_2_fu_292_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln438_4_fu_298_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln438_3_fu_302_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln436_1_fu_324_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component srcnn_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component srcnn_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    feat_fu_86_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    feat_fu_86 <= ap_const_lv6_0;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    feat_fu_86 <= select_ln435_1_fu_190_p3;
                end if;
            end if; 
        end if;
    end process;

    i_1_fu_78_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    i_1_fu_78 <= ap_const_lv5_0;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    i_1_fu_78 <= select_ln436_1_fu_258_p3;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten12_fu_90_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln435_fu_141_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    indvar_flatten12_fu_90 <= add_ln435_1_fu_147_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten12_fu_90 <= ap_const_lv14_0;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten_fu_82_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten_fu_82 <= ap_const_lv10_0;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    indvar_flatten_fu_82 <= select_ln436_2_fu_330_p3;
                end if;
            end if; 
        end if;
    end process;

    j_1_fu_74_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    j_1_fu_74 <= ap_const_lv5_0;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    j_1_fu_74 <= add_ln437_fu_318_p2;
                end if;
            end if; 
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln435_1_fu_147_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten12_load) + unsigned(ap_const_lv14_1));
    add_ln435_fu_170_p2 <= std_logic_vector(unsigned(feat_fu_86) + unsigned(ap_const_lv6_1));
    add_ln436_1_fu_324_p2 <= std_logic_vector(unsigned(indvar_flatten_fu_82) + unsigned(ap_const_lv10_1));
    add_ln436_fu_238_p2 <= std_logic_vector(unsigned(select_ln435_fu_182_p3) + unsigned(ap_const_lv5_1));
    add_ln437_fu_318_p2 <= std_logic_vector(unsigned(select_ln436_fu_250_p3) + unsigned(ap_const_lv5_1));
    add_ln438_1_fu_270_p2 <= std_logic_vector(unsigned(add_ln438_fu_214_p2) + unsigned(zext_ln438_2_fu_266_p1));
    add_ln438_2_fu_292_p2 <= std_logic_vector(unsigned(p_shl_fu_284_p3) + unsigned(zext_ln438_3_fu_276_p1));
    add_ln438_3_fu_302_p2 <= std_logic_vector(unsigned(add_ln438_2_fu_292_p2) + unsigned(zext_ln438_4_fu_298_p1));
    add_ln438_fu_214_p2 <= std_logic_vector(unsigned(zext_ln438_1_fu_210_p1) + unsigned(zext_ln438_fu_198_p1));
    and_ln435_fu_232_p2 <= (xor_ln435_fu_220_p2 and icmp_ln437_fu_226_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, conv2_to_conv3_empty_n)
    begin
                ap_block_pp0_stage0_11001 <= ((conv2_to_conv3_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, conv2_to_conv3_empty_n)
    begin
                ap_block_pp0_stage0_subdone <= ((conv2_to_conv3_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;

        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state2_pp0_stage0_iter1_assign_proc : process(conv2_to_conv3_empty_n)
    begin
                ap_block_state2_pp0_stage0_iter1 <= (conv2_to_conv3_empty_n = ap_const_logic_0);
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln435_fu_141_p2)
    begin
        if (((icmp_ln435_fu_141_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten12_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten12_fu_90)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_indvar_flatten12_load <= ap_const_lv14_0;
        else 
            ap_sig_allocacmp_indvar_flatten12_load <= indvar_flatten12_fu_90;
        end if; 
    end process;


    conv2_to_conv3_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, conv2_to_conv3_empty_n, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            conv2_to_conv3_blk_n <= conv2_to_conv3_empty_n;
        else 
            conv2_to_conv3_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    conv2_to_conv3_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            conv2_to_conv3_read <= ap_const_logic_1;
        else 
            conv2_to_conv3_read <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln435_fu_141_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten12_load = ap_const_lv14_2420) else "0";
    icmp_ln436_fu_176_p2 <= "1" when (indvar_flatten_fu_82 = ap_const_lv10_121) else "0";
    icmp_ln437_fu_226_p2 <= "1" when (j_1_fu_74 = ap_const_lv5_11) else "0";
    input_tile_address0 <= zext_ln438_5_fu_308_p1(14 - 1 downto 0);

    input_tile_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_tile_ce0 <= ap_const_logic_1;
        else 
            input_tile_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    input_tile_d0 <= conv2_to_conv3_dout;

    input_tile_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_tile_we0 <= ap_const_logic_1;
        else 
            input_tile_we0 <= ap_const_logic_0;
        end if; 
    end process;

    or_ln436_fu_244_p2 <= (icmp_ln436_fu_176_p2 or and_ln435_fu_232_p2);
    p_shl_fu_284_p3 <= (trunc_ln438_fu_280_p1 & ap_const_lv4_0);
    select_ln435_1_fu_190_p3 <= 
        add_ln435_fu_170_p2 when (icmp_ln436_fu_176_p2(0) = '1') else 
        feat_fu_86;
    select_ln435_fu_182_p3 <= 
        ap_const_lv5_0 when (icmp_ln436_fu_176_p2(0) = '1') else 
        i_1_fu_78;
    select_ln436_1_fu_258_p3 <= 
        add_ln436_fu_238_p2 when (and_ln435_fu_232_p2(0) = '1') else 
        select_ln435_fu_182_p3;
    select_ln436_2_fu_330_p3 <= 
        ap_const_lv10_1 when (icmp_ln436_fu_176_p2(0) = '1') else 
        add_ln436_1_fu_324_p2;
    select_ln436_fu_250_p3 <= 
        ap_const_lv5_0 when (or_ln436_fu_244_p2(0) = '1') else 
        j_1_fu_74;
    tmp_24_fu_202_p3 <= (select_ln435_1_fu_190_p3 & ap_const_lv4_0);
    trunc_ln438_fu_280_p1 <= add_ln438_1_fu_270_p2(10 - 1 downto 0);
    xor_ln435_fu_220_p2 <= (icmp_ln436_fu_176_p2 xor ap_const_lv1_1);
    zext_ln438_1_fu_210_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_24_fu_202_p3),11));
    zext_ln438_2_fu_266_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln436_1_fu_258_p3),11));
    zext_ln438_3_fu_276_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln438_1_fu_270_p2),14));
    zext_ln438_4_fu_298_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln436_fu_250_p3),14));
    zext_ln438_5_fu_308_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln438_3_fu_302_p2),64));
    zext_ln438_fu_198_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln435_1_fu_190_p3),11));
end behav;
