-- ==============================================================
-- Generated by Vitis HLS v2023.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity srcnn_conv3_from_precomputed_conv2_Pipeline_VITIS_LOOP_192_7_VITIS_LOOP_193_8 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    acc3 : IN STD_LOGIC_VECTOR (31 downto 0);
    zext_ln176_3 : IN STD_LOGIC_VECTOR (8 downto 0);
    h0_cast : IN STD_LOGIC_VECTOR (8 downto 0);
    zext_ln173 : IN STD_LOGIC_VECTOR (8 downto 0);
    sub60_cast : IN STD_LOGIC_VECTOR (8 downto 0);
    add_ln204 : IN STD_LOGIC_VECTOR (12 downto 0);
    zext_ln180_1 : IN STD_LOGIC_VECTOR (8 downto 0);
    w0_cast5 : IN STD_LOGIC_VECTOR (7 downto 0);
    zext_ln174 : IN STD_LOGIC_VECTOR (8 downto 0);
    zext_ln176 : IN STD_LOGIC_VECTOR (8 downto 0);
    conv2_buf_address0 : OUT STD_LOGIC_VECTOR (17 downto 0);
    conv2_buf_ce0 : OUT STD_LOGIC;
    conv2_buf_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    mux_case_091_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    mux_case_197_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    mux_case_2103_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    mux_case_3109_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    mux_case_4115_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    mux_case_046122_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    mux_case_148128_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    mux_case_250134_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    mux_case_352140_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    mux_case_454146_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    mux_case_057152_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    mux_case_159158_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    mux_case_261164_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    mux_case_363170_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    mux_case_465176_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    mux_case_068182_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    mux_case_170188_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    mux_case_272194_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    mux_case_374200_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    mux_case_476206_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    mux_case_079212_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    mux_case_181218_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    mux_case_283224_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    mux_case_385230_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    mux_case_487236_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    acc3_2_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    acc3_2_out_ap_vld : OUT STD_LOGIC;
    grp_fu_1043_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1043_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1043_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
    grp_fu_1043_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1043_p_ce : OUT STD_LOGIC;
    grp_fu_1047_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1047_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1047_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1047_p_ce : OUT STD_LOGIC );
end;


architecture behav of srcnn_conv3_from_precomputed_conv2_Pipeline_VITIS_LOOP_192_7_VITIS_LOOP_193_8 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_pp0_stage4 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_pp0_stage5 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv11_FE : STD_LOGIC_VECTOR (10 downto 0) := "00011111110";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv11_2 : STD_LOGIC_VECTOR (10 downto 0) := "00000000010";
    constant ap_const_lv10_2 : STD_LOGIC_VECTOR (9 downto 0) := "0000000010";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv5_19 : STD_LOGIC_VECTOR (4 downto 0) := "11001";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv10_FE : STD_LOGIC_VECTOR (9 downto 0) := "0011111110";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_state4_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_state10_pp0_stage3_iter1 : BOOLEAN;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal icmp_ln192_reg_1109 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage3 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage5 : signal is "none";
    signal ap_block_state6_pp0_stage5_iter0 : BOOLEAN;
    signal ap_block_pp0_stage5_subdone : BOOLEAN;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln192_fu_594_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln204_3_fu_925_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln204_3_reg_1113 : STD_LOGIC_VECTOR (17 downto 0);
    signal a_assign_fu_1011_p7 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_assign_reg_1118 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state8_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal c2_reg_1128 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_state3_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_state9_pp0_stage2_iter1 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal zext_ln204_fu_1048_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal acc3_2_fu_156 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal ap_loop_init : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal kx_fu_160 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln193_fu_1027_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_sig_allocacmp_kx_load : STD_LOGIC_VECTOR (2 downto 0);
    signal ky_1_fu_164 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln192_fu_795_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_sig_allocacmp_ky : STD_LOGIC_VECTOR (2 downto 0);
    signal indvar_flatten24_fu_168 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln192_1_fu_600_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_sig_allocacmp_indvar_flatten24_load : STD_LOGIC_VECTOR (4 downto 0);
    signal p_2_fu_172 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage5_11001 : BOOLEAN;
    signal ap_block_pp0_stage3_01001 : BOOLEAN;
    signal tmp2_fu_476_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp2_cast_fu_482_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln176_3_cast_fu_442_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal empty_fu_486_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_13_fu_506_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_12_fu_492_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp1_i_fu_500_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_23_fu_522_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_cast_cast_fu_514_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal gy_fu_528_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal h0_cast_cast_fu_438_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub53_fu_536_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal empty_24_fu_542_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal yi_fu_546_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln173_cast_fu_434_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal slt_fu_566_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal rev72_fu_572_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub60_cast_cast_fu_430_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal yi_cast_fu_552_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_14_fu_558_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal yi_2_fu_578_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln193_fu_615_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp2_mid1_fu_629_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp2_cast_mid1_fu_635_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_mid1_fu_639_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_16_fu_659_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_15_fu_645_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp1_i_mid1_fu_653_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_mid120_fu_675_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_mid118_cast_cast_fu_667_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal gy_mid1_fu_681_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub53_mid1_fu_689_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal empty_25_fu_695_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal yi_mid1_fu_699_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal slt73_fu_719_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal rev74_fu_725_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal yi_cast_mid1_fu_705_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_17_fu_711_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal yi_2_mid1_fu_731_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal yi_1_mid1_fu_739_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal yi_1_fu_586_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln180_1_fu_747_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln204_cast_fu_446_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal sext_ln204_fu_755_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln204_1_fu_759_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal trunc_ln204_fu_765_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_18_fu_777_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_shl5_fu_769_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln204_1_fu_785_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln192_fu_609_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln180_fu_621_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln197_fu_803_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal sext_ln197_fu_809_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln180_1_cast_fu_426_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln197_1_fu_813_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_20_fu_833_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_19_fu_819_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln26_fu_827_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln26_fu_849_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln26_fu_841_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal gx_fu_855_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal w0_cast5_cast_fu_422_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal sub_ln200_fu_863_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal sext_ln200_fu_869_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal xi_fu_873_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln174_cast_fu_418_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln202_fu_893_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln202_fu_899_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln176_cast_fu_414_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln200_1_fu_879_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_21_fu_885_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xi_1_fu_905_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal xi_2_fu_913_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln204_2_fu_789_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln204_2_fu_921_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_fu_931_p7 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_fu_947_p7 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_fu_963_p7 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_fu_979_p7 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_fu_995_p7 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_assign_fu_1011_p6 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_idle_pp0_1to1 : STD_LOGIC;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_block_state5_pp0_stage4_iter0 : BOOLEAN;
    signal ap_block_pp0_stage4_subdone : BOOLEAN;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_block_pp0_stage0_00001 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component srcnn_fadd_32ns_32ns_32_4_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component srcnn_fmul_32ns_32ns_32_3_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component srcnn_mux_5_3_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (31 downto 0);
        din5 : IN STD_LOGIC_VECTOR (2 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component srcnn_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mux_5_3_32_1_1_U221 : component srcnn_mux_5_3_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 3,
        dout_WIDTH => 32)
    port map (
        din0 => mux_case_091_reload,
        din1 => mux_case_197_reload,
        din2 => mux_case_2103_reload,
        din3 => mux_case_3109_reload,
        din4 => mux_case_4115_reload,
        din5 => select_ln180_fu_621_p3,
        dout => tmp_fu_931_p7);

    mux_5_3_32_1_1_U222 : component srcnn_mux_5_3_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 3,
        dout_WIDTH => 32)
    port map (
        din0 => mux_case_046122_reload,
        din1 => mux_case_148128_reload,
        din2 => mux_case_250134_reload,
        din3 => mux_case_352140_reload,
        din4 => mux_case_454146_reload,
        din5 => select_ln180_fu_621_p3,
        dout => tmp_4_fu_947_p7);

    mux_5_3_32_1_1_U223 : component srcnn_mux_5_3_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 3,
        dout_WIDTH => 32)
    port map (
        din0 => mux_case_057152_reload,
        din1 => mux_case_159158_reload,
        din2 => mux_case_261164_reload,
        din3 => mux_case_363170_reload,
        din4 => mux_case_465176_reload,
        din5 => select_ln180_fu_621_p3,
        dout => tmp_5_fu_963_p7);

    mux_5_3_32_1_1_U224 : component srcnn_mux_5_3_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 3,
        dout_WIDTH => 32)
    port map (
        din0 => mux_case_068182_reload,
        din1 => mux_case_170188_reload,
        din2 => mux_case_272194_reload,
        din3 => mux_case_374200_reload,
        din4 => mux_case_476206_reload,
        din5 => select_ln180_fu_621_p3,
        dout => tmp_6_fu_979_p7);

    mux_5_3_32_1_1_U225 : component srcnn_mux_5_3_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 3,
        dout_WIDTH => 32)
    port map (
        din0 => mux_case_079212_reload,
        din1 => mux_case_181218_reload,
        din2 => mux_case_283224_reload,
        din3 => mux_case_385230_reload,
        din4 => mux_case_487236_reload,
        din5 => select_ln180_fu_621_p3,
        dout => tmp_7_fu_995_p7);

    mux_5_3_32_1_1_U226 : component srcnn_mux_5_3_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 3,
        dout_WIDTH => 32)
    port map (
        din0 => tmp_fu_931_p7,
        din1 => tmp_4_fu_947_p7,
        din2 => tmp_5_fu_963_p7,
        din3 => tmp_6_fu_979_p7,
        din4 => tmp_7_fu_995_p7,
        din5 => a_assign_fu_1011_p6,
        dout => a_assign_fu_1011_p7);

    flow_control_loop_pipe_sequential_init_U : component srcnn_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage3,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage3)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage5_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    acc3_2_fu_156_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                acc3_2_fu_156 <= acc3;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                acc3_2_fu_156 <= grp_fu_1043_p_dout0;
            end if; 
        end if;
    end process;

    indvar_flatten24_fu_168_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln192_fu_594_p2 = ap_const_lv1_0))) then 
                    indvar_flatten24_fu_168 <= add_ln192_1_fu_600_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten24_fu_168 <= ap_const_lv5_0;
                end if;
            end if; 
        end if;
    end process;

    kx_fu_160_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln192_fu_594_p2 = ap_const_lv1_0))) then 
                    kx_fu_160 <= add_ln193_fu_1027_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    kx_fu_160 <= ap_const_lv3_0;
                end if;
            end if; 
        end if;
    end process;

    ky_1_fu_164_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln192_fu_594_p2 = ap_const_lv1_0))) then 
                    ky_1_fu_164 <= select_ln192_fu_795_p3;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    ky_1_fu_164 <= ap_const_lv3_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln192_fu_594_p2 = ap_const_lv1_0))) then
                a_assign_reg_1118 <= a_assign_fu_1011_p7;
                add_ln204_3_reg_1113 <= add_ln204_3_fu_925_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln192_reg_1109 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                c2_reg_1128 <= conv2_buf_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln192_reg_1109 <= icmp_ln192_fu_594_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln192_reg_1109 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then
                p_2_fu_172 <= grp_fu_1047_p_dout0;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage3_subdone, ap_condition_exit_pp0_iter0_stage3, ap_block_pp0_stage5_subdone, ap_block_pp0_stage0_subdone, ap_idle_pp0_1to1, ap_block_pp0_stage1_subdone, ap_block_pp0_stage2_subdone, ap_block_pp0_stage4_subdone, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_start_int = ap_const_logic_0) and (ap_idle_pp0_1to1 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage3)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_pp0_stage4 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage4_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                end if;
            when ap_ST_fsm_pp0_stage5 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage5_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    a_assign_fu_1011_p6 <= 
        add_ln192_fu_609_p2 when (icmp_ln193_fu_615_p2(0) = '1') else 
        ap_sig_allocacmp_ky;
    acc3_2_out <= acc3_2_fu_156;

    acc3_2_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage3, icmp_ln192_reg_1109, ap_block_pp0_stage3_11001)
    begin
        if (((icmp_ln192_reg_1109 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            acc3_2_out_ap_vld <= ap_const_logic_1;
        else 
            acc3_2_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    add_ln192_1_fu_600_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten24_load) + unsigned(ap_const_lv5_1));
    add_ln192_fu_609_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_ky) + unsigned(ap_const_lv3_1));
    add_ln193_fu_1027_p2 <= std_logic_vector(unsigned(select_ln180_fu_621_p3) + unsigned(ap_const_lv3_1));
    add_ln197_1_fu_813_p2 <= std_logic_vector(signed(sext_ln197_fu_809_p1) + signed(zext_ln180_1_cast_fu_426_p1));
    add_ln197_fu_803_p2 <= std_logic_vector(unsigned(select_ln180_fu_621_p3) + unsigned(ap_const_lv3_6));
    add_ln200_1_fu_879_p2 <= std_logic_vector(signed(sub_ln200_fu_863_p2) + signed(ap_const_lv10_2));
    add_ln204_1_fu_759_p2 <= std_logic_vector(unsigned(add_ln204_cast_fu_446_p1) + unsigned(sext_ln204_fu_755_p1));
    add_ln204_2_fu_789_p2 <= std_logic_vector(unsigned(p_shl5_fu_769_p3) + unsigned(sext_ln204_1_fu_785_p1));
    add_ln204_3_fu_925_p2 <= std_logic_vector(unsigned(add_ln204_2_fu_789_p2) + unsigned(sext_ln204_2_fu_921_p1));
    add_ln204_cast_fu_446_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln204),14));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(3);
    ap_CS_fsm_pp0_stage5 <= ap_CS_fsm(5);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage3_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage4_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage5_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage3_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_subdone, icmp_ln192_reg_1109)
    begin
        if (((icmp_ln192_reg_1109 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            ap_condition_exit_pp0_iter0_stage3 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to1_assign_proc : process(ap_enable_reg_pp0_iter1)
    begin
        if ((ap_enable_reg_pp0_iter1 = ap_const_logic_0)) then 
            ap_idle_pp0_1to1 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to1 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage3;

    ap_ready_int_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage5_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten24_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_loop_init, ap_block_pp0_stage0, indvar_flatten24_fu_168)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_indvar_flatten24_load <= ap_const_lv5_0;
        else 
            ap_sig_allocacmp_indvar_flatten24_load <= indvar_flatten24_fu_168;
        end if; 
    end process;


    ap_sig_allocacmp_kx_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_loop_init, ap_block_pp0_stage0, kx_fu_160)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_kx_load <= ap_const_lv3_0;
        else 
            ap_sig_allocacmp_kx_load <= kx_fu_160;
        end if; 
    end process;


    ap_sig_allocacmp_ky_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_loop_init, ap_block_pp0_stage0, ky_1_fu_164)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_ky <= ap_const_lv3_0;
        else 
            ap_sig_allocacmp_ky <= ky_1_fu_164;
        end if; 
    end process;

    cmp1_i_fu_500_p2 <= "1" when (signed(empty_fu_486_p2) > signed(ap_const_lv11_FE)) else "0";
    cmp1_i_mid1_fu_653_p2 <= "1" when (signed(p_mid1_fu_639_p2) > signed(ap_const_lv11_FE)) else "0";
    conv2_buf_address0 <= zext_ln204_fu_1048_p1(18 - 1 downto 0);

    conv2_buf_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            conv2_buf_ce0 <= ap_const_logic_1;
        else 
            conv2_buf_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    empty_23_fu_522_p2 <= (tmp_12_fu_492_p3 or cmp1_i_fu_500_p2);
    empty_24_fu_542_p1 <= sub53_fu_536_p2(10 - 1 downto 0);
    empty_25_fu_695_p1 <= sub53_mid1_fu_689_p2(10 - 1 downto 0);
    empty_fu_486_p2 <= std_logic_vector(signed(tmp2_cast_fu_482_p1) + signed(zext_ln176_3_cast_fu_442_p1));
    grp_fu_1043_p_ce <= ap_const_logic_1;
    grp_fu_1043_p_din0 <= acc3_2_fu_156;
    grp_fu_1043_p_din1 <= p_2_fu_172;
    grp_fu_1043_p_opcode <= ap_const_lv2_0;
    grp_fu_1047_p_ce <= ap_const_logic_1;
    grp_fu_1047_p_din0 <= a_assign_reg_1118;
    grp_fu_1047_p_din1 <= c2_reg_1128;
    gx_fu_855_p3 <= 
        select_ln26_fu_841_p3 when (or_ln26_fu_849_p2(0) = '1') else 
        add_ln197_1_fu_813_p2;
    gy_fu_528_p3 <= 
        p_cast_cast_fu_514_p3 when (empty_23_fu_522_p2(0) = '1') else 
        empty_fu_486_p2;
    gy_mid1_fu_681_p3 <= 
        p_mid118_cast_cast_fu_667_p3 when (p_mid120_fu_675_p2(0) = '1') else 
        p_mid1_fu_639_p2;
    h0_cast_cast_fu_438_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(h0_cast),11));
    icmp_ln192_fu_594_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten24_load = ap_const_lv5_19) else "0";
    icmp_ln193_fu_615_p2 <= "1" when (ap_sig_allocacmp_kx_load = ap_const_lv3_5) else "0";
    icmp_ln202_fu_893_p2 <= "1" when (signed(xi_fu_873_p2) < signed(zext_ln174_cast_fu_418_p1)) else "0";
    icmp_ln26_fu_827_p2 <= "1" when (signed(add_ln197_1_fu_813_p2) > signed(ap_const_lv10_FE)) else "0";
    or_ln26_fu_849_p2 <= (tmp_19_fu_819_p3 or icmp_ln26_fu_827_p2);
    p_cast_cast_fu_514_p3 <= 
        ap_const_lv11_0 when (tmp_13_fu_506_p3(0) = '1') else 
        ap_const_lv11_FE;
    p_mid118_cast_cast_fu_667_p3 <= 
        ap_const_lv11_0 when (tmp_16_fu_659_p3(0) = '1') else 
        ap_const_lv11_FE;
    p_mid120_fu_675_p2 <= (tmp_15_fu_645_p3 or cmp1_i_mid1_fu_653_p2);
    p_mid1_fu_639_p2 <= std_logic_vector(signed(tmp2_cast_mid1_fu_635_p1) + signed(zext_ln176_3_cast_fu_442_p1));
    p_shl5_fu_769_p3 <= (trunc_ln204_fu_765_p1 & ap_const_lv6_0);
    rev72_fu_572_p2 <= (slt_fu_566_p2 xor ap_const_lv1_1);
    rev74_fu_725_p2 <= (slt73_fu_719_p2 xor ap_const_lv1_1);
    select_ln180_1_fu_747_p3 <= 
        yi_1_mid1_fu_739_p3 when (icmp_ln193_fu_615_p2(0) = '1') else 
        yi_1_fu_586_p3;
    select_ln180_fu_621_p3 <= 
        ap_const_lv3_0 when (icmp_ln193_fu_615_p2(0) = '1') else 
        ap_sig_allocacmp_kx_load;
    select_ln192_fu_795_p3 <= 
        add_ln192_fu_609_p2 when (icmp_ln193_fu_615_p2(0) = '1') else 
        ap_sig_allocacmp_ky;
    select_ln26_fu_841_p3 <= 
        ap_const_lv10_0 when (tmp_20_fu_833_p3(0) = '1') else 
        ap_const_lv10_FE;
        sext_ln197_fu_809_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln197_fu_803_p2),10));

        sext_ln200_fu_869_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln200_fu_863_p2),11));

        sext_ln204_1_fu_785_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_18_fu_777_p3),18));

        sext_ln204_2_fu_921_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(xi_2_fu_913_p3),18));

        sext_ln204_fu_755_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln180_1_fu_747_p3),14));

    slt73_fu_719_p2 <= "1" when (signed(yi_mid1_fu_699_p2) < signed(zext_ln173_cast_fu_434_p1)) else "0";
    slt_fu_566_p2 <= "1" when (signed(yi_fu_546_p2) < signed(zext_ln173_cast_fu_434_p1)) else "0";
    sub53_fu_536_p2 <= std_logic_vector(unsigned(gy_fu_528_p3) - unsigned(h0_cast_cast_fu_438_p1));
    sub53_mid1_fu_689_p2 <= std_logic_vector(unsigned(gy_mid1_fu_681_p3) - unsigned(h0_cast_cast_fu_438_p1));
    sub60_cast_cast_fu_430_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub60_cast),10));
    sub_ln200_fu_863_p2 <= std_logic_vector(unsigned(gx_fu_855_p3) - unsigned(w0_cast5_cast_fu_422_p1));
        tmp2_cast_fu_482_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp2_fu_476_p2),11));

        tmp2_cast_mid1_fu_635_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp2_mid1_fu_629_p2),11));

    tmp2_fu_476_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_ky) + unsigned(ap_const_lv3_6));
    tmp2_mid1_fu_629_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_ky) + unsigned(ap_const_lv3_7));
    tmp_12_fu_492_p3 <= empty_fu_486_p2(10 downto 10);
    tmp_13_fu_506_p3 <= empty_fu_486_p2(10 downto 10);
    tmp_14_fu_558_p3 <= yi_fu_546_p2(10 downto 10);
    tmp_15_fu_645_p3 <= p_mid1_fu_639_p2(10 downto 10);
    tmp_16_fu_659_p3 <= p_mid1_fu_639_p2(10 downto 10);
    tmp_17_fu_711_p3 <= yi_mid1_fu_699_p2(10 downto 10);
    tmp_18_fu_777_p3 <= (add_ln204_1_fu_759_p2 & ap_const_lv2_0);
    tmp_19_fu_819_p3 <= add_ln197_1_fu_813_p2(9 downto 9);
    tmp_20_fu_833_p3 <= add_ln197_1_fu_813_p2(9 downto 9);
    tmp_21_fu_885_p3 <= xi_fu_873_p2(10 downto 10);
    trunc_ln204_fu_765_p1 <= add_ln204_1_fu_759_p2(12 - 1 downto 0);
    w0_cast5_cast_fu_422_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(w0_cast5),10));
    xi_1_fu_905_p3 <= 
        zext_ln176_cast_fu_414_p1 when (xor_ln202_fu_899_p2(0) = '1') else 
        add_ln200_1_fu_879_p2;
    xi_2_fu_913_p3 <= 
        ap_const_lv10_0 when (tmp_21_fu_885_p3(0) = '1') else 
        xi_1_fu_905_p3;
    xi_fu_873_p2 <= std_logic_vector(signed(sext_ln200_fu_869_p1) + signed(ap_const_lv11_2));
    xor_ln202_fu_899_p2 <= (icmp_ln202_fu_893_p2 xor ap_const_lv1_1);
    yi_1_fu_586_p3 <= 
        ap_const_lv10_0 when (tmp_14_fu_558_p3(0) = '1') else 
        yi_2_fu_578_p3;
    yi_1_mid1_fu_739_p3 <= 
        ap_const_lv10_0 when (tmp_17_fu_711_p3(0) = '1') else 
        yi_2_mid1_fu_731_p3;
    yi_2_fu_578_p3 <= 
        sub60_cast_cast_fu_430_p1 when (rev72_fu_572_p2(0) = '1') else 
        yi_cast_fu_552_p2;
    yi_2_mid1_fu_731_p3 <= 
        sub60_cast_cast_fu_430_p1 when (rev74_fu_725_p2(0) = '1') else 
        yi_cast_mid1_fu_705_p2;
    yi_cast_fu_552_p2 <= std_logic_vector(unsigned(empty_24_fu_542_p1) + unsigned(ap_const_lv10_2));
    yi_cast_mid1_fu_705_p2 <= std_logic_vector(unsigned(empty_25_fu_695_p1) + unsigned(ap_const_lv10_2));
    yi_fu_546_p2 <= std_logic_vector(unsigned(sub53_fu_536_p2) + unsigned(ap_const_lv11_2));
    yi_mid1_fu_699_p2 <= std_logic_vector(unsigned(sub53_mid1_fu_689_p2) + unsigned(ap_const_lv11_2));
    zext_ln173_cast_fu_434_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln173),11));
    zext_ln174_cast_fu_418_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln174),11));
    zext_ln176_3_cast_fu_442_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln176_3),11));
    zext_ln176_cast_fu_414_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln176),10));
    zext_ln180_1_cast_fu_426_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln180_1),10));
    zext_ln204_fu_1048_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln204_3_reg_1113),64));
end behav;
