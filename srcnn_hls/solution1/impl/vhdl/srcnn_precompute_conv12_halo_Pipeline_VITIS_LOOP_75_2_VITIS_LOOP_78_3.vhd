-- ==============================================================
-- Generated by Vitis HLS v2023.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity srcnn_precompute_conv12_halo_Pipeline_VITIS_LOOP_75_2_VITIS_LOOP_78_3 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    v : IN STD_LOGIC_VECTOR (31 downto 0);
    sext_ln141 : IN STD_LOGIC_VECTOR (9 downto 0);
    trunc_ln142_mid2 : IN STD_LOGIC_VECTOR (6 downto 0);
    add_ln82 : IN STD_LOGIC_VECTOR (10 downto 0);
    sub_ln77 : IN STD_LOGIC_VECTOR (6 downto 0);
    conv1_weights_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    conv1_weights_ce0 : OUT STD_LOGIC;
    conv1_weights_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    gxc : IN STD_LOGIC_VECTOR (9 downto 0);
    sext_ln144_1 : IN STD_LOGIC_VECTOR (9 downto 0);
    w0_cast6 : IN STD_LOGIC_VECTOR (7 downto 0);
    patch_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    patch_ce0 : OUT STD_LOGIC;
    patch_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    v_2_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    v_2_out_ap_vld : OUT STD_LOGIC;
    grp_fu_1021_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1021_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1021_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
    grp_fu_1021_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1021_p_ce : OUT STD_LOGIC;
    grp_fu_1025_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1025_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1025_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1025_p_ce : OUT STD_LOGIC );
end;


architecture behav of srcnn_precompute_conv12_halo_Pipeline_VITIS_LOOP_75_2_VITIS_LOOP_78_3 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_pp0_stage4 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_pp0_stage5 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv11_FE : STD_LOGIC_VECTOR (10 downto 0) := "00011111110";
    constant ap_const_lv4_C : STD_LOGIC_VECTOR (3 downto 0) := "1100";
    constant ap_const_lv7_7E : STD_LOGIC_VECTOR (6 downto 0) := "1111110";
    constant ap_const_lv7_51 : STD_LOGIC_VECTOR (6 downto 0) := "1010001";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv4_D : STD_LOGIC_VECTOR (3 downto 0) := "1101";
    constant ap_const_lv10_3FC : STD_LOGIC_VECTOR (9 downto 0) := "1111111100";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv9_6 : STD_LOGIC_VECTOR (8 downto 0) := "000000110";
    constant ap_const_lv13_4C : STD_LOGIC_VECTOR (12 downto 0) := "0000001001100";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage5 : signal is "none";
    signal ap_block_state6_pp0_stage5_iter0 : BOOLEAN;
    signal ap_block_state12_pp0_stage5_iter1 : BOOLEAN;
    signal ap_block_pp0_stage5_subdone : BOOLEAN;
    signal icmp_ln75_reg_665 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage5 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln75_fu_309_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal px_fu_559_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal px_reg_674 : STD_LOGIC_VECTOR (10 downto 0);
    signal conv1_weights_load_reg_679 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state8_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_state3_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_state9_pp0_stage2_iter1 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_state4_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_state10_pp0_stage3_iter1 : BOOLEAN;
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal patch_load_reg_694 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage4 : signal is "none";
    signal ap_block_state5_pp0_stage4_iter0 : BOOLEAN;
    signal ap_block_state11_pp0_stage4_iter1 : BOOLEAN;
    signal ap_block_pp0_stage4_11001 : BOOLEAN;
    signal bitcast_ln82_fu_593_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage5_11001 : BOOLEAN;
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal zext_ln82_3_fu_464_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln82_4_fu_589_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal v_2_fu_100 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage5 : BOOLEAN;
    signal ap_loop_init : STD_LOGIC;
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal kx_fu_104 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln78_fu_565_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_allocacmp_kx_load : STD_LOGIC_VECTOR (3 downto 0);
    signal ky_fu_108 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln75_1_fu_344_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_allocacmp_ky_1 : STD_LOGIC_VECTOR (3 downto 0);
    signal indvar_flatten_fu_112 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln75_2_fu_315_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_sig_allocacmp_indvar_flatten_load : STD_LOGIC_VECTOR (6 downto 0);
    signal p_1_fu_116 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage5_01001 : BOOLEAN;
    signal sext_ln141_cast_fu_217_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln75_fu_247_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln76_fu_251_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln26_fu_271_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal sext_ln26_fu_277_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_fu_257_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln26_fu_265_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln26_fu_295_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln26_fu_287_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln26_1_fu_281_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln78_fu_330_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln75_fu_324_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln82_fu_352_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln82_1_fu_356_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln82_fu_366_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl2_fu_370_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln82_1_fu_362_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln75_1_fu_384_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln76_1_fu_388_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln26_2_fu_408_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal sext_ln26_2_fu_414_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_2_fu_394_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln26_1_fu_402_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln26_1_fu_432_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln26_2_fu_424_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln26_4_fu_418_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln26_3_fu_438_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal gh_fu_301_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln75_fu_336_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln82_2_fu_378_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln82_2_fu_454_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln82_3_fu_458_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln80_fu_473_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal sext_ln80_fu_479_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln78_1_fu_469_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln80_1_fu_483_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln26_5_fu_503_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal sext_ln26_1_fu_509_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal sext_ln144_1_cast_fu_213_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_4_fu_519_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_fu_489_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln26_2_fu_497_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln26_2_fu_535_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln26_4_fu_527_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln26_3_fu_513_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal w0_cast6_cast_fu_209_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln81_fu_549_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln81_fu_555_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal gw_fu_541_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln82_4_fu_589_p0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_619_p4 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_619_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_619_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_idle_pp0_1to1 : STD_LOGIC;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_block_pp0_stage4_subdone : BOOLEAN;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_block_pp0_stage2_00001 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component srcnn_fadd_32ns_32ns_32_4_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component srcnn_fmul_32ns_32ns_32_3_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component srcnn_ama_addmuladd_7ns_7ns_7ns_11s_13_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (6 downto 0);
        din1 : IN STD_LOGIC_VECTOR (6 downto 0);
        din2 : IN STD_LOGIC_VECTOR (6 downto 0);
        din3 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (12 downto 0) );
    end component;


    component srcnn_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    ama_addmuladd_7ns_7ns_7ns_11s_13_4_1_U21 : component srcnn_ama_addmuladd_7ns_7ns_7ns_11s_13_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 7,
        din1_WIDTH => 7,
        din2_WIDTH => 7,
        din3_WIDTH => 11,
        dout_WIDTH => 13)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => sub_ln77,
        din1 => grp_fu_619_p1,
        din2 => grp_fu_619_p2,
        din3 => px_reg_674,
        ce => ap_const_logic_1,
        dout => grp_fu_619_p4);

    flow_control_loop_pipe_sequential_init_U : component srcnn_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage5,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage5_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage5)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage5_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    indvar_flatten_fu_112_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln75_fu_309_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    indvar_flatten_fu_112 <= add_ln75_2_fu_315_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten_fu_112 <= ap_const_lv7_0;
                end if;
            end if; 
        end if;
    end process;

    kx_fu_104_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln75_fu_309_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    kx_fu_104 <= add_ln78_fu_565_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    kx_fu_104 <= ap_const_lv4_0;
                end if;
            end if; 
        end if;
    end process;

    ky_fu_108_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln75_fu_309_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    ky_fu_108 <= select_ln75_1_fu_344_p3;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    ky_fu_108 <= ap_const_lv4_0;
                end if;
            end if; 
        end if;
    end process;

    v_2_fu_100_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                v_2_fu_100 <= v;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
                v_2_fu_100 <= grp_fu_1021_p_dout0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln75_reg_665 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                conv1_weights_load_reg_679 <= conv1_weights_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln75_reg_665 <= icmp_ln75_fu_309_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                p_1_fu_116 <= grp_fu_1025_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln75_reg_665 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then
                patch_load_reg_694 <= patch_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln75_fu_309_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                px_reg_674 <= px_fu_559_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage5_subdone, ap_block_pp0_stage0_subdone, ap_idle_pp0_1to1, ap_block_pp0_stage1_subdone, ap_block_pp0_stage2_subdone, ap_block_pp0_stage3_subdone, ap_block_pp0_stage4_subdone, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_start_int = ap_const_logic_0) and (ap_idle_pp0_1to1 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_pp0_stage4 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage4_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                end if;
            when ap_ST_fsm_pp0_stage5 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage5_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    add_ln26_1_fu_281_p2 <= std_logic_vector(signed(sext_ln26_fu_277_p1) + signed(trunc_ln142_mid2));
    add_ln26_2_fu_408_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_ky_1) + unsigned(ap_const_lv4_D));
    add_ln26_3_fu_513_p2 <= std_logic_vector(signed(sext_ln26_1_fu_509_p1) + signed(sext_ln144_1_cast_fu_213_p1));
    add_ln26_4_fu_418_p2 <= std_logic_vector(signed(sext_ln26_2_fu_414_p1) + signed(trunc_ln142_mid2));
    add_ln26_5_fu_503_p2 <= std_logic_vector(unsigned(select_ln75_fu_336_p3) + unsigned(ap_const_lv4_C));
    add_ln26_fu_271_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_ky_1) + unsigned(ap_const_lv4_C));
    add_ln75_2_fu_315_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten_load) + unsigned(ap_const_lv7_1));
    add_ln75_fu_324_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_ky_1) + unsigned(ap_const_lv4_1));
    add_ln76_1_fu_388_p2 <= std_logic_vector(signed(sext_ln141_cast_fu_217_p1) + signed(zext_ln75_1_fu_384_p1));
    add_ln76_fu_251_p2 <= std_logic_vector(signed(sext_ln141_cast_fu_217_p1) + signed(zext_ln75_fu_247_p1));
    add_ln78_fu_565_p2 <= std_logic_vector(unsigned(select_ln75_fu_336_p3) + unsigned(ap_const_lv4_1));
    add_ln80_1_fu_483_p2 <= std_logic_vector(signed(sext_ln80_fu_479_p1) + signed(zext_ln78_1_fu_469_p1));
    add_ln80_fu_473_p2 <= std_logic_vector(unsigned(gxc) + unsigned(ap_const_lv10_3FC));
    add_ln82_1_fu_356_p2 <= std_logic_vector(unsigned(add_ln82) + unsigned(zext_ln82_fu_352_p1));
    add_ln82_2_fu_378_p2 <= std_logic_vector(unsigned(p_shl2_fu_370_p3) + unsigned(zext_ln82_1_fu_362_p1));
    add_ln82_3_fu_458_p2 <= std_logic_vector(unsigned(add_ln82_2_fu_378_p2) + unsigned(zext_ln82_2_fu_454_p1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(3);
    ap_CS_fsm_pp0_stage4 <= ap_CS_fsm(4);
    ap_CS_fsm_pp0_stage5 <= ap_CS_fsm(5);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage3_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage4_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage5_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage4_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage5_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage5_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_subdone, icmp_ln75_reg_665)
    begin
        if (((icmp_ln75_reg_665 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage5_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
            ap_condition_exit_pp0_iter0_stage5 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage5 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage5_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to1_assign_proc : process(ap_enable_reg_pp0_iter1)
    begin
        if ((ap_enable_reg_pp0_iter1 = ap_const_logic_0)) then 
            ap_idle_pp0_1to1 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to1 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage5;

    ap_ready_int_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage5_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten_fu_112)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_indvar_flatten_load <= ap_const_lv7_0;
        else 
            ap_sig_allocacmp_indvar_flatten_load <= indvar_flatten_fu_112;
        end if; 
    end process;


    ap_sig_allocacmp_kx_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, kx_fu_104)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_kx_load <= ap_const_lv4_0;
        else 
            ap_sig_allocacmp_kx_load <= kx_fu_104;
        end if; 
    end process;


    ap_sig_allocacmp_ky_1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, ky_fu_108)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_ky_1 <= ap_const_lv4_0;
        else 
            ap_sig_allocacmp_ky_1 <= ky_fu_108;
        end if; 
    end process;

    bitcast_ln82_fu_593_p1 <= conv1_weights_load_reg_679;
    conv1_weights_address0 <= zext_ln82_3_fu_464_p1(13 - 1 downto 0);

    conv1_weights_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            conv1_weights_ce0 <= ap_const_logic_1;
        else 
            conv1_weights_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    gh_fu_301_p3 <= 
        select_ln26_fu_287_p3 when (or_ln26_fu_295_p2(0) = '1') else 
        add_ln26_1_fu_281_p2;
    grp_fu_1021_p_ce <= ap_const_logic_1;
    grp_fu_1021_p_din0 <= v_2_fu_100;
    grp_fu_1021_p_din1 <= p_1_fu_116;
    grp_fu_1021_p_opcode <= ap_const_lv2_0;
    grp_fu_1025_p_ce <= ap_const_logic_1;
    grp_fu_1025_p_din0 <= bitcast_ln82_fu_593_p1;
    grp_fu_1025_p_din1 <= patch_load_reg_694;
    grp_fu_619_p1 <= 
        select_ln26_3_fu_438_p3 when (icmp_ln78_fu_330_p2(0) = '1') else 
        gh_fu_301_p3;
    grp_fu_619_p2 <= ap_const_lv13_4C(7 - 1 downto 0);
    gw_fu_541_p3 <= 
        select_ln26_4_fu_527_p3 when (or_ln26_2_fu_535_p2(0) = '1') else 
        add_ln26_3_fu_513_p2;
    icmp_ln26_1_fu_402_p2 <= "1" when (signed(add_ln76_1_fu_388_p2) > signed(ap_const_lv11_FE)) else "0";
    icmp_ln26_2_fu_497_p2 <= "1" when (signed(add_ln80_1_fu_483_p2) > signed(ap_const_lv11_FE)) else "0";
    icmp_ln26_fu_265_p2 <= "1" when (signed(add_ln76_fu_251_p2) > signed(ap_const_lv11_FE)) else "0";
    icmp_ln75_fu_309_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten_load = ap_const_lv7_51) else "0";
    icmp_ln78_fu_330_p2 <= "1" when (ap_sig_allocacmp_kx_load = ap_const_lv4_9) else "0";
    or_ln26_1_fu_432_p2 <= (tmp_2_fu_394_p3 or icmp_ln26_1_fu_402_p2);
    or_ln26_2_fu_535_p2 <= (tmp_3_fu_489_p3 or icmp_ln26_2_fu_497_p2);
    or_ln26_fu_295_p2 <= (tmp_fu_257_p3 or icmp_ln26_fu_265_p2);
    p_shl2_fu_370_p3 <= (trunc_ln82_fu_366_p1 & ap_const_lv3_0);
    patch_address0 <= zext_ln82_4_fu_589_p1(13 - 1 downto 0);

    patch_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            patch_ce0 <= ap_const_logic_1;
        else 
            patch_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    px_fu_559_p2 <= std_logic_vector(signed(sext_ln81_fu_555_p1) + signed(gw_fu_541_p3));
    select_ln26_2_fu_424_p3 <= 
        ap_const_lv7_0 when (tmp_2_fu_394_p3(0) = '1') else 
        ap_const_lv7_7E;
    select_ln26_3_fu_438_p3 <= 
        select_ln26_2_fu_424_p3 when (or_ln26_1_fu_432_p2(0) = '1') else 
        add_ln26_4_fu_418_p2;
    select_ln26_4_fu_527_p3 <= 
        ap_const_lv11_0 when (tmp_4_fu_519_p3(0) = '1') else 
        ap_const_lv11_FE;
    select_ln26_fu_287_p3 <= 
        ap_const_lv7_0 when (tmp_fu_257_p3(0) = '1') else 
        ap_const_lv7_7E;
    select_ln75_1_fu_344_p3 <= 
        add_ln75_fu_324_p2 when (icmp_ln78_fu_330_p2(0) = '1') else 
        ap_sig_allocacmp_ky_1;
    select_ln75_fu_336_p3 <= 
        ap_const_lv4_0 when (icmp_ln78_fu_330_p2(0) = '1') else 
        ap_sig_allocacmp_kx_load;
        sext_ln141_cast_fu_217_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln141),11));

        sext_ln144_1_cast_fu_213_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln144_1),11));

        sext_ln26_1_fu_509_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln26_5_fu_503_p2),11));

        sext_ln26_2_fu_414_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln26_2_fu_408_p2),7));

        sext_ln26_fu_277_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln26_fu_271_p2),7));

        sext_ln80_fu_479_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln80_fu_473_p2),11));

        sext_ln81_fu_555_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln81_fu_549_p2),11));

    sub_ln81_fu_549_p2 <= std_logic_vector(unsigned(ap_const_lv9_6) - unsigned(w0_cast6_cast_fu_209_p1));
    tmp_2_fu_394_p3 <= add_ln76_1_fu_388_p2(10 downto 10);
    tmp_3_fu_489_p3 <= add_ln80_1_fu_483_p2(10 downto 10);
    tmp_4_fu_519_p3 <= add_ln80_1_fu_483_p2(10 downto 10);
    tmp_fu_257_p3 <= add_ln76_fu_251_p2(10 downto 10);
    trunc_ln82_fu_366_p1 <= add_ln82_1_fu_356_p2(10 - 1 downto 0);
    v_2_out <= v_2_fu_100;

    v_2_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage5, icmp_ln75_reg_665, ap_block_pp0_stage5_11001)
    begin
        if (((icmp_ln75_reg_665 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
            v_2_out_ap_vld <= ap_const_logic_1;
        else 
            v_2_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    w0_cast6_cast_fu_209_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(w0_cast6),9));
    zext_ln75_1_fu_384_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln75_fu_324_p2),11));
    zext_ln75_fu_247_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_ky_1),11));
    zext_ln78_1_fu_469_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln75_fu_336_p3),11));
    zext_ln82_1_fu_362_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln82_1_fu_356_p2),13));
    zext_ln82_2_fu_454_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln75_fu_336_p3),13));
    zext_ln82_3_fu_464_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln82_3_fu_458_p2),64));
    zext_ln82_4_fu_589_p0 <= grp_fu_619_p4;
    zext_ln82_4_fu_589_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln82_4_fu_589_p0),64));
    zext_ln82_fu_352_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln75_1_fu_344_p3),11));
end behav;
