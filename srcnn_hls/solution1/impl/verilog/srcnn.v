// ==============================================================
// Generated by Vitis HLS v2023.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="srcnn_srcnn,hls_ip_2023_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xck26-sfvc784-2LV-c,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.016000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=283,HLS_SYN_DSP=0,HLS_SYN_FF=4567,HLS_SYN_LUT=5090,HLS_VERSION=2023_1}" *)

module srcnn (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_ftmap_address0,
        input_ftmap_ce0,
        input_ftmap_q0,
        conv1_weights_address0,
        conv1_weights_ce0,
        conv1_weights_q0,
        conv1_biases_address0,
        conv1_biases_ce0,
        conv1_biases_q0,
        conv2_weights_address0,
        conv2_weights_ce0,
        conv2_weights_q0,
        conv2_biases_address0,
        conv2_biases_ce0,
        conv2_biases_q0,
        conv3_weights_address0,
        conv3_weights_ce0,
        conv3_weights_q0,
        conv3_biases,
        output_ftmap_address0,
        output_ftmap_ce0,
        output_ftmap_we0,
        output_ftmap_d0
);

parameter    ap_ST_fsm_state1 = 8'd1;
parameter    ap_ST_fsm_state2 = 8'd2;
parameter    ap_ST_fsm_state3 = 8'd4;
parameter    ap_ST_fsm_state4 = 8'd8;
parameter    ap_ST_fsm_state5 = 8'd16;
parameter    ap_ST_fsm_state6 = 8'd32;
parameter    ap_ST_fsm_state7 = 8'd64;
parameter    ap_ST_fsm_state8 = 8'd128;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [15:0] input_ftmap_address0;
output   input_ftmap_ce0;
input  [31:0] input_ftmap_q0;
output  [12:0] conv1_weights_address0;
output   conv1_weights_ce0;
input  [31:0] conv1_weights_q0;
output  [5:0] conv1_biases_address0;
output   conv1_biases_ce0;
input  [31:0] conv1_biases_q0;
output  [10:0] conv2_weights_address0;
output   conv2_weights_ce0;
input  [31:0] conv2_weights_q0;
output  [4:0] conv2_biases_address0;
output   conv2_biases_ce0;
input  [31:0] conv2_biases_q0;
output  [9:0] conv3_weights_address0;
output   conv3_weights_ce0;
input  [31:0] conv3_weights_q0;
input  [31:0] conv3_biases;
output  [15:0] output_ftmap_address0;
output   output_ftmap_ce0;
output   output_ftmap_we0;
output  [31:0] output_ftmap_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [7:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [8:0] h0_2_reg_244;
wire    ap_CS_fsm_state2;
wire   [8:0] h0_3_fu_156_p2;
reg   [8:0] h0_3_reg_254;
wire   [0:0] icmp_ln239_fu_150_p2;
wire   [7:0] th_eff_fu_180_p3;
reg   [7:0] th_eff_reg_259;
wire   [8:0] w0_1_fu_194_p2;
reg   [8:0] w0_1_reg_269;
wire    ap_CS_fsm_state3;
wire   [0:0] icmp_ln242_fu_188_p2;
wire   [7:0] trunc_ln242_fu_208_p1;
reg   [7:0] trunc_ln242_reg_274;
wire   [7:0] tw_eff_fu_219_p3;
reg   [7:0] tw_eff_reg_281;
wire   [31:0] empty_fu_232_p1;
reg   [31:0] empty_reg_288;
wire    ap_CS_fsm_state7;
reg   [12:0] patch_address0;
reg    patch_ce0;
reg    patch_we0;
wire   [31:0] patch_q0;
reg   [17:0] conv2_buf_address0;
reg    conv2_buf_ce0;
reg    conv2_buf_we0;
wire   [31:0] conv2_buf_q0;
wire    grp_load_patch_tile_fu_99_ap_start;
wire    grp_load_patch_tile_fu_99_ap_done;
wire    grp_load_patch_tile_fu_99_ap_idle;
wire    grp_load_patch_tile_fu_99_ap_ready;
wire   [15:0] grp_load_patch_tile_fu_99_input_ftmap_address0;
wire    grp_load_patch_tile_fu_99_input_ftmap_ce0;
wire   [12:0] grp_load_patch_tile_fu_99_patch_address0;
wire    grp_load_patch_tile_fu_99_patch_ce0;
wire    grp_load_patch_tile_fu_99_patch_we0;
wire   [31:0] grp_load_patch_tile_fu_99_patch_d0;
wire    grp_precompute_conv12_halo_fu_110_ap_start;
wire    grp_precompute_conv12_halo_fu_110_ap_done;
wire    grp_precompute_conv12_halo_fu_110_ap_idle;
wire    grp_precompute_conv12_halo_fu_110_ap_ready;
wire   [12:0] grp_precompute_conv12_halo_fu_110_patch_address0;
wire    grp_precompute_conv12_halo_fu_110_patch_ce0;
wire   [12:0] grp_precompute_conv12_halo_fu_110_conv1_weights_address0;
wire    grp_precompute_conv12_halo_fu_110_conv1_weights_ce0;
wire   [5:0] grp_precompute_conv12_halo_fu_110_conv1_biases_address0;
wire    grp_precompute_conv12_halo_fu_110_conv1_biases_ce0;
wire   [10:0] grp_precompute_conv12_halo_fu_110_conv2_weights_address0;
wire    grp_precompute_conv12_halo_fu_110_conv2_weights_ce0;
wire   [4:0] grp_precompute_conv12_halo_fu_110_conv2_biases_address0;
wire    grp_precompute_conv12_halo_fu_110_conv2_biases_ce0;
wire   [17:0] grp_precompute_conv12_halo_fu_110_conv2_buf_address0;
wire    grp_precompute_conv12_halo_fu_110_conv2_buf_ce0;
wire    grp_precompute_conv12_halo_fu_110_conv2_buf_we0;
wire   [31:0] grp_precompute_conv12_halo_fu_110_conv2_buf_d0;
wire   [31:0] grp_precompute_conv12_halo_fu_110_grp_fu_293_p_din0;
wire   [31:0] grp_precompute_conv12_halo_fu_110_grp_fu_293_p_din1;
wire   [1:0] grp_precompute_conv12_halo_fu_110_grp_fu_293_p_opcode;
wire    grp_precompute_conv12_halo_fu_110_grp_fu_293_p_ce;
wire   [31:0] grp_precompute_conv12_halo_fu_110_grp_fu_297_p_din0;
wire   [31:0] grp_precompute_conv12_halo_fu_110_grp_fu_297_p_din1;
wire    grp_precompute_conv12_halo_fu_110_grp_fu_297_p_ce;
wire    grp_conv3_from_precomputed_conv2_fu_128_ap_start;
wire    grp_conv3_from_precomputed_conv2_fu_128_ap_done;
wire    grp_conv3_from_precomputed_conv2_fu_128_ap_idle;
wire    grp_conv3_from_precomputed_conv2_fu_128_ap_ready;
wire   [9:0] grp_conv3_from_precomputed_conv2_fu_128_conv3_weights_address0;
wire    grp_conv3_from_precomputed_conv2_fu_128_conv3_weights_ce0;
wire   [17:0] grp_conv3_from_precomputed_conv2_fu_128_conv2_buf_address0;
wire    grp_conv3_from_precomputed_conv2_fu_128_conv2_buf_ce0;
wire   [15:0] grp_conv3_from_precomputed_conv2_fu_128_output_ftmap_address0;
wire    grp_conv3_from_precomputed_conv2_fu_128_output_ftmap_ce0;
wire    grp_conv3_from_precomputed_conv2_fu_128_output_ftmap_we0;
wire   [31:0] grp_conv3_from_precomputed_conv2_fu_128_output_ftmap_d0;
wire   [31:0] grp_conv3_from_precomputed_conv2_fu_128_grp_fu_293_p_din0;
wire   [31:0] grp_conv3_from_precomputed_conv2_fu_128_grp_fu_293_p_din1;
wire   [1:0] grp_conv3_from_precomputed_conv2_fu_128_grp_fu_293_p_opcode;
wire    grp_conv3_from_precomputed_conv2_fu_128_grp_fu_293_p_ce;
wire   [31:0] grp_conv3_from_precomputed_conv2_fu_128_grp_fu_297_p_din0;
wire   [31:0] grp_conv3_from_precomputed_conv2_fu_128_grp_fu_297_p_din1;
wire    grp_conv3_from_precomputed_conv2_fu_128_grp_fu_297_p_ce;
reg   [8:0] w0_reg_88;
wire    ap_CS_fsm_state8;
reg    grp_load_patch_tile_fu_99_ap_start_reg;
wire    ap_CS_fsm_state4;
reg    grp_precompute_conv12_halo_fu_110_ap_start_reg;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state6;
reg    grp_conv3_from_precomputed_conv2_fu_128_ap_start_reg;
reg   [8:0] h0_fu_70;
wire   [7:0] trunc_ln239_fu_170_p1;
wire   [0:0] tmp_fu_162_p3;
wire   [7:0] xor_ln240_fu_174_p2;
wire   [0:0] tmp_1_fu_200_p3;
wire   [7:0] xor_ln243_fu_213_p2;
wire   [31:0] grp_fu_293_p2;
reg   [31:0] grp_fu_293_p0;
reg   [31:0] grp_fu_293_p1;
reg    grp_fu_293_ce;
wire   [31:0] grp_fu_297_p2;
reg   [31:0] grp_fu_297_p0;
reg   [31:0] grp_fu_297_p1;
reg    grp_fu_297_ce;
reg   [7:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
reg    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
reg    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
reg    ap_ST_fsm_state8_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 8'd1;
#0 grp_load_patch_tile_fu_99_ap_start_reg = 1'b0;
#0 grp_precompute_conv12_halo_fu_110_ap_start_reg = 1'b0;
#0 grp_conv3_from_precomputed_conv2_fu_128_ap_start_reg = 1'b0;
end

srcnn_patch_RAM_AUTO_1R1W #(
    .DataWidth( 32 ),
    .AddressRange( 5776 ),
    .AddressWidth( 13 ))
patch_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(patch_address0),
    .ce0(patch_ce0),
    .we0(patch_we0),
    .d0(grp_load_patch_tile_fu_99_patch_d0),
    .q0(patch_q0)
);

srcnn_conv2_buf_RAM_AUTO_1R1W #(
    .DataWidth( 32 ),
    .AddressRange( 147968 ),
    .AddressWidth( 18 ))
conv2_buf_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv2_buf_address0),
    .ce0(conv2_buf_ce0),
    .we0(conv2_buf_we0),
    .d0(grp_precompute_conv12_halo_fu_110_conv2_buf_d0),
    .q0(conv2_buf_q0)
);

srcnn_load_patch_tile grp_load_patch_tile_fu_99(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_load_patch_tile_fu_99_ap_start),
    .ap_done(grp_load_patch_tile_fu_99_ap_done),
    .ap_idle(grp_load_patch_tile_fu_99_ap_idle),
    .ap_ready(grp_load_patch_tile_fu_99_ap_ready),
    .input_ftmap_address0(grp_load_patch_tile_fu_99_input_ftmap_address0),
    .input_ftmap_ce0(grp_load_patch_tile_fu_99_input_ftmap_ce0),
    .input_ftmap_q0(input_ftmap_q0),
    .h0(h0_2_reg_244),
    .w0(trunc_ln242_reg_274),
    .th_eff(th_eff_reg_259),
    .tw_eff(tw_eff_reg_281),
    .patch_address0(grp_load_patch_tile_fu_99_patch_address0),
    .patch_ce0(grp_load_patch_tile_fu_99_patch_ce0),
    .patch_we0(grp_load_patch_tile_fu_99_patch_we0),
    .patch_d0(grp_load_patch_tile_fu_99_patch_d0)
);

srcnn_precompute_conv12_halo grp_precompute_conv12_halo_fu_110(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_precompute_conv12_halo_fu_110_ap_start),
    .ap_done(grp_precompute_conv12_halo_fu_110_ap_done),
    .ap_idle(grp_precompute_conv12_halo_fu_110_ap_idle),
    .ap_ready(grp_precompute_conv12_halo_fu_110_ap_ready),
    .patch_address0(grp_precompute_conv12_halo_fu_110_patch_address0),
    .patch_ce0(grp_precompute_conv12_halo_fu_110_patch_ce0),
    .patch_q0(patch_q0),
    .h0(h0_2_reg_244),
    .w0(trunc_ln242_reg_274),
    .th_eff(th_eff_reg_259),
    .tw_eff(tw_eff_reg_281),
    .conv1_weights_address0(grp_precompute_conv12_halo_fu_110_conv1_weights_address0),
    .conv1_weights_ce0(grp_precompute_conv12_halo_fu_110_conv1_weights_ce0),
    .conv1_weights_q0(conv1_weights_q0),
    .conv1_biases_address0(grp_precompute_conv12_halo_fu_110_conv1_biases_address0),
    .conv1_biases_ce0(grp_precompute_conv12_halo_fu_110_conv1_biases_ce0),
    .conv1_biases_q0(conv1_biases_q0),
    .conv2_weights_address0(grp_precompute_conv12_halo_fu_110_conv2_weights_address0),
    .conv2_weights_ce0(grp_precompute_conv12_halo_fu_110_conv2_weights_ce0),
    .conv2_weights_q0(conv2_weights_q0),
    .conv2_biases_address0(grp_precompute_conv12_halo_fu_110_conv2_biases_address0),
    .conv2_biases_ce0(grp_precompute_conv12_halo_fu_110_conv2_biases_ce0),
    .conv2_biases_q0(conv2_biases_q0),
    .conv2_buf_address0(grp_precompute_conv12_halo_fu_110_conv2_buf_address0),
    .conv2_buf_ce0(grp_precompute_conv12_halo_fu_110_conv2_buf_ce0),
    .conv2_buf_we0(grp_precompute_conv12_halo_fu_110_conv2_buf_we0),
    .conv2_buf_d0(grp_precompute_conv12_halo_fu_110_conv2_buf_d0),
    .grp_fu_293_p_din0(grp_precompute_conv12_halo_fu_110_grp_fu_293_p_din0),
    .grp_fu_293_p_din1(grp_precompute_conv12_halo_fu_110_grp_fu_293_p_din1),
    .grp_fu_293_p_opcode(grp_precompute_conv12_halo_fu_110_grp_fu_293_p_opcode),
    .grp_fu_293_p_dout0(grp_fu_293_p2),
    .grp_fu_293_p_ce(grp_precompute_conv12_halo_fu_110_grp_fu_293_p_ce),
    .grp_fu_297_p_din0(grp_precompute_conv12_halo_fu_110_grp_fu_297_p_din0),
    .grp_fu_297_p_din1(grp_precompute_conv12_halo_fu_110_grp_fu_297_p_din1),
    .grp_fu_297_p_dout0(grp_fu_297_p2),
    .grp_fu_297_p_ce(grp_precompute_conv12_halo_fu_110_grp_fu_297_p_ce)
);

srcnn_conv3_from_precomputed_conv2 grp_conv3_from_precomputed_conv2_fu_128(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_conv3_from_precomputed_conv2_fu_128_ap_start),
    .ap_done(grp_conv3_from_precomputed_conv2_fu_128_ap_done),
    .ap_idle(grp_conv3_from_precomputed_conv2_fu_128_ap_idle),
    .ap_ready(grp_conv3_from_precomputed_conv2_fu_128_ap_ready),
    .h0(h0_2_reg_244),
    .w0(trunc_ln242_reg_274),
    .th_eff(th_eff_reg_259),
    .tw_eff(tw_eff_reg_281),
    .conv3_weights_address0(grp_conv3_from_precomputed_conv2_fu_128_conv3_weights_address0),
    .conv3_weights_ce0(grp_conv3_from_precomputed_conv2_fu_128_conv3_weights_ce0),
    .conv3_weights_q0(conv3_weights_q0),
    .conv3_b_0_0_val(empty_reg_288),
    .conv2_buf_address0(grp_conv3_from_precomputed_conv2_fu_128_conv2_buf_address0),
    .conv2_buf_ce0(grp_conv3_from_precomputed_conv2_fu_128_conv2_buf_ce0),
    .conv2_buf_q0(conv2_buf_q0),
    .output_ftmap_address0(grp_conv3_from_precomputed_conv2_fu_128_output_ftmap_address0),
    .output_ftmap_ce0(grp_conv3_from_precomputed_conv2_fu_128_output_ftmap_ce0),
    .output_ftmap_we0(grp_conv3_from_precomputed_conv2_fu_128_output_ftmap_we0),
    .output_ftmap_d0(grp_conv3_from_precomputed_conv2_fu_128_output_ftmap_d0),
    .grp_fu_293_p_din0(grp_conv3_from_precomputed_conv2_fu_128_grp_fu_293_p_din0),
    .grp_fu_293_p_din1(grp_conv3_from_precomputed_conv2_fu_128_grp_fu_293_p_din1),
    .grp_fu_293_p_opcode(grp_conv3_from_precomputed_conv2_fu_128_grp_fu_293_p_opcode),
    .grp_fu_293_p_dout0(grp_fu_293_p2),
    .grp_fu_293_p_ce(grp_conv3_from_precomputed_conv2_fu_128_grp_fu_293_p_ce),
    .grp_fu_297_p_din0(grp_conv3_from_precomputed_conv2_fu_128_grp_fu_297_p_din0),
    .grp_fu_297_p_din1(grp_conv3_from_precomputed_conv2_fu_128_grp_fu_297_p_din1),
    .grp_fu_297_p_dout0(grp_fu_297_p2),
    .grp_fu_297_p_ce(grp_conv3_from_precomputed_conv2_fu_128_grp_fu_297_p_ce)
);

srcnn_fadd_32ns_32ns_32_4_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fadd_32ns_32ns_32_4_full_dsp_1_U277(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_293_p0),
    .din1(grp_fu_293_p1),
    .ce(grp_fu_293_ce),
    .dout(grp_fu_293_p2)
);

srcnn_fmul_32ns_32ns_32_3_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_3_max_dsp_1_U278(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_297_p0),
    .din1(grp_fu_297_p1),
    .ce(grp_fu_297_ce),
    .dout(grp_fu_297_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_conv3_from_precomputed_conv2_fu_128_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state7)) begin
            grp_conv3_from_precomputed_conv2_fu_128_ap_start_reg <= 1'b1;
        end else if ((grp_conv3_from_precomputed_conv2_fu_128_ap_ready == 1'b1)) begin
            grp_conv3_from_precomputed_conv2_fu_128_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_load_patch_tile_fu_99_ap_start_reg <= 1'b0;
    end else begin
        if (((icmp_ln242_fu_188_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
            grp_load_patch_tile_fu_99_ap_start_reg <= 1'b1;
        end else if ((grp_load_patch_tile_fu_99_ap_ready == 1'b1)) begin
            grp_load_patch_tile_fu_99_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_precompute_conv12_halo_fu_110_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state5)) begin
            grp_precompute_conv12_halo_fu_110_ap_start_reg <= 1'b1;
        end else if ((grp_precompute_conv12_halo_fu_110_ap_ready == 1'b1)) begin
            grp_precompute_conv12_halo_fu_110_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        h0_fu_70 <= 9'd0;
    end else if (((icmp_ln242_fu_188_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        h0_fu_70 <= h0_3_reg_254;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) & (grp_conv3_from_precomputed_conv2_fu_128_ap_done == 1'b1))) begin
        w0_reg_88 <= w0_1_reg_269;
    end else if (((icmp_ln239_fu_150_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        w0_reg_88 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        empty_reg_288 <= empty_fu_232_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        h0_2_reg_244 <= h0_fu_70;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln239_fu_150_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        h0_3_reg_254 <= h0_3_fu_156_p2;
        th_eff_reg_259 <= th_eff_fu_180_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln242_fu_188_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        trunc_ln242_reg_274 <= trunc_ln242_fu_208_p1;
        tw_eff_reg_281 <= tw_eff_fu_219_p3;
        w0_1_reg_269 <= w0_1_fu_194_p2;
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

always @ (*) begin
    if ((grp_load_patch_tile_fu_99_ap_done == 1'b0)) begin
        ap_ST_fsm_state4_blk = 1'b1;
    end else begin
        ap_ST_fsm_state4_blk = 1'b0;
    end
end

assign ap_ST_fsm_state5_blk = 1'b0;

always @ (*) begin
    if ((grp_precompute_conv12_halo_fu_110_ap_done == 1'b0)) begin
        ap_ST_fsm_state6_blk = 1'b1;
    end else begin
        ap_ST_fsm_state6_blk = 1'b0;
    end
end

assign ap_ST_fsm_state7_blk = 1'b0;

always @ (*) begin
    if ((grp_conv3_from_precomputed_conv2_fu_128_ap_done == 1'b0)) begin
        ap_ST_fsm_state8_blk = 1'b1;
    end else begin
        ap_ST_fsm_state8_blk = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln239_fu_150_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln239_fu_150_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        conv2_buf_address0 = grp_conv3_from_precomputed_conv2_fu_128_conv2_buf_address0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        conv2_buf_address0 = grp_precompute_conv12_halo_fu_110_conv2_buf_address0;
    end else begin
        conv2_buf_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        conv2_buf_ce0 = grp_conv3_from_precomputed_conv2_fu_128_conv2_buf_ce0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        conv2_buf_ce0 = grp_precompute_conv12_halo_fu_110_conv2_buf_ce0;
    end else begin
        conv2_buf_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        conv2_buf_we0 = grp_precompute_conv12_halo_fu_110_conv2_buf_we0;
    end else begin
        conv2_buf_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_fu_293_ce = grp_conv3_from_precomputed_conv2_fu_128_grp_fu_293_p_ce;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_293_ce = grp_precompute_conv12_halo_fu_110_grp_fu_293_p_ce;
    end else begin
        grp_fu_293_ce = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_fu_293_p0 = grp_conv3_from_precomputed_conv2_fu_128_grp_fu_293_p_din0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_293_p0 = grp_precompute_conv12_halo_fu_110_grp_fu_293_p_din0;
    end else begin
        grp_fu_293_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_fu_293_p1 = grp_conv3_from_precomputed_conv2_fu_128_grp_fu_293_p_din1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_293_p1 = grp_precompute_conv12_halo_fu_110_grp_fu_293_p_din1;
    end else begin
        grp_fu_293_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_fu_297_ce = grp_conv3_from_precomputed_conv2_fu_128_grp_fu_297_p_ce;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_297_ce = grp_precompute_conv12_halo_fu_110_grp_fu_297_p_ce;
    end else begin
        grp_fu_297_ce = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_fu_297_p0 = grp_conv3_from_precomputed_conv2_fu_128_grp_fu_297_p_din0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_297_p0 = grp_precompute_conv12_halo_fu_110_grp_fu_297_p_din0;
    end else begin
        grp_fu_297_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_fu_297_p1 = grp_conv3_from_precomputed_conv2_fu_128_grp_fu_297_p_din1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_297_p1 = grp_precompute_conv12_halo_fu_110_grp_fu_297_p_din1;
    end else begin
        grp_fu_297_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        patch_address0 = grp_precompute_conv12_halo_fu_110_patch_address0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        patch_address0 = grp_load_patch_tile_fu_99_patch_address0;
    end else begin
        patch_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        patch_ce0 = grp_precompute_conv12_halo_fu_110_patch_ce0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        patch_ce0 = grp_load_patch_tile_fu_99_patch_ce0;
    end else begin
        patch_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        patch_we0 = grp_load_patch_tile_fu_99_patch_we0;
    end else begin
        patch_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln239_fu_150_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln242_fu_188_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (grp_load_patch_tile_fu_99_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (grp_precompute_conv12_halo_fu_110_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            if (((1'b1 == ap_CS_fsm_state8) & (grp_conv3_from_precomputed_conv2_fu_128_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign conv1_biases_address0 = grp_precompute_conv12_halo_fu_110_conv1_biases_address0;

assign conv1_biases_ce0 = grp_precompute_conv12_halo_fu_110_conv1_biases_ce0;

assign conv1_weights_address0 = grp_precompute_conv12_halo_fu_110_conv1_weights_address0;

assign conv1_weights_ce0 = grp_precompute_conv12_halo_fu_110_conv1_weights_ce0;

assign conv2_biases_address0 = grp_precompute_conv12_halo_fu_110_conv2_biases_address0;

assign conv2_biases_ce0 = grp_precompute_conv12_halo_fu_110_conv2_biases_ce0;

assign conv2_weights_address0 = grp_precompute_conv12_halo_fu_110_conv2_weights_address0;

assign conv2_weights_ce0 = grp_precompute_conv12_halo_fu_110_conv2_weights_ce0;

assign conv3_weights_address0 = grp_conv3_from_precomputed_conv2_fu_128_conv3_weights_address0;

assign conv3_weights_ce0 = grp_conv3_from_precomputed_conv2_fu_128_conv3_weights_ce0;

assign empty_fu_232_p1 = conv3_biases;

assign grp_conv3_from_precomputed_conv2_fu_128_ap_start = grp_conv3_from_precomputed_conv2_fu_128_ap_start_reg;

assign grp_load_patch_tile_fu_99_ap_start = grp_load_patch_tile_fu_99_ap_start_reg;

assign grp_precompute_conv12_halo_fu_110_ap_start = grp_precompute_conv12_halo_fu_110_ap_start_reg;

assign h0_3_fu_156_p2 = (h0_fu_70 + 9'd64);

assign icmp_ln239_fu_150_p2 = ((h0_fu_70 < 9'd255) ? 1'b1 : 1'b0);

assign icmp_ln242_fu_188_p2 = ((w0_reg_88 < 9'd255) ? 1'b1 : 1'b0);

assign input_ftmap_address0 = grp_load_patch_tile_fu_99_input_ftmap_address0;

assign input_ftmap_ce0 = grp_load_patch_tile_fu_99_input_ftmap_ce0;

assign output_ftmap_address0 = grp_conv3_from_precomputed_conv2_fu_128_output_ftmap_address0;

assign output_ftmap_ce0 = grp_conv3_from_precomputed_conv2_fu_128_output_ftmap_ce0;

assign output_ftmap_d0 = grp_conv3_from_precomputed_conv2_fu_128_output_ftmap_d0;

assign output_ftmap_we0 = grp_conv3_from_precomputed_conv2_fu_128_output_ftmap_we0;

assign th_eff_fu_180_p3 = ((tmp_fu_162_p3[0:0] == 1'b1) ? xor_ln240_fu_174_p2 : 8'd64);

assign tmp_1_fu_200_p3 = w0_1_fu_194_p2[32'd8];

assign tmp_fu_162_p3 = h0_3_fu_156_p2[32'd8];

assign trunc_ln239_fu_170_p1 = h0_fu_70[7:0];

assign trunc_ln242_fu_208_p1 = w0_reg_88[7:0];

assign tw_eff_fu_219_p3 = ((tmp_1_fu_200_p3[0:0] == 1'b1) ? xor_ln243_fu_213_p2 : 8'd64);

assign w0_1_fu_194_p2 = (w0_reg_88 + 9'd64);

assign xor_ln240_fu_174_p2 = (trunc_ln239_fu_170_p1 ^ 8'd255);

assign xor_ln243_fu_213_p2 = (trunc_ln242_fu_208_p1 ^ 8'd255);

endmodule //srcnn
