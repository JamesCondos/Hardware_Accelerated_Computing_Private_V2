// ==============================================================
// Generated by Vitis HLS v2023.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module srcnn_load_patch_tile_Pipeline_VITIS_LOOP_50_1_VITIS_LOOP_51_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        tmp_cast,
        h0_cast,
        bound,
        add_ln50_1,
        patch_address0,
        patch_ce0,
        patch_we0,
        patch_d0,
        zext_ln50,
        w0_cast3,
        input_ftmap_address0,
        input_ftmap_ce0,
        input_ftmap_q0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [8:0] tmp_cast;
input  [7:0] h0_cast;
input  [16:0] bound;
input  [8:0] add_ln50_1;
output  [12:0] patch_address0;
output   patch_ce0;
output   patch_we0;
output  [31:0] patch_d0;
input  [7:0] zext_ln50;
input  [7:0] w0_cast3;
output  [15:0] input_ftmap_address0;
output   input_ftmap_ce0;
input  [31:0] input_ftmap_q0;

reg ap_idle;
reg patch_ce0;
reg patch_we0;
reg input_ftmap_ce0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln50_fu_247_p2;
reg    ap_condition_exit_pp0_iter1_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
wire   [10:0] w0_cast3_cast_fu_154_p1;
reg   [10:0] w0_cast3_cast_reg_550;
wire   [8:0] zext_ln50_cast_fu_158_p1;
reg   [8:0] zext_ln50_cast_reg_555;
wire  signed [10:0] tmp_cast_cast_fu_162_p1;
reg  signed [10:0] tmp_cast_cast_reg_560;
wire   [8:0] select_ln50_fu_272_p3;
reg   [8:0] select_ln50_reg_570;
reg   [8:0] select_ln50_reg_570_pp0_iter2_reg;
wire   [7:0] select_ln50_2_fu_352_p3;
reg   [7:0] select_ln50_2_reg_582;
reg   [7:0] select_ln50_2_reg_582_pp0_iter2_reg;
wire   [63:0] zext_ln56_3_fu_490_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln56_2_fu_495_p1;
reg   [8:0] px_fu_80;
wire   [8:0] add_ln51_fu_360_p2;
wire    ap_loop_init;
reg   [8:0] py_fu_84;
wire   [8:0] select_ln50_1_fu_280_p3;
reg   [16:0] indvar_flatten_fu_88;
wire   [16:0] add_ln50_2_fu_252_p2;
wire   [10:0] zext_ln50_1_fu_187_p1;
wire   [10:0] empty_21_fu_195_p2;
wire   [7:0] empty_fu_191_p1;
wire   [7:0] add_ln26_8_fu_214_p2;
wire   [0:0] tmp_fu_200_p3;
wire   [0:0] icmp_ln26_fu_208_p2;
wire   [0:0] or_ln26_fu_233_p2;
wire   [7:0] select_ln26_fu_225_p3;
wire   [7:0] add_ln26_fu_220_p2;
wire   [0:0] icmp_ln51_fu_267_p2;
wire   [8:0] add_ln50_fu_261_p2;
wire   [10:0] zext_ln50_3_fu_292_p1;
wire   [10:0] p_mid1_fu_300_p2;
wire   [7:0] empty_22_fu_296_p1;
wire   [7:0] add_ln26_10_fu_319_p2;
wire   [0:0] tmp_9_fu_305_p3;
wire   [0:0] icmp_ln26_4_fu_313_p2;
wire   [0:0] or_ln26_5_fu_338_p2;
wire   [7:0] select_ln26_11_fu_330_p3;
wire   [7:0] add_ln26_11_fu_325_p2;
wire   [7:0] select_ln26_12_fu_344_p3;
wire   [7:0] yy_fu_239_p3;
wire   [15:0] tmp_6_fu_384_p3;
wire   [15:0] zext_ln56_fu_381_p1;
wire   [8:0] add_ln54_fu_406_p2;
wire  signed [10:0] sext_ln54_fu_411_p1;
wire   [10:0] zext_ln51_fu_400_p1;
wire   [10:0] add_ln54_1_fu_415_p2;
wire   [9:0] zext_ln54_fu_403_p1;
wire   [9:0] add_ln26_9_fu_435_p2;
wire  signed [10:0] sext_ln26_fu_441_p1;
wire   [0:0] tmp_11_fu_450_p3;
wire   [0:0] tmp_10_fu_421_p3;
wire   [0:0] icmp_ln26_5_fu_429_p2;
wire   [0:0] or_ln26_4_fu_466_p2;
wire   [10:0] select_ln26_13_fu_458_p3;
wire   [10:0] add_ln26_4_fu_445_p2;
wire   [10:0] xx_fu_472_p3;
wire   [15:0] sub_ln56_fu_391_p2;
wire  signed [15:0] sext_ln56_fu_480_p1;
wire   [15:0] add_ln56_1_fu_484_p2;
wire   [12:0] grp_fu_504_p3;
wire   [8:0] grp_fu_504_p0;
wire   [6:0] grp_fu_504_p1;
wire   [8:0] grp_fu_504_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire   [12:0] grp_fu_504_p00;
wire   [12:0] grp_fu_504_p20;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_done_reg = 1'b0;
end

srcnn_mac_muladd_9ns_7ns_9ns_13_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 7 ),
    .din2_WIDTH( 9 ),
    .dout_WIDTH( 13 ))
mac_muladd_9ns_7ns_9ns_13_4_1_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_504_p0),
    .din1(grp_fu_504_p1),
    .din2(grp_fu_504_p2),
    .ce(1'b1),
    .dout(grp_fu_504_p3)
);

srcnn_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter1_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter3_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_88 <= 17'd0;
        end else if (((icmp_ln50_fu_247_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            indvar_flatten_fu_88 <= add_ln50_2_fu_252_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            px_fu_80 <= 9'd0;
        end else if (((icmp_ln50_fu_247_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            px_fu_80 <= add_ln51_fu_360_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            py_fu_84 <= 9'd0;
        end else if (((icmp_ln50_fu_247_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            py_fu_84 <= select_ln50_1_fu_280_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
        tmp_cast_cast_reg_560 <= tmp_cast_cast_fu_162_p1;
        w0_cast3_cast_reg_550[7 : 0] <= w0_cast3_cast_fu_154_p1[7 : 0];
        zext_ln50_cast_reg_555[7 : 0] <= zext_ln50_cast_fu_158_p1[7 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        select_ln50_2_reg_582_pp0_iter2_reg <= select_ln50_2_reg_582;
        select_ln50_reg_570_pp0_iter2_reg <= select_ln50_reg_570;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln50_fu_247_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        select_ln50_2_reg_582 <= select_ln50_2_fu_352_p3;
        select_ln50_reg_570 <= select_ln50_fu_272_p3;
    end
end

always @ (*) begin
    if (((icmp_ln50_fu_247_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter3_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        input_ftmap_ce0 = 1'b1;
    end else begin
        input_ftmap_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        patch_ce0 = 1'b1;
    end else begin
        patch_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        patch_we0 = 1'b1;
    end else begin
        patch_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln26_10_fu_319_p2 = ($signed(empty_22_fu_296_p1) + $signed(8'd250));

assign add_ln26_11_fu_325_p2 = (add_ln26_10_fu_319_p2 + h0_cast);

assign add_ln26_4_fu_445_p2 = ($signed(sext_ln26_fu_441_p1) + $signed(w0_cast3_cast_reg_550));

assign add_ln26_8_fu_214_p2 = ($signed(empty_fu_191_p1) + $signed(8'd250));

assign add_ln26_9_fu_435_p2 = ($signed(zext_ln54_fu_403_p1) + $signed(10'd1018));

assign add_ln26_fu_220_p2 = (add_ln26_8_fu_214_p2 + h0_cast);

assign add_ln50_2_fu_252_p2 = (indvar_flatten_fu_88 + 17'd1);

assign add_ln50_fu_261_p2 = (py_fu_84 + 9'd1);

assign add_ln51_fu_360_p2 = (select_ln50_fu_272_p3 + 9'd1);

assign add_ln54_1_fu_415_p2 = ($signed(sext_ln54_fu_411_p1) + $signed(zext_ln51_fu_400_p1));

assign add_ln54_fu_406_p2 = ($signed(zext_ln50_cast_reg_555) + $signed(9'd506));

assign add_ln56_1_fu_484_p2 = ($signed(sub_ln56_fu_391_p2) + $signed(sext_ln56_fu_480_p1));

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter1_stage0;

assign empty_21_fu_195_p2 = ($signed(tmp_cast_cast_reg_560) + $signed(zext_ln50_1_fu_187_p1));

assign empty_22_fu_296_p1 = add_ln50_fu_261_p2[7:0];

assign empty_fu_191_p1 = py_fu_84[7:0];

assign grp_fu_504_p0 = grp_fu_504_p00;

assign grp_fu_504_p00 = select_ln50_1_fu_280_p3;

assign grp_fu_504_p1 = 13'd76;

assign grp_fu_504_p2 = grp_fu_504_p20;

assign grp_fu_504_p20 = select_ln50_reg_570_pp0_iter2_reg;

assign icmp_ln26_4_fu_313_p2 = (($signed(p_mid1_fu_300_p2) > $signed(11'd254)) ? 1'b1 : 1'b0);

assign icmp_ln26_5_fu_429_p2 = (($signed(add_ln54_1_fu_415_p2) > $signed(11'd254)) ? 1'b1 : 1'b0);

assign icmp_ln26_fu_208_p2 = (($signed(empty_21_fu_195_p2) > $signed(11'd254)) ? 1'b1 : 1'b0);

assign icmp_ln50_fu_247_p2 = ((indvar_flatten_fu_88 == bound) ? 1'b1 : 1'b0);

assign icmp_ln51_fu_267_p2 = ((px_fu_80 == add_ln50_1) ? 1'b1 : 1'b0);

assign input_ftmap_address0 = zext_ln56_3_fu_490_p1;

assign or_ln26_4_fu_466_p2 = (tmp_10_fu_421_p3 | icmp_ln26_5_fu_429_p2);

assign or_ln26_5_fu_338_p2 = (tmp_9_fu_305_p3 | icmp_ln26_4_fu_313_p2);

assign or_ln26_fu_233_p2 = (tmp_fu_200_p3 | icmp_ln26_fu_208_p2);

assign p_mid1_fu_300_p2 = ($signed(tmp_cast_cast_reg_560) + $signed(zext_ln50_3_fu_292_p1));

assign patch_address0 = zext_ln56_2_fu_495_p1;

assign patch_d0 = input_ftmap_q0;

assign select_ln26_11_fu_330_p3 = ((tmp_9_fu_305_p3[0:0] == 1'b1) ? 8'd0 : 8'd254);

assign select_ln26_12_fu_344_p3 = ((or_ln26_5_fu_338_p2[0:0] == 1'b1) ? select_ln26_11_fu_330_p3 : add_ln26_11_fu_325_p2);

assign select_ln26_13_fu_458_p3 = ((tmp_11_fu_450_p3[0:0] == 1'b1) ? 11'd0 : 11'd254);

assign select_ln26_fu_225_p3 = ((tmp_fu_200_p3[0:0] == 1'b1) ? 8'd0 : 8'd254);

assign select_ln50_1_fu_280_p3 = ((icmp_ln51_fu_267_p2[0:0] == 1'b1) ? add_ln50_fu_261_p2 : py_fu_84);

assign select_ln50_2_fu_352_p3 = ((icmp_ln51_fu_267_p2[0:0] == 1'b1) ? select_ln26_12_fu_344_p3 : yy_fu_239_p3);

assign select_ln50_fu_272_p3 = ((icmp_ln51_fu_267_p2[0:0] == 1'b1) ? 9'd0 : px_fu_80);

assign sext_ln26_fu_441_p1 = $signed(add_ln26_9_fu_435_p2);

assign sext_ln54_fu_411_p1 = $signed(add_ln54_fu_406_p2);

assign sext_ln56_fu_480_p1 = $signed(xx_fu_472_p3);

assign sub_ln56_fu_391_p2 = (tmp_6_fu_384_p3 - zext_ln56_fu_381_p1);

assign tmp_10_fu_421_p3 = add_ln54_1_fu_415_p2[32'd10];

assign tmp_11_fu_450_p3 = add_ln54_1_fu_415_p2[32'd10];

assign tmp_6_fu_384_p3 = {{select_ln50_2_reg_582_pp0_iter2_reg}, {8'd0}};

assign tmp_9_fu_305_p3 = p_mid1_fu_300_p2[32'd10];

assign tmp_cast_cast_fu_162_p1 = $signed(tmp_cast);

assign tmp_fu_200_p3 = empty_21_fu_195_p2[32'd10];

assign w0_cast3_cast_fu_154_p1 = w0_cast3;

assign xx_fu_472_p3 = ((or_ln26_4_fu_466_p2[0:0] == 1'b1) ? select_ln26_13_fu_458_p3 : add_ln26_4_fu_445_p2);

assign yy_fu_239_p3 = ((or_ln26_fu_233_p2[0:0] == 1'b1) ? select_ln26_fu_225_p3 : add_ln26_fu_220_p2);

assign zext_ln50_1_fu_187_p1 = py_fu_84;

assign zext_ln50_3_fu_292_p1 = add_ln50_fu_261_p2;

assign zext_ln50_cast_fu_158_p1 = zext_ln50;

assign zext_ln51_fu_400_p1 = select_ln50_reg_570_pp0_iter2_reg;

assign zext_ln54_fu_403_p1 = select_ln50_reg_570_pp0_iter2_reg;

assign zext_ln56_2_fu_495_p1 = grp_fu_504_p3;

assign zext_ln56_3_fu_490_p1 = add_ln56_1_fu_484_p2;

assign zext_ln56_fu_381_p1 = select_ln50_2_reg_582_pp0_iter2_reg;

always @ (posedge ap_clk) begin
    w0_cast3_cast_reg_550[10:8] <= 3'b000;
    zext_ln50_cast_reg_555[8] <= 1'b0;
end

endmodule //srcnn_load_patch_tile_Pipeline_VITIS_LOOP_50_1_VITIS_LOOP_51_2
