// ==============================================================
// Generated by Vitis HLS v2023.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module srcnn_conv2_single_from_c1_Pipeline_VITIS_LOOP_108_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        acc,
        wrow_reload,
        wrow_1_reload,
        wrow_2_reload,
        wrow_3_reload,
        wrow_4_reload,
        wrow_5_reload,
        wrow_6_reload,
        wrow_7_reload,
        wrow_8_reload,
        wrow_9_reload,
        wrow_10_reload,
        wrow_11_reload,
        wrow_12_reload,
        wrow_13_reload,
        wrow_14_reload,
        wrow_15_reload,
        wrow_16_reload,
        wrow_17_reload,
        wrow_18_reload,
        wrow_19_reload,
        wrow_20_reload,
        wrow_21_reload,
        wrow_22_reload,
        wrow_23_reload,
        wrow_24_reload,
        wrow_25_reload,
        wrow_26_reload,
        wrow_27_reload,
        wrow_28_reload,
        wrow_29_reload,
        wrow_30_reload,
        wrow_31_reload,
        wrow_32_reload,
        wrow_33_reload,
        wrow_34_reload,
        wrow_35_reload,
        wrow_36_reload,
        wrow_37_reload,
        wrow_38_reload,
        wrow_39_reload,
        wrow_40_reload,
        wrow_41_reload,
        wrow_42_reload,
        wrow_43_reload,
        wrow_44_reload,
        wrow_45_reload,
        wrow_46_reload,
        wrow_47_reload,
        wrow_48_reload,
        wrow_49_reload,
        wrow_50_reload,
        wrow_51_reload,
        wrow_52_reload,
        wrow_53_reload,
        wrow_54_reload,
        wrow_55_reload,
        wrow_56_reload,
        wrow_57_reload,
        wrow_58_reload,
        wrow_59_reload,
        wrow_60_reload,
        wrow_61_reload,
        wrow_62_reload,
        wrow_63_reload,
        c1_vec_address0,
        c1_vec_ce0,
        c1_vec_q0,
        acc_1_out,
        acc_1_out_ap_vld,
        grp_fu_1433_p_din0,
        grp_fu_1433_p_din1,
        grp_fu_1433_p_opcode,
        grp_fu_1433_p_dout0,
        grp_fu_1433_p_ce,
        grp_fu_1437_p_din0,
        grp_fu_1437_p_din1,
        grp_fu_1437_p_dout0,
        grp_fu_1437_p_ce
);

parameter    ap_ST_fsm_pp0_stage0 = 6'd1;
parameter    ap_ST_fsm_pp0_stage1 = 6'd2;
parameter    ap_ST_fsm_pp0_stage2 = 6'd4;
parameter    ap_ST_fsm_pp0_stage3 = 6'd8;
parameter    ap_ST_fsm_pp0_stage4 = 6'd16;
parameter    ap_ST_fsm_pp0_stage5 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] acc;
input  [31:0] wrow_reload;
input  [31:0] wrow_1_reload;
input  [31:0] wrow_2_reload;
input  [31:0] wrow_3_reload;
input  [31:0] wrow_4_reload;
input  [31:0] wrow_5_reload;
input  [31:0] wrow_6_reload;
input  [31:0] wrow_7_reload;
input  [31:0] wrow_8_reload;
input  [31:0] wrow_9_reload;
input  [31:0] wrow_10_reload;
input  [31:0] wrow_11_reload;
input  [31:0] wrow_12_reload;
input  [31:0] wrow_13_reload;
input  [31:0] wrow_14_reload;
input  [31:0] wrow_15_reload;
input  [31:0] wrow_16_reload;
input  [31:0] wrow_17_reload;
input  [31:0] wrow_18_reload;
input  [31:0] wrow_19_reload;
input  [31:0] wrow_20_reload;
input  [31:0] wrow_21_reload;
input  [31:0] wrow_22_reload;
input  [31:0] wrow_23_reload;
input  [31:0] wrow_24_reload;
input  [31:0] wrow_25_reload;
input  [31:0] wrow_26_reload;
input  [31:0] wrow_27_reload;
input  [31:0] wrow_28_reload;
input  [31:0] wrow_29_reload;
input  [31:0] wrow_30_reload;
input  [31:0] wrow_31_reload;
input  [31:0] wrow_32_reload;
input  [31:0] wrow_33_reload;
input  [31:0] wrow_34_reload;
input  [31:0] wrow_35_reload;
input  [31:0] wrow_36_reload;
input  [31:0] wrow_37_reload;
input  [31:0] wrow_38_reload;
input  [31:0] wrow_39_reload;
input  [31:0] wrow_40_reload;
input  [31:0] wrow_41_reload;
input  [31:0] wrow_42_reload;
input  [31:0] wrow_43_reload;
input  [31:0] wrow_44_reload;
input  [31:0] wrow_45_reload;
input  [31:0] wrow_46_reload;
input  [31:0] wrow_47_reload;
input  [31:0] wrow_48_reload;
input  [31:0] wrow_49_reload;
input  [31:0] wrow_50_reload;
input  [31:0] wrow_51_reload;
input  [31:0] wrow_52_reload;
input  [31:0] wrow_53_reload;
input  [31:0] wrow_54_reload;
input  [31:0] wrow_55_reload;
input  [31:0] wrow_56_reload;
input  [31:0] wrow_57_reload;
input  [31:0] wrow_58_reload;
input  [31:0] wrow_59_reload;
input  [31:0] wrow_60_reload;
input  [31:0] wrow_61_reload;
input  [31:0] wrow_62_reload;
input  [31:0] wrow_63_reload;
output  [5:0] c1_vec_address0;
output   c1_vec_ce0;
input  [31:0] c1_vec_q0;
output  [31:0] acc_1_out;
output   acc_1_out_ap_vld;
output  [31:0] grp_fu_1433_p_din0;
output  [31:0] grp_fu_1433_p_din1;
output  [1:0] grp_fu_1433_p_opcode;
input  [31:0] grp_fu_1433_p_dout0;
output   grp_fu_1433_p_ce;
output  [31:0] grp_fu_1437_p_din0;
output  [31:0] grp_fu_1437_p_din1;
input  [31:0] grp_fu_1437_p_dout0;
output   grp_fu_1437_p_ce;

reg ap_idle;
reg c1_vec_ce0;
reg acc_1_out_ap_vld;

(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_state3_pp0_stage2_iter0;
wire    ap_block_state9_pp0_stage2_iter1;
wire    ap_block_pp0_stage2_subdone;
reg   [0:0] icmp_ln108_reg_814;
reg    ap_condition_exit_pp0_iter0_stage2;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_CS_fsm_pp0_stage5;
wire    ap_block_state6_pp0_stage5_iter0;
wire    ap_block_pp0_stage5_subdone;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state7_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln108_fu_611_p2;
wire   [31:0] a_assign_fu_632_p66;
reg   [31:0] a_assign_reg_818;
reg   [31:0] c1_vec_load_reg_828;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state2_pp0_stage1_iter0;
wire    ap_block_state8_pp0_stage1_iter1;
wire    ap_block_pp0_stage1_11001;
wire    ap_block_pp0_stage5_11001;
reg    ap_enable_reg_pp0_iter0_reg;
wire   [63:0] zext_ln108_fu_623_p1;
wire    ap_block_pp0_stage0;
reg   [31:0] acc_1_fu_168;
wire    ap_block_pp0_stage2_11001;
wire    ap_block_pp0_stage2;
wire    ap_loop_init;
wire    ap_block_pp0_stage5;
reg   [6:0] c1_fu_172;
wire   [6:0] add_ln108_fu_617_p2;
reg   [6:0] ap_sig_allocacmp_c1_1;
reg   [31:0] p_3_fu_176;
wire    ap_CS_fsm_pp0_stage4;
wire    ap_block_state5_pp0_stage4_iter0;
wire    ap_block_pp0_stage4_11001;
wire    ap_block_pp0_stage2_01001;
wire   [5:0] a_assign_fu_632_p65;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [5:0] ap_NS_fsm;
wire    ap_block_pp0_stage0_subdone;
reg    ap_idle_pp0_1to1;
wire    ap_block_pp0_stage1_subdone;
wire    ap_block_state4_pp0_stage3_iter0;
wire    ap_block_pp0_stage3_subdone;
wire    ap_block_pp0_stage4_subdone;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_block_pp0_stage5_00001;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 ap_done_reg = 1'b0;
end

srcnn_mux_64_6_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 32 ),
    .din9_WIDTH( 32 ),
    .din10_WIDTH( 32 ),
    .din11_WIDTH( 32 ),
    .din12_WIDTH( 32 ),
    .din13_WIDTH( 32 ),
    .din14_WIDTH( 32 ),
    .din15_WIDTH( 32 ),
    .din16_WIDTH( 32 ),
    .din17_WIDTH( 32 ),
    .din18_WIDTH( 32 ),
    .din19_WIDTH( 32 ),
    .din20_WIDTH( 32 ),
    .din21_WIDTH( 32 ),
    .din22_WIDTH( 32 ),
    .din23_WIDTH( 32 ),
    .din24_WIDTH( 32 ),
    .din25_WIDTH( 32 ),
    .din26_WIDTH( 32 ),
    .din27_WIDTH( 32 ),
    .din28_WIDTH( 32 ),
    .din29_WIDTH( 32 ),
    .din30_WIDTH( 32 ),
    .din31_WIDTH( 32 ),
    .din32_WIDTH( 32 ),
    .din33_WIDTH( 32 ),
    .din34_WIDTH( 32 ),
    .din35_WIDTH( 32 ),
    .din36_WIDTH( 32 ),
    .din37_WIDTH( 32 ),
    .din38_WIDTH( 32 ),
    .din39_WIDTH( 32 ),
    .din40_WIDTH( 32 ),
    .din41_WIDTH( 32 ),
    .din42_WIDTH( 32 ),
    .din43_WIDTH( 32 ),
    .din44_WIDTH( 32 ),
    .din45_WIDTH( 32 ),
    .din46_WIDTH( 32 ),
    .din47_WIDTH( 32 ),
    .din48_WIDTH( 32 ),
    .din49_WIDTH( 32 ),
    .din50_WIDTH( 32 ),
    .din51_WIDTH( 32 ),
    .din52_WIDTH( 32 ),
    .din53_WIDTH( 32 ),
    .din54_WIDTH( 32 ),
    .din55_WIDTH( 32 ),
    .din56_WIDTH( 32 ),
    .din57_WIDTH( 32 ),
    .din58_WIDTH( 32 ),
    .din59_WIDTH( 32 ),
    .din60_WIDTH( 32 ),
    .din61_WIDTH( 32 ),
    .din62_WIDTH( 32 ),
    .din63_WIDTH( 32 ),
    .din64_WIDTH( 6 ),
    .dout_WIDTH( 32 ))
mux_64_6_32_1_1_U102(
    .din0(wrow_reload),
    .din1(wrow_1_reload),
    .din2(wrow_2_reload),
    .din3(wrow_3_reload),
    .din4(wrow_4_reload),
    .din5(wrow_5_reload),
    .din6(wrow_6_reload),
    .din7(wrow_7_reload),
    .din8(wrow_8_reload),
    .din9(wrow_9_reload),
    .din10(wrow_10_reload),
    .din11(wrow_11_reload),
    .din12(wrow_12_reload),
    .din13(wrow_13_reload),
    .din14(wrow_14_reload),
    .din15(wrow_15_reload),
    .din16(wrow_16_reload),
    .din17(wrow_17_reload),
    .din18(wrow_18_reload),
    .din19(wrow_19_reload),
    .din20(wrow_20_reload),
    .din21(wrow_21_reload),
    .din22(wrow_22_reload),
    .din23(wrow_23_reload),
    .din24(wrow_24_reload),
    .din25(wrow_25_reload),
    .din26(wrow_26_reload),
    .din27(wrow_27_reload),
    .din28(wrow_28_reload),
    .din29(wrow_29_reload),
    .din30(wrow_30_reload),
    .din31(wrow_31_reload),
    .din32(wrow_32_reload),
    .din33(wrow_33_reload),
    .din34(wrow_34_reload),
    .din35(wrow_35_reload),
    .din36(wrow_36_reload),
    .din37(wrow_37_reload),
    .din38(wrow_38_reload),
    .din39(wrow_39_reload),
    .din40(wrow_40_reload),
    .din41(wrow_41_reload),
    .din42(wrow_42_reload),
    .din43(wrow_43_reload),
    .din44(wrow_44_reload),
    .din45(wrow_45_reload),
    .din46(wrow_46_reload),
    .din47(wrow_47_reload),
    .din48(wrow_48_reload),
    .din49(wrow_49_reload),
    .din50(wrow_50_reload),
    .din51(wrow_51_reload),
    .din52(wrow_52_reload),
    .din53(wrow_53_reload),
    .din54(wrow_54_reload),
    .din55(wrow_55_reload),
    .din56(wrow_56_reload),
    .din57(wrow_57_reload),
    .din58(wrow_58_reload),
    .din59(wrow_59_reload),
    .din60(wrow_60_reload),
    .din61(wrow_61_reload),
    .din62(wrow_62_reload),
    .din63(wrow_63_reload),
    .din64(a_assign_fu_632_p65),
    .dout(a_assign_fu_632_p66)
);

srcnn_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage2),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage2)) begin
            ap_enable_reg_pp0_iter0_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage2_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage5_subdone) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        acc_1_fu_168 <= acc;
    end else if (((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        acc_1_fu_168 <= grp_fu_1433_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln108_fu_611_p2 == 1'd0))) begin
            c1_fu_172 <= add_ln108_fu_617_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            c1_fu_172 <= 7'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln108_fu_611_p2 == 1'd0))) begin
        a_assign_reg_818 <= a_assign_fu_632_p66;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln108_reg_814 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        c1_vec_load_reg_828 <= c1_vec_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln108_reg_814 <= icmp_ln108_fu_611_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln108_reg_814 == 1'd0) & (1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        p_3_fu_176 <= grp_fu_1437_p_dout0;
    end
end

always @ (*) begin
    if (((icmp_ln108_reg_814 == 1'd1) & (1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        acc_1_out_ap_vld = 1'b1;
    end else begin
        acc_1_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln108_reg_814 == 1'd1) & (1'b0 == ap_block_pp0_stage2_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        ap_condition_exit_pp0_iter0_stage2 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage2 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b0)) begin
        ap_idle_pp0_1to1 = 1'b1;
    end else begin
        ap_idle_pp0_1to1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage5_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_c1_1 = 7'd0;
    end else begin
        ap_sig_allocacmp_c1_1 = c1_fu_172;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        c1_vec_ce0 = 1'b1;
    end else begin
        c1_vec_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to1 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b1 == ap_condition_exit_pp0_iter0_stage2)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((1'b0 == ap_block_pp0_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_pp0_stage5 : begin
            if ((1'b0 == ap_block_pp0_stage5_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign a_assign_fu_632_p65 = ap_sig_allocacmp_c1_1[5:0];

assign acc_1_out = acc_1_fu_168;

assign add_ln108_fu_617_p2 = (ap_sig_allocacmp_c1_1 + 7'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp0_stage5 = ap_CS_fsm[32'd5];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage5_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage2;

assign c1_vec_address0 = zext_ln108_fu_623_p1;

assign grp_fu_1433_p_ce = 1'b1;

assign grp_fu_1433_p_din0 = acc_1_fu_168;

assign grp_fu_1433_p_din1 = p_3_fu_176;

assign grp_fu_1433_p_opcode = 2'd0;

assign grp_fu_1437_p_ce = 1'b1;

assign grp_fu_1437_p_din0 = a_assign_reg_818;

assign grp_fu_1437_p_din1 = c1_vec_load_reg_828;

assign icmp_ln108_fu_611_p2 = ((ap_sig_allocacmp_c1_1 == 7'd64) ? 1'b1 : 1'b0);

assign zext_ln108_fu_623_p1 = ap_sig_allocacmp_c1_1;

endmodule //srcnn_conv2_single_from_c1_Pipeline_VITIS_LOOP_108_2
