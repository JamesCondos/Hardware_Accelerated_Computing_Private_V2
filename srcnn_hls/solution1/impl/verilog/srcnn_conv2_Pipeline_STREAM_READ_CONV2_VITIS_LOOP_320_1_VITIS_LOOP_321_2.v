// ==============================================================
// Generated by Vitis HLS v2023.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module srcnn_conv2_Pipeline_STREAM_READ_CONV2_VITIS_LOOP_320_1_VITIS_LOOP_321_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        conv1_to_conv2_dout,
        conv1_to_conv2_num_data_valid,
        conv1_to_conv2_fifo_cap,
        conv1_to_conv2_empty_n,
        conv1_to_conv2_read,
        input_tile_address0,
        input_tile_ce0,
        input_tile_we0,
        input_tile_d0,
        input_tile_1_address0,
        input_tile_1_ce0,
        input_tile_1_we0,
        input_tile_1_d0,
        input_tile_2_address0,
        input_tile_2_ce0,
        input_tile_2_we0,
        input_tile_2_d0,
        input_tile_3_address0,
        input_tile_3_ce0,
        input_tile_3_we0,
        input_tile_3_d0,
        input_tile_4_address0,
        input_tile_4_ce0,
        input_tile_4_we0,
        input_tile_4_d0,
        input_tile_5_address0,
        input_tile_5_ce0,
        input_tile_5_we0,
        input_tile_5_d0,
        input_tile_6_address0,
        input_tile_6_ce0,
        input_tile_6_we0,
        input_tile_6_d0,
        input_tile_7_address0,
        input_tile_7_ce0,
        input_tile_7_we0,
        input_tile_7_d0,
        input_tile_8_address0,
        input_tile_8_ce0,
        input_tile_8_we0,
        input_tile_8_d0,
        input_tile_9_address0,
        input_tile_9_ce0,
        input_tile_9_we0,
        input_tile_9_d0,
        input_tile_10_address0,
        input_tile_10_ce0,
        input_tile_10_we0,
        input_tile_10_d0,
        input_tile_11_address0,
        input_tile_11_ce0,
        input_tile_11_we0,
        input_tile_11_d0,
        input_tile_12_address0,
        input_tile_12_ce0,
        input_tile_12_we0,
        input_tile_12_d0,
        input_tile_13_address0,
        input_tile_13_ce0,
        input_tile_13_we0,
        input_tile_13_d0,
        input_tile_14_address0,
        input_tile_14_ce0,
        input_tile_14_we0,
        input_tile_14_d0,
        input_tile_15_address0,
        input_tile_15_ce0,
        input_tile_15_we0,
        input_tile_15_d0,
        input_tile_16_address0,
        input_tile_16_ce0,
        input_tile_16_we0,
        input_tile_16_d0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] conv1_to_conv2_dout;
input  [9:0] conv1_to_conv2_num_data_valid;
input  [9:0] conv1_to_conv2_fifo_cap;
input   conv1_to_conv2_empty_n;
output   conv1_to_conv2_read;
output  [10:0] input_tile_address0;
output   input_tile_ce0;
output   input_tile_we0;
output  [31:0] input_tile_d0;
output  [10:0] input_tile_1_address0;
output   input_tile_1_ce0;
output   input_tile_1_we0;
output  [31:0] input_tile_1_d0;
output  [10:0] input_tile_2_address0;
output   input_tile_2_ce0;
output   input_tile_2_we0;
output  [31:0] input_tile_2_d0;
output  [10:0] input_tile_3_address0;
output   input_tile_3_ce0;
output   input_tile_3_we0;
output  [31:0] input_tile_3_d0;
output  [10:0] input_tile_4_address0;
output   input_tile_4_ce0;
output   input_tile_4_we0;
output  [31:0] input_tile_4_d0;
output  [10:0] input_tile_5_address0;
output   input_tile_5_ce0;
output   input_tile_5_we0;
output  [31:0] input_tile_5_d0;
output  [10:0] input_tile_6_address0;
output   input_tile_6_ce0;
output   input_tile_6_we0;
output  [31:0] input_tile_6_d0;
output  [10:0] input_tile_7_address0;
output   input_tile_7_ce0;
output   input_tile_7_we0;
output  [31:0] input_tile_7_d0;
output  [10:0] input_tile_8_address0;
output   input_tile_8_ce0;
output   input_tile_8_we0;
output  [31:0] input_tile_8_d0;
output  [10:0] input_tile_9_address0;
output   input_tile_9_ce0;
output   input_tile_9_we0;
output  [31:0] input_tile_9_d0;
output  [10:0] input_tile_10_address0;
output   input_tile_10_ce0;
output   input_tile_10_we0;
output  [31:0] input_tile_10_d0;
output  [10:0] input_tile_11_address0;
output   input_tile_11_ce0;
output   input_tile_11_we0;
output  [31:0] input_tile_11_d0;
output  [10:0] input_tile_12_address0;
output   input_tile_12_ce0;
output   input_tile_12_we0;
output  [31:0] input_tile_12_d0;
output  [10:0] input_tile_13_address0;
output   input_tile_13_ce0;
output   input_tile_13_we0;
output  [31:0] input_tile_13_d0;
output  [10:0] input_tile_14_address0;
output   input_tile_14_ce0;
output   input_tile_14_we0;
output  [31:0] input_tile_14_d0;
output  [10:0] input_tile_15_address0;
output   input_tile_15_ce0;
output   input_tile_15_we0;
output  [31:0] input_tile_15_d0;
output  [10:0] input_tile_16_address0;
output   input_tile_16_ce0;
output   input_tile_16_we0;
output  [31:0] input_tile_16_d0;

reg ap_idle;
reg conv1_to_conv2_read;
reg input_tile_ce0;
reg input_tile_we0;
reg input_tile_1_ce0;
reg input_tile_1_we0;
reg input_tile_2_ce0;
reg input_tile_2_we0;
reg input_tile_3_ce0;
reg input_tile_3_we0;
reg input_tile_4_ce0;
reg input_tile_4_we0;
reg input_tile_5_ce0;
reg input_tile_5_we0;
reg input_tile_6_ce0;
reg input_tile_6_we0;
reg input_tile_7_ce0;
reg input_tile_7_we0;
reg input_tile_8_ce0;
reg input_tile_8_we0;
reg input_tile_9_ce0;
reg input_tile_9_we0;
reg input_tile_10_ce0;
reg input_tile_10_we0;
reg input_tile_11_ce0;
reg input_tile_11_we0;
reg input_tile_12_ce0;
reg input_tile_12_we0;
reg input_tile_13_ce0;
reg input_tile_13_we0;
reg input_tile_14_ce0;
reg input_tile_14_we0;
reg input_tile_15_ce0;
reg input_tile_15_we0;
reg input_tile_16_ce0;
reg input_tile_16_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
reg    ap_block_state2_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln319_fu_410_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    conv1_to_conv2_blk_n;
wire    ap_block_pp0_stage0;
wire   [0:0] icmp_ln320_fu_422_p2;
reg   [0:0] icmp_ln320_reg_654;
reg    ap_block_pp0_stage0_11001;
wire   [63:0] zext_ln322_2_fu_553_p1;
reg   [4:0] j_fu_132;
wire   [4:0] add_ln321_fu_595_p2;
wire    ap_loop_init;
reg   [4:0] i_fu_136;
wire   [4:0] select_ln320_1_fu_535_p3;
reg   [9:0] indvar_flatten_fu_140;
wire   [9:0] select_ln320_2_fu_434_p3;
reg   [9:0] ap_sig_allocacmp_indvar_flatten_load;
reg   [6:0] feat_fu_144;
wire   [6:0] select_ln319_1_fu_474_p3;
reg   [14:0] indvar_flatten29_fu_148;
wire   [14:0] add_ln319_1_fu_416_p2;
reg   [14:0] ap_sig_allocacmp_indvar_flatten29_load;
wire   [4:0] select_ln320_fu_527_p3;
wire   [31:0] bitcast_ln322_fu_574_p1;
wire   [9:0] add_ln320_1_fu_428_p2;
wire   [6:0] add_ln319_fu_461_p2;
wire   [10:0] tmp_s_fu_485_p3;
wire   [10:0] zext_ln322_fu_481_p1;
wire   [0:0] icmp_ln321_fu_504_p2;
wire   [0:0] xor_ln319_fu_499_p2;
wire   [4:0] select_ln319_fu_467_p3;
wire   [0:0] and_ln319_fu_510_p2;
wire   [0:0] or_ln320_fu_522_p2;
wire   [4:0] add_ln320_fu_516_p2;
wire   [10:0] add_ln322_fu_493_p2;
wire   [10:0] zext_ln322_1_fu_543_p1;
wire   [10:0] add_ln322_1_fu_547_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_done_reg = 1'b0;
end

srcnn_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            feat_fu_144 <= 7'd0;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            feat_fu_144 <= select_ln319_1_fu_474_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            i_fu_136 <= 5'd0;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            i_fu_136 <= select_ln320_1_fu_535_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln319_fu_410_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvar_flatten29_fu_148 <= add_ln319_1_fu_416_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten29_fu_148 <= 15'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln319_fu_410_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvar_flatten_fu_140 <= select_ln320_2_fu_434_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_140 <= 10'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            j_fu_132 <= 5'd0;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            j_fu_132 <= add_ln321_fu_595_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln319_fu_410_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln320_reg_654 <= icmp_ln320_fu_422_p2;
    end
end

always @ (*) begin
    if (((icmp_ln319_fu_410_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten29_load = 15'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten29_load = indvar_flatten29_fu_148;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten_load = 10'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_140;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        conv1_to_conv2_blk_n = conv1_to_conv2_empty_n;
    end else begin
        conv1_to_conv2_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        conv1_to_conv2_read = 1'b1;
    end else begin
        conv1_to_conv2_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_tile_10_ce0 = 1'b1;
    end else begin
        input_tile_10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (select_ln320_fu_527_p3 == 5'd10) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_tile_10_we0 = 1'b1;
    end else begin
        input_tile_10_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_tile_11_ce0 = 1'b1;
    end else begin
        input_tile_11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (select_ln320_fu_527_p3 == 5'd11) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_tile_11_we0 = 1'b1;
    end else begin
        input_tile_11_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_tile_12_ce0 = 1'b1;
    end else begin
        input_tile_12_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (select_ln320_fu_527_p3 == 5'd12) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_tile_12_we0 = 1'b1;
    end else begin
        input_tile_12_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_tile_13_ce0 = 1'b1;
    end else begin
        input_tile_13_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (select_ln320_fu_527_p3 == 5'd13) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_tile_13_we0 = 1'b1;
    end else begin
        input_tile_13_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_tile_14_ce0 = 1'b1;
    end else begin
        input_tile_14_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (select_ln320_fu_527_p3 == 5'd14) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_tile_14_we0 = 1'b1;
    end else begin
        input_tile_14_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_tile_15_ce0 = 1'b1;
    end else begin
        input_tile_15_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (select_ln320_fu_527_p3 == 5'd15) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_tile_15_we0 = 1'b1;
    end else begin
        input_tile_15_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_tile_16_ce0 = 1'b1;
    end else begin
        input_tile_16_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~(select_ln320_fu_527_p3 == 5'd0) & ~(select_ln320_fu_527_p3 == 5'd1) & ~(select_ln320_fu_527_p3 == 5'd2) & ~(select_ln320_fu_527_p3 == 5'd3) & ~(select_ln320_fu_527_p3 == 5'd4) & ~(select_ln320_fu_527_p3 == 5'd5) & ~(select_ln320_fu_527_p3 == 5'd6) & ~(select_ln320_fu_527_p3 == 5'd7) & ~(select_ln320_fu_527_p3 == 5'd8) & ~(select_ln320_fu_527_p3 == 5'd9) & ~(select_ln320_fu_527_p3 == 5'd10) & ~(select_ln320_fu_527_p3 == 5'd11) & ~(select_ln320_fu_527_p3 == 5'd12) & ~(select_ln320_fu_527_p3 == 5'd13) & ~(select_ln320_fu_527_p3 == 5'd14) & ~(select_ln320_fu_527_p3 == 5'd15) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_tile_16_we0 = 1'b1;
    end else begin
        input_tile_16_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_tile_1_ce0 = 1'b1;
    end else begin
        input_tile_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (select_ln320_fu_527_p3 == 5'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_tile_1_we0 = 1'b1;
    end else begin
        input_tile_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_tile_2_ce0 = 1'b1;
    end else begin
        input_tile_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (select_ln320_fu_527_p3 == 5'd2) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_tile_2_we0 = 1'b1;
    end else begin
        input_tile_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_tile_3_ce0 = 1'b1;
    end else begin
        input_tile_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (select_ln320_fu_527_p3 == 5'd3) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_tile_3_we0 = 1'b1;
    end else begin
        input_tile_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_tile_4_ce0 = 1'b1;
    end else begin
        input_tile_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (select_ln320_fu_527_p3 == 5'd4) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_tile_4_we0 = 1'b1;
    end else begin
        input_tile_4_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_tile_5_ce0 = 1'b1;
    end else begin
        input_tile_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (select_ln320_fu_527_p3 == 5'd5) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_tile_5_we0 = 1'b1;
    end else begin
        input_tile_5_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_tile_6_ce0 = 1'b1;
    end else begin
        input_tile_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (select_ln320_fu_527_p3 == 5'd6) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_tile_6_we0 = 1'b1;
    end else begin
        input_tile_6_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_tile_7_ce0 = 1'b1;
    end else begin
        input_tile_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (select_ln320_fu_527_p3 == 5'd7) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_tile_7_we0 = 1'b1;
    end else begin
        input_tile_7_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_tile_8_ce0 = 1'b1;
    end else begin
        input_tile_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (select_ln320_fu_527_p3 == 5'd8) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_tile_8_we0 = 1'b1;
    end else begin
        input_tile_8_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_tile_9_ce0 = 1'b1;
    end else begin
        input_tile_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (select_ln320_fu_527_p3 == 5'd9) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_tile_9_we0 = 1'b1;
    end else begin
        input_tile_9_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_tile_ce0 = 1'b1;
    end else begin
        input_tile_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (select_ln320_fu_527_p3 == 5'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_tile_we0 = 1'b1;
    end else begin
        input_tile_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln319_1_fu_416_p2 = (ap_sig_allocacmp_indvar_flatten29_load + 15'd1);

assign add_ln319_fu_461_p2 = (feat_fu_144 + 7'd1);

assign add_ln320_1_fu_428_p2 = (ap_sig_allocacmp_indvar_flatten_load + 10'd1);

assign add_ln320_fu_516_p2 = (select_ln319_fu_467_p3 + 5'd1);

assign add_ln321_fu_595_p2 = (select_ln320_fu_527_p3 + 5'd1);

assign add_ln322_1_fu_547_p2 = (add_ln322_fu_493_p2 + zext_ln322_1_fu_543_p1);

assign add_ln322_fu_493_p2 = (tmp_s_fu_485_p3 + zext_ln322_fu_481_p1);

assign and_ln319_fu_510_p2 = (xor_ln319_fu_499_p2 & icmp_ln321_fu_504_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((conv1_to_conv2_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((conv1_to_conv2_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = (conv1_to_conv2_empty_n == 1'b0);
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign bitcast_ln322_fu_574_p1 = conv1_to_conv2_dout;

assign icmp_ln319_fu_410_p2 = ((ap_sig_allocacmp_indvar_flatten29_load == 15'd18496) ? 1'b1 : 1'b0);

assign icmp_ln320_fu_422_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 10'd289) ? 1'b1 : 1'b0);

assign icmp_ln321_fu_504_p2 = ((j_fu_132 == 5'd17) ? 1'b1 : 1'b0);

assign input_tile_10_address0 = zext_ln322_2_fu_553_p1;

assign input_tile_10_d0 = bitcast_ln322_fu_574_p1;

assign input_tile_11_address0 = zext_ln322_2_fu_553_p1;

assign input_tile_11_d0 = bitcast_ln322_fu_574_p1;

assign input_tile_12_address0 = zext_ln322_2_fu_553_p1;

assign input_tile_12_d0 = bitcast_ln322_fu_574_p1;

assign input_tile_13_address0 = zext_ln322_2_fu_553_p1;

assign input_tile_13_d0 = bitcast_ln322_fu_574_p1;

assign input_tile_14_address0 = zext_ln322_2_fu_553_p1;

assign input_tile_14_d0 = bitcast_ln322_fu_574_p1;

assign input_tile_15_address0 = zext_ln322_2_fu_553_p1;

assign input_tile_15_d0 = bitcast_ln322_fu_574_p1;

assign input_tile_16_address0 = zext_ln322_2_fu_553_p1;

assign input_tile_16_d0 = bitcast_ln322_fu_574_p1;

assign input_tile_1_address0 = zext_ln322_2_fu_553_p1;

assign input_tile_1_d0 = bitcast_ln322_fu_574_p1;

assign input_tile_2_address0 = zext_ln322_2_fu_553_p1;

assign input_tile_2_d0 = bitcast_ln322_fu_574_p1;

assign input_tile_3_address0 = zext_ln322_2_fu_553_p1;

assign input_tile_3_d0 = bitcast_ln322_fu_574_p1;

assign input_tile_4_address0 = zext_ln322_2_fu_553_p1;

assign input_tile_4_d0 = bitcast_ln322_fu_574_p1;

assign input_tile_5_address0 = zext_ln322_2_fu_553_p1;

assign input_tile_5_d0 = bitcast_ln322_fu_574_p1;

assign input_tile_6_address0 = zext_ln322_2_fu_553_p1;

assign input_tile_6_d0 = bitcast_ln322_fu_574_p1;

assign input_tile_7_address0 = zext_ln322_2_fu_553_p1;

assign input_tile_7_d0 = bitcast_ln322_fu_574_p1;

assign input_tile_8_address0 = zext_ln322_2_fu_553_p1;

assign input_tile_8_d0 = bitcast_ln322_fu_574_p1;

assign input_tile_9_address0 = zext_ln322_2_fu_553_p1;

assign input_tile_9_d0 = bitcast_ln322_fu_574_p1;

assign input_tile_address0 = zext_ln322_2_fu_553_p1;

assign input_tile_d0 = bitcast_ln322_fu_574_p1;

assign or_ln320_fu_522_p2 = (icmp_ln320_reg_654 | and_ln319_fu_510_p2);

assign select_ln319_1_fu_474_p3 = ((icmp_ln320_reg_654[0:0] == 1'b1) ? add_ln319_fu_461_p2 : feat_fu_144);

assign select_ln319_fu_467_p3 = ((icmp_ln320_reg_654[0:0] == 1'b1) ? 5'd0 : i_fu_136);

assign select_ln320_1_fu_535_p3 = ((and_ln319_fu_510_p2[0:0] == 1'b1) ? add_ln320_fu_516_p2 : select_ln319_fu_467_p3);

assign select_ln320_2_fu_434_p3 = ((icmp_ln320_fu_422_p2[0:0] == 1'b1) ? 10'd1 : add_ln320_1_fu_428_p2);

assign select_ln320_fu_527_p3 = ((or_ln320_fu_522_p2[0:0] == 1'b1) ? 5'd0 : j_fu_132);

assign tmp_s_fu_485_p3 = {{select_ln319_1_fu_474_p3}, {4'd0}};

assign xor_ln319_fu_499_p2 = (icmp_ln320_reg_654 ^ 1'd1);

assign zext_ln322_1_fu_543_p1 = select_ln320_1_fu_535_p3;

assign zext_ln322_2_fu_553_p1 = add_ln322_1_fu_547_p2;

assign zext_ln322_fu_481_p1 = select_ln319_1_fu_474_p3;

endmodule //srcnn_conv2_Pipeline_STREAM_READ_CONV2_VITIS_LOOP_320_1_VITIS_LOOP_321_2
