// ==============================================================
// Generated by Vitis HLS v2023.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module srcnn_load_patch_tile (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_ftmap_address0,
        input_ftmap_ce0,
        input_ftmap_q0,
        h0,
        w0,
        th_eff,
        tw_eff,
        patch_address0,
        patch_ce0,
        patch_we0,
        patch_d0
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_state3 = 6'd4;
parameter    ap_ST_fsm_state4 = 6'd8;
parameter    ap_ST_fsm_state5 = 6'd16;
parameter    ap_ST_fsm_state6 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [15:0] input_ftmap_address0;
output   input_ftmap_ce0;
input  [31:0] input_ftmap_q0;
input  [8:0] h0;
input  [7:0] w0;
input  [7:0] th_eff;
input  [7:0] tw_eff;
output  [12:0] patch_address0;
output   patch_ce0;
output   patch_we0;
output  [31:0] patch_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [8:0] add_ln50_1_fu_80_p2;
reg   [8:0] add_ln50_1_reg_110;
wire  signed [16:0] grp_fu_102_p3;
reg   [16:0] mul_ln50_reg_120;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state5;
wire   [7:0] empty_fu_90_p1;
reg   [7:0] empty_reg_131;
wire   [8:0] tmp_fu_95_p2;
reg   [8:0] tmp_reg_136;
wire    grp_load_patch_tile_Pipeline_VITIS_LOOP_50_1_VITIS_LOOP_51_2_fu_56_ap_start;
wire    grp_load_patch_tile_Pipeline_VITIS_LOOP_50_1_VITIS_LOOP_51_2_fu_56_ap_done;
wire    grp_load_patch_tile_Pipeline_VITIS_LOOP_50_1_VITIS_LOOP_51_2_fu_56_ap_idle;
wire    grp_load_patch_tile_Pipeline_VITIS_LOOP_50_1_VITIS_LOOP_51_2_fu_56_ap_ready;
wire   [12:0] grp_load_patch_tile_Pipeline_VITIS_LOOP_50_1_VITIS_LOOP_51_2_fu_56_patch_address0;
wire    grp_load_patch_tile_Pipeline_VITIS_LOOP_50_1_VITIS_LOOP_51_2_fu_56_patch_ce0;
wire    grp_load_patch_tile_Pipeline_VITIS_LOOP_50_1_VITIS_LOOP_51_2_fu_56_patch_we0;
wire   [31:0] grp_load_patch_tile_Pipeline_VITIS_LOOP_50_1_VITIS_LOOP_51_2_fu_56_patch_d0;
wire   [15:0] grp_load_patch_tile_Pipeline_VITIS_LOOP_50_1_VITIS_LOOP_51_2_fu_56_input_ftmap_address0;
wire    grp_load_patch_tile_Pipeline_VITIS_LOOP_50_1_VITIS_LOOP_51_2_fu_56_input_ftmap_ce0;
reg    grp_load_patch_tile_Pipeline_VITIS_LOOP_50_1_VITIS_LOOP_51_2_fu_56_ap_start_reg;
wire    ap_CS_fsm_state6;
wire   [8:0] tw_eff_cast_fu_76_p1;
wire   [7:0] grp_fu_102_p0;
wire   [3:0] grp_fu_102_p1;
wire   [8:0] grp_fu_102_p2;
reg   [5:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
reg    ap_ST_fsm_state6_blk;
wire   [8:0] grp_fu_102_p00;
wire   [16:0] grp_fu_102_p20;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'd1;
#0 grp_load_patch_tile_Pipeline_VITIS_LOOP_50_1_VITIS_LOOP_51_2_fu_56_ap_start_reg = 1'b0;
end

srcnn_load_patch_tile_Pipeline_VITIS_LOOP_50_1_VITIS_LOOP_51_2 grp_load_patch_tile_Pipeline_VITIS_LOOP_50_1_VITIS_LOOP_51_2_fu_56(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_load_patch_tile_Pipeline_VITIS_LOOP_50_1_VITIS_LOOP_51_2_fu_56_ap_start),
    .ap_done(grp_load_patch_tile_Pipeline_VITIS_LOOP_50_1_VITIS_LOOP_51_2_fu_56_ap_done),
    .ap_idle(grp_load_patch_tile_Pipeline_VITIS_LOOP_50_1_VITIS_LOOP_51_2_fu_56_ap_idle),
    .ap_ready(grp_load_patch_tile_Pipeline_VITIS_LOOP_50_1_VITIS_LOOP_51_2_fu_56_ap_ready),
    .tmp_cast(tmp_reg_136),
    .h0_cast(empty_reg_131),
    .bound(mul_ln50_reg_120),
    .add_ln50_1(add_ln50_1_reg_110),
    .patch_address0(grp_load_patch_tile_Pipeline_VITIS_LOOP_50_1_VITIS_LOOP_51_2_fu_56_patch_address0),
    .patch_ce0(grp_load_patch_tile_Pipeline_VITIS_LOOP_50_1_VITIS_LOOP_51_2_fu_56_patch_ce0),
    .patch_we0(grp_load_patch_tile_Pipeline_VITIS_LOOP_50_1_VITIS_LOOP_51_2_fu_56_patch_we0),
    .patch_d0(grp_load_patch_tile_Pipeline_VITIS_LOOP_50_1_VITIS_LOOP_51_2_fu_56_patch_d0),
    .zext_ln50(w0),
    .w0_cast3(w0),
    .input_ftmap_address0(grp_load_patch_tile_Pipeline_VITIS_LOOP_50_1_VITIS_LOOP_51_2_fu_56_input_ftmap_address0),
    .input_ftmap_ce0(grp_load_patch_tile_Pipeline_VITIS_LOOP_50_1_VITIS_LOOP_51_2_fu_56_input_ftmap_ce0),
    .input_ftmap_q0(input_ftmap_q0)
);

srcnn_am_addmul_8ns_4ns_9ns_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 4 ),
    .din2_WIDTH( 9 ),
    .dout_WIDTH( 17 ))
am_addmul_8ns_4ns_9ns_17_4_1_U11(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_102_p0),
    .din1(grp_fu_102_p1),
    .din2(grp_fu_102_p2),
    .ce(1'b1),
    .dout(grp_fu_102_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_load_patch_tile_Pipeline_VITIS_LOOP_50_1_VITIS_LOOP_51_2_fu_56_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state5)) begin
            grp_load_patch_tile_Pipeline_VITIS_LOOP_50_1_VITIS_LOOP_51_2_fu_56_ap_start_reg <= 1'b1;
        end else if ((grp_load_patch_tile_Pipeline_VITIS_LOOP_50_1_VITIS_LOOP_51_2_fu_56_ap_ready == 1'b1)) begin
            grp_load_patch_tile_Pipeline_VITIS_LOOP_50_1_VITIS_LOOP_51_2_fu_56_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        add_ln50_1_reg_110 <= add_ln50_1_fu_80_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        empty_reg_131 <= empty_fu_90_p1;
        tmp_reg_136 <= tmp_fu_95_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        mul_ln50_reg_120 <= grp_fu_102_p3;
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

always @ (*) begin
    if ((grp_load_patch_tile_Pipeline_VITIS_LOOP_50_1_VITIS_LOOP_51_2_fu_56_ap_done == 1'b0)) begin
        ap_ST_fsm_state6_blk = 1'b1;
    end else begin
        ap_ST_fsm_state6_blk = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)) | ((grp_load_patch_tile_Pipeline_VITIS_LOOP_50_1_VITIS_LOOP_51_2_fu_56_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state6)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((grp_load_patch_tile_Pipeline_VITIS_LOOP_50_1_VITIS_LOOP_51_2_fu_56_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            if (((grp_load_patch_tile_Pipeline_VITIS_LOOP_50_1_VITIS_LOOP_51_2_fu_56_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln50_1_fu_80_p2 = (tw_eff_cast_fu_76_p1 + 9'd12);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign empty_fu_90_p1 = h0[7:0];

assign grp_fu_102_p0 = grp_fu_102_p00;

assign grp_fu_102_p00 = th_eff;

assign grp_fu_102_p1 = 9'd12;

assign grp_fu_102_p2 = grp_fu_102_p20;

assign grp_fu_102_p20 = add_ln50_1_fu_80_p2;

assign grp_load_patch_tile_Pipeline_VITIS_LOOP_50_1_VITIS_LOOP_51_2_fu_56_ap_start = grp_load_patch_tile_Pipeline_VITIS_LOOP_50_1_VITIS_LOOP_51_2_fu_56_ap_start_reg;

assign input_ftmap_address0 = grp_load_patch_tile_Pipeline_VITIS_LOOP_50_1_VITIS_LOOP_51_2_fu_56_input_ftmap_address0;

assign input_ftmap_ce0 = grp_load_patch_tile_Pipeline_VITIS_LOOP_50_1_VITIS_LOOP_51_2_fu_56_input_ftmap_ce0;

assign patch_address0 = grp_load_patch_tile_Pipeline_VITIS_LOOP_50_1_VITIS_LOOP_51_2_fu_56_patch_address0;

assign patch_ce0 = grp_load_patch_tile_Pipeline_VITIS_LOOP_50_1_VITIS_LOOP_51_2_fu_56_patch_ce0;

assign patch_d0 = grp_load_patch_tile_Pipeline_VITIS_LOOP_50_1_VITIS_LOOP_51_2_fu_56_patch_d0;

assign patch_we0 = grp_load_patch_tile_Pipeline_VITIS_LOOP_50_1_VITIS_LOOP_51_2_fu_56_patch_we0;

assign tmp_fu_95_p2 = ($signed(h0) + $signed(9'd506));

assign tw_eff_cast_fu_76_p1 = tw_eff;

endmodule //srcnn_load_patch_tile
