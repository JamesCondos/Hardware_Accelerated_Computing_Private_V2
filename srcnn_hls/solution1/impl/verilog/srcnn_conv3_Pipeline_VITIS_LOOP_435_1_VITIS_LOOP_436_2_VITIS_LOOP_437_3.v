// ==============================================================
// Generated by Vitis HLS v2023.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module srcnn_conv3_Pipeline_VITIS_LOOP_435_1_VITIS_LOOP_436_2_VITIS_LOOP_437_3 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        conv2_to_conv3_dout,
        conv2_to_conv3_num_data_valid,
        conv2_to_conv3_fifo_cap,
        conv2_to_conv3_empty_n,
        conv2_to_conv3_read,
        input_tile_address0,
        input_tile_ce0,
        input_tile_we0,
        input_tile_d0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] conv2_to_conv3_dout;
input  [9:0] conv2_to_conv3_num_data_valid;
input  [9:0] conv2_to_conv3_fifo_cap;
input   conv2_to_conv3_empty_n;
output   conv2_to_conv3_read;
output  [13:0] input_tile_address0;
output   input_tile_ce0;
output   input_tile_we0;
output  [31:0] input_tile_d0;

reg ap_idle;
reg conv2_to_conv3_read;
reg input_tile_ce0;
reg input_tile_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
reg    ap_block_state2_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln435_fu_141_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    conv2_to_conv3_blk_n;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln438_5_fu_308_p1;
reg   [4:0] j_1_fu_74;
wire   [4:0] add_ln437_fu_318_p2;
reg    ap_block_pp0_stage0_11001;
wire    ap_loop_init;
reg   [4:0] i_1_fu_78;
wire   [4:0] select_ln436_1_fu_258_p3;
reg   [9:0] indvar_flatten_fu_82;
wire   [9:0] select_ln436_2_fu_330_p3;
reg   [5:0] feat_fu_86;
wire   [5:0] select_ln435_1_fu_190_p3;
reg   [13:0] indvar_flatten12_fu_90;
wire   [13:0] add_ln435_1_fu_147_p2;
reg   [13:0] ap_sig_allocacmp_indvar_flatten12_load;
wire   [0:0] icmp_ln436_fu_176_p2;
wire   [5:0] add_ln435_fu_170_p2;
wire   [9:0] tmp_24_fu_202_p3;
wire   [10:0] zext_ln438_1_fu_210_p1;
wire   [10:0] zext_ln438_fu_198_p1;
wire   [0:0] icmp_ln437_fu_226_p2;
wire   [0:0] xor_ln435_fu_220_p2;
wire   [4:0] select_ln435_fu_182_p3;
wire   [0:0] and_ln435_fu_232_p2;
wire   [0:0] or_ln436_fu_244_p2;
wire   [4:0] add_ln436_fu_238_p2;
wire   [10:0] add_ln438_fu_214_p2;
wire   [10:0] zext_ln438_2_fu_266_p1;
wire   [10:0] add_ln438_1_fu_270_p2;
wire   [9:0] trunc_ln438_fu_280_p1;
wire   [13:0] p_shl_fu_284_p3;
wire   [13:0] zext_ln438_3_fu_276_p1;
wire   [4:0] select_ln436_fu_250_p3;
wire   [13:0] add_ln438_2_fu_292_p2;
wire   [13:0] zext_ln438_4_fu_298_p1;
wire   [13:0] add_ln438_3_fu_302_p2;
wire   [9:0] add_ln436_1_fu_324_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_done_reg = 1'b0;
end

srcnn_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            feat_fu_86 <= 6'd0;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            feat_fu_86 <= select_ln435_1_fu_190_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            i_1_fu_78 <= 5'd0;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            i_1_fu_78 <= select_ln436_1_fu_258_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln435_fu_141_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvar_flatten12_fu_90 <= add_ln435_1_fu_147_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten12_fu_90 <= 14'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_82 <= 10'd0;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            indvar_flatten_fu_82 <= select_ln436_2_fu_330_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            j_1_fu_74 <= 5'd0;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            j_1_fu_74 <= add_ln437_fu_318_p2;
        end
    end
end

always @ (*) begin
    if (((icmp_ln435_fu_141_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten12_load = 14'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten12_load = indvar_flatten12_fu_90;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        conv2_to_conv3_blk_n = conv2_to_conv3_empty_n;
    end else begin
        conv2_to_conv3_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        conv2_to_conv3_read = 1'b1;
    end else begin
        conv2_to_conv3_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_tile_ce0 = 1'b1;
    end else begin
        input_tile_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_tile_we0 = 1'b1;
    end else begin
        input_tile_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln435_1_fu_147_p2 = (ap_sig_allocacmp_indvar_flatten12_load + 14'd1);

assign add_ln435_fu_170_p2 = (feat_fu_86 + 6'd1);

assign add_ln436_1_fu_324_p2 = (indvar_flatten_fu_82 + 10'd1);

assign add_ln436_fu_238_p2 = (select_ln435_fu_182_p3 + 5'd1);

assign add_ln437_fu_318_p2 = (select_ln436_fu_250_p3 + 5'd1);

assign add_ln438_1_fu_270_p2 = (add_ln438_fu_214_p2 + zext_ln438_2_fu_266_p1);

assign add_ln438_2_fu_292_p2 = (p_shl_fu_284_p3 + zext_ln438_3_fu_276_p1);

assign add_ln438_3_fu_302_p2 = (add_ln438_2_fu_292_p2 + zext_ln438_4_fu_298_p1);

assign add_ln438_fu_214_p2 = (zext_ln438_1_fu_210_p1 + zext_ln438_fu_198_p1);

assign and_ln435_fu_232_p2 = (xor_ln435_fu_220_p2 & icmp_ln437_fu_226_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((conv2_to_conv3_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((conv2_to_conv3_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = (conv2_to_conv3_empty_n == 1'b0);
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign icmp_ln435_fu_141_p2 = ((ap_sig_allocacmp_indvar_flatten12_load == 14'd9248) ? 1'b1 : 1'b0);

assign icmp_ln436_fu_176_p2 = ((indvar_flatten_fu_82 == 10'd289) ? 1'b1 : 1'b0);

assign icmp_ln437_fu_226_p2 = ((j_1_fu_74 == 5'd17) ? 1'b1 : 1'b0);

assign input_tile_address0 = zext_ln438_5_fu_308_p1;

assign input_tile_d0 = conv2_to_conv3_dout;

assign or_ln436_fu_244_p2 = (icmp_ln436_fu_176_p2 | and_ln435_fu_232_p2);

assign p_shl_fu_284_p3 = {{trunc_ln438_fu_280_p1}, {4'd0}};

assign select_ln435_1_fu_190_p3 = ((icmp_ln436_fu_176_p2[0:0] == 1'b1) ? add_ln435_fu_170_p2 : feat_fu_86);

assign select_ln435_fu_182_p3 = ((icmp_ln436_fu_176_p2[0:0] == 1'b1) ? 5'd0 : i_1_fu_78);

assign select_ln436_1_fu_258_p3 = ((and_ln435_fu_232_p2[0:0] == 1'b1) ? add_ln436_fu_238_p2 : select_ln435_fu_182_p3);

assign select_ln436_2_fu_330_p3 = ((icmp_ln436_fu_176_p2[0:0] == 1'b1) ? 10'd1 : add_ln436_1_fu_324_p2);

assign select_ln436_fu_250_p3 = ((or_ln436_fu_244_p2[0:0] == 1'b1) ? 5'd0 : j_1_fu_74);

assign tmp_24_fu_202_p3 = {{select_ln435_1_fu_190_p3}, {4'd0}};

assign trunc_ln438_fu_280_p1 = add_ln438_1_fu_270_p2[9:0];

assign xor_ln435_fu_220_p2 = (icmp_ln436_fu_176_p2 ^ 1'd1);

assign zext_ln438_1_fu_210_p1 = tmp_24_fu_202_p3;

assign zext_ln438_2_fu_266_p1 = select_ln436_1_fu_258_p3;

assign zext_ln438_3_fu_276_p1 = add_ln438_1_fu_270_p2;

assign zext_ln438_4_fu_298_p1 = select_ln436_fu_250_p3;

assign zext_ln438_5_fu_308_p1 = add_ln438_3_fu_302_p2;

assign zext_ln438_fu_198_p1 = select_ln435_1_fu_190_p3;

endmodule //srcnn_conv3_Pipeline_VITIS_LOOP_435_1_VITIS_LOOP_436_2_VITIS_LOOP_437_3
