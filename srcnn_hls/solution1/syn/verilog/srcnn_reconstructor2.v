// ==============================================================
// Generated by Vitis HLS v2023.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module srcnn_reconstructor2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        output_ftmap_address0,
        output_ftmap_ce0,
        output_ftmap_we0,
        output_ftmap_d0,
        output_tile_address0,
        output_tile_ce0,
        output_tile_q0,
        tile_h,
        tile_w
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_state3 = 4'd4;
parameter    ap_ST_fsm_state4 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [15:0] output_ftmap_address0;
output   output_ftmap_ce0;
output   output_ftmap_we0;
output  [31:0] output_ftmap_d0;
output  [8:0] output_tile_address0;
output   output_tile_ce0;
input  [31:0] output_tile_q0;
input  [7:0] tile_h;
input  [7:0] tile_w;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg output_ftmap_ce0;
reg output_ftmap_we0;
reg output_tile_ce0;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [8:0] zext_ln66_fu_101_p1;
reg   [8:0] zext_ln66_reg_235;
wire   [8:0] add_ln68_1_fu_125_p2;
reg   [8:0] add_ln68_1_reg_240;
wire    ap_CS_fsm_state2;
wire   [4:0] add_ln66_fu_141_p2;
reg   [4:0] add_ln66_reg_248;
wire   [15:0] sub_ln68_fu_164_p2;
reg   [15:0] sub_ln68_reg_253;
wire   [0:0] icmp_ln66_fu_135_p2;
wire    ap_CS_fsm_state3;
wire   [4:0] add_ln67_fu_190_p2;
reg   [4:0] add_ln67_reg_266;
wire   [15:0] add_ln68_3_fu_205_p2;
reg   [15:0] add_ln68_3_reg_271;
wire   [0:0] icmp_ln67_fu_184_p2;
reg   [4:0] j_reg_90;
wire    ap_CS_fsm_state4;
wire   [63:0] zext_ln68_3_fu_179_p1;
wire   [63:0] zext_ln68_5_fu_214_p1;
reg   [4:0] i_fu_48;
wire   [8:0] tmp_fu_117_p3;
wire   [8:0] zext_ln68_fu_113_p1;
wire   [7:0] zext_ln66_1_fu_131_p1;
wire   [7:0] empty_fu_147_p2;
wire   [15:0] tmp_1_fu_156_p3;
wire   [15:0] zext_ln68_1_fu_152_p1;
wire   [8:0] zext_ln68_2_fu_170_p1;
wire   [8:0] add_ln68_2_fu_174_p2;
wire   [8:0] add_ln68_fu_196_p2;
wire   [15:0] zext_ln68_4_fu_201_p1;
reg   [3:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_fu_48 <= 5'd0;
    end else if (((icmp_ln67_fu_184_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        i_fu_48 <= add_ln66_reg_248;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln66_fu_135_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        j_reg_90 <= 5'd0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        j_reg_90 <= add_ln67_reg_266;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln66_reg_248 <= add_ln66_fu_141_p2;
        add_ln68_1_reg_240 <= add_ln68_1_fu_125_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        add_ln67_reg_266 <= add_ln67_fu_190_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln67_fu_184_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        add_ln68_3_reg_271 <= add_ln68_3_fu_205_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln66_fu_135_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        sub_ln68_reg_253 <= sub_ln68_fu_164_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        zext_ln66_reg_235[7 : 0] <= zext_ln66_fu_101_p1[7 : 0];
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

always @ (*) begin
    if ((((icmp_ln66_fu_135_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln66_fu_135_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        output_ftmap_ce0 = 1'b1;
    end else begin
        output_ftmap_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        output_ftmap_we0 = 1'b1;
    end else begin
        output_ftmap_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        output_tile_ce0 = 1'b1;
    end else begin
        output_tile_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln66_fu_135_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln67_fu_184_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln66_fu_141_p2 = (i_fu_48 + 5'd1);

assign add_ln67_fu_190_p2 = (j_reg_90 + 5'd1);

assign add_ln68_1_fu_125_p2 = (tmp_fu_117_p3 + zext_ln68_fu_113_p1);

assign add_ln68_2_fu_174_p2 = (add_ln68_1_reg_240 + zext_ln68_2_fu_170_p1);

assign add_ln68_3_fu_205_p2 = (sub_ln68_reg_253 + zext_ln68_4_fu_201_p1);

assign add_ln68_fu_196_p2 = (zext_ln66_reg_235 + zext_ln68_2_fu_170_p1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign empty_fu_147_p2 = (zext_ln66_1_fu_131_p1 + tile_h);

assign icmp_ln66_fu_135_p2 = ((i_fu_48 == 5'd17) ? 1'b1 : 1'b0);

assign icmp_ln67_fu_184_p2 = ((j_reg_90 == 5'd17) ? 1'b1 : 1'b0);

assign output_ftmap_address0 = zext_ln68_5_fu_214_p1;

assign output_ftmap_d0 = output_tile_q0;

assign output_tile_address0 = zext_ln68_3_fu_179_p1;

assign sub_ln68_fu_164_p2 = (tmp_1_fu_156_p3 - zext_ln68_1_fu_152_p1);

assign tmp_1_fu_156_p3 = {{empty_fu_147_p2}, {8'd0}};

assign tmp_fu_117_p3 = {{i_fu_48}, {4'd0}};

assign zext_ln66_1_fu_131_p1 = i_fu_48;

assign zext_ln66_fu_101_p1 = tile_w;

assign zext_ln68_1_fu_152_p1 = empty_fu_147_p2;

assign zext_ln68_2_fu_170_p1 = j_reg_90;

assign zext_ln68_3_fu_179_p1 = add_ln68_2_fu_174_p2;

assign zext_ln68_4_fu_201_p1 = add_ln68_fu_196_p2;

assign zext_ln68_5_fu_214_p1 = add_ln68_3_reg_271;

assign zext_ln68_fu_113_p1 = i_fu_48;

always @ (posedge ap_clk) begin
    zext_ln66_reg_235[8] <= 1'b0;
end

endmodule //srcnn_reconstructor2
