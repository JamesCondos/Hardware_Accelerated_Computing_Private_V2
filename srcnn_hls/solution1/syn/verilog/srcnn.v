// ==============================================================
// Generated by Vitis HLS v2023.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="srcnn_srcnn,hls_ip_2023_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xck26-sfvc784-2LV-c,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.360400,HLS_SYN_LAT=1624584872,HLS_SYN_TPT=none,HLS_SYN_MEM=11064,HLS_SYN_DSP=0,HLS_SYN_FF=12832,HLS_SYN_LUT=36144,HLS_VERSION=2023_1}" *)

module srcnn (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_ftmap_address0,
        input_ftmap_ce0,
        input_ftmap_q0,
        conv1_weights_address0,
        conv1_weights_ce0,
        conv1_weights_q0,
        conv1_weights_address1,
        conv1_weights_ce1,
        conv1_weights_q1,
        conv1_biases_address0,
        conv1_biases_ce0,
        conv1_biases_q0,
        conv2_weights_address0,
        conv2_weights_ce0,
        conv2_weights_q0,
        conv2_weights_address1,
        conv2_weights_ce1,
        conv2_weights_q1,
        conv2_biases_address0,
        conv2_biases_ce0,
        conv2_biases_q0,
        conv3_weights_address0,
        conv3_weights_ce0,
        conv3_weights_q0,
        conv3_weights_address1,
        conv3_weights_ce1,
        conv3_weights_q1,
        conv3_biases,
        output_ftmap_address0,
        output_ftmap_ce0,
        output_ftmap_we0,
        output_ftmap_d0
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_state3 = 6'd4;
parameter    ap_ST_fsm_state4 = 6'd8;
parameter    ap_ST_fsm_state5 = 6'd16;
parameter    ap_ST_fsm_state6 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [15:0] input_ftmap_address0;
output   input_ftmap_ce0;
input  [31:0] input_ftmap_q0;
output  [12:0] conv1_weights_address0;
output   conv1_weights_ce0;
input  [31:0] conv1_weights_q0;
output  [12:0] conv1_weights_address1;
output   conv1_weights_ce1;
input  [31:0] conv1_weights_q1;
output  [5:0] conv1_biases_address0;
output   conv1_biases_ce0;
input  [31:0] conv1_biases_q0;
output  [10:0] conv2_weights_address0;
output   conv2_weights_ce0;
input  [31:0] conv2_weights_q0;
output  [10:0] conv2_weights_address1;
output   conv2_weights_ce1;
input  [31:0] conv2_weights_q1;
output  [4:0] conv2_biases_address0;
output   conv2_biases_ce0;
input  [31:0] conv2_biases_q0;
output  [9:0] conv3_weights_address0;
output   conv3_weights_ce0;
input  [31:0] conv3_weights_q0;
output  [9:0] conv3_weights_address1;
output   conv3_weights_ce1;
input  [31:0] conv3_weights_q1;
input  [31:0] conv3_biases;
output  [15:0] output_ftmap_address0;
output   output_ftmap_ce0;
output   output_ftmap_we0;
output  [31:0] output_ftmap_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [21:0] layer1_output_address0;
reg    layer1_output_ce0;
reg    layer1_output_we0;
wire   [31:0] layer1_output_q0;
reg    layer1_output_ce1;
wire   [31:0] layer1_output_q1;
reg   [20:0] layer2_output_address0;
reg    layer2_output_ce0;
reg    layer2_output_we0;
wire   [31:0] layer2_output_q0;
wire   [31:0] empty_fu_87_p1;
reg   [31:0] empty_reg_92;
wire    ap_CS_fsm_state5;
wire    grp_conv1_fu_52_ap_start;
wire    grp_conv1_fu_52_ap_done;
wire    grp_conv1_fu_52_ap_idle;
wire    grp_conv1_fu_52_ap_ready;
wire   [15:0] grp_conv1_fu_52_input_ftmap_address0;
wire    grp_conv1_fu_52_input_ftmap_ce0;
wire   [12:0] grp_conv1_fu_52_conv1_weights_address0;
wire    grp_conv1_fu_52_conv1_weights_ce0;
wire   [12:0] grp_conv1_fu_52_conv1_weights_address1;
wire    grp_conv1_fu_52_conv1_weights_ce1;
wire   [5:0] grp_conv1_fu_52_conv1_biases_address0;
wire    grp_conv1_fu_52_conv1_biases_ce0;
wire   [21:0] grp_conv1_fu_52_layer1_output_address0;
wire    grp_conv1_fu_52_layer1_output_ce0;
wire    grp_conv1_fu_52_layer1_output_we0;
wire   [31:0] grp_conv1_fu_52_layer1_output_d0;
wire   [31:0] grp_conv1_fu_52_grp_fu_97_p_din0;
wire   [31:0] grp_conv1_fu_52_grp_fu_97_p_din1;
wire   [1:0] grp_conv1_fu_52_grp_fu_97_p_opcode;
wire    grp_conv1_fu_52_grp_fu_97_p_ce;
wire   [31:0] grp_conv1_fu_52_grp_fu_101_p_din0;
wire   [31:0] grp_conv1_fu_52_grp_fu_101_p_din1;
wire    grp_conv1_fu_52_grp_fu_101_p_ce;
wire   [31:0] grp_conv1_fu_52_grp_fu_105_p_din0;
wire    grp_conv1_fu_52_grp_fu_105_p_ce;
wire    grp_conv2_fu_64_ap_start;
wire    grp_conv2_fu_64_ap_done;
wire    grp_conv2_fu_64_ap_idle;
wire    grp_conv2_fu_64_ap_ready;
wire   [10:0] grp_conv2_fu_64_conv2_weights_address0;
wire    grp_conv2_fu_64_conv2_weights_ce0;
wire   [10:0] grp_conv2_fu_64_conv2_weights_address1;
wire    grp_conv2_fu_64_conv2_weights_ce1;
wire   [4:0] grp_conv2_fu_64_conv2_biases_address0;
wire    grp_conv2_fu_64_conv2_biases_ce0;
wire   [21:0] grp_conv2_fu_64_layer1_output_address0;
wire    grp_conv2_fu_64_layer1_output_ce0;
wire   [21:0] grp_conv2_fu_64_layer1_output_address1;
wire    grp_conv2_fu_64_layer1_output_ce1;
wire   [20:0] grp_conv2_fu_64_layer2_output_address0;
wire    grp_conv2_fu_64_layer2_output_ce0;
wire    grp_conv2_fu_64_layer2_output_we0;
wire   [31:0] grp_conv2_fu_64_layer2_output_d0;
wire   [31:0] grp_conv2_fu_64_grp_fu_97_p_din0;
wire   [31:0] grp_conv2_fu_64_grp_fu_97_p_din1;
wire   [1:0] grp_conv2_fu_64_grp_fu_97_p_opcode;
wire    grp_conv2_fu_64_grp_fu_97_p_ce;
wire   [31:0] grp_conv2_fu_64_grp_fu_101_p_din0;
wire   [31:0] grp_conv2_fu_64_grp_fu_101_p_din1;
wire    grp_conv2_fu_64_grp_fu_101_p_ce;
wire   [31:0] grp_conv2_fu_64_grp_fu_108_p_din0;
wire    grp_conv2_fu_64_grp_fu_108_p_ce;
wire    grp_conv3_fu_76_ap_start;
wire    grp_conv3_fu_76_ap_done;
wire    grp_conv3_fu_76_ap_idle;
wire    grp_conv3_fu_76_ap_ready;
wire   [9:0] grp_conv3_fu_76_conv3_weights_address0;
wire    grp_conv3_fu_76_conv3_weights_ce0;
wire   [9:0] grp_conv3_fu_76_conv3_weights_address1;
wire    grp_conv3_fu_76_conv3_weights_ce1;
wire   [15:0] grp_conv3_fu_76_output_ftmap_address0;
wire    grp_conv3_fu_76_output_ftmap_ce0;
wire    grp_conv3_fu_76_output_ftmap_we0;
wire   [31:0] grp_conv3_fu_76_output_ftmap_d0;
wire   [20:0] grp_conv3_fu_76_layer2_output_address0;
wire    grp_conv3_fu_76_layer2_output_ce0;
wire   [31:0] grp_conv3_fu_76_grp_fu_97_p_din0;
wire   [31:0] grp_conv3_fu_76_grp_fu_97_p_din1;
wire   [1:0] grp_conv3_fu_76_grp_fu_97_p_opcode;
wire    grp_conv3_fu_76_grp_fu_97_p_ce;
wire   [31:0] grp_conv3_fu_76_grp_fu_108_p_din0;
wire    grp_conv3_fu_76_grp_fu_108_p_ce;
wire   [31:0] grp_conv3_fu_76_grp_fu_101_p_din0;
wire   [31:0] grp_conv3_fu_76_grp_fu_101_p_din1;
wire    grp_conv3_fu_76_grp_fu_101_p_ce;
wire   [31:0] grp_conv3_fu_76_grp_fu_105_p_din0;
wire    grp_conv3_fu_76_grp_fu_105_p_ce;
reg    grp_conv1_fu_52_ap_start_reg;
wire    ap_CS_fsm_state2;
reg    grp_conv2_fu_64_ap_start_reg;
reg   [5:0] ap_NS_fsm;
wire    ap_NS_fsm_state3;
wire    ap_CS_fsm_state4;
reg    grp_conv3_fu_76_ap_start_reg;
wire    ap_CS_fsm_state6;
wire   [31:0] grp_fu_97_p2;
reg   [31:0] grp_fu_97_p0;
reg   [31:0] grp_fu_97_p1;
reg    grp_fu_97_ce;
wire   [31:0] grp_fu_101_p2;
reg   [31:0] grp_fu_101_p0;
reg   [31:0] grp_fu_101_p1;
reg    grp_fu_101_ce;
wire   [63:0] grp_fu_105_p1;
reg   [31:0] grp_fu_105_p0;
reg    grp_fu_105_ce;
wire   [63:0] grp_fu_108_p1;
reg   [31:0] grp_fu_108_p0;
reg    grp_fu_108_ce;
reg    ap_ST_fsm_state1_blk;
reg    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
reg    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
reg    ap_ST_fsm_state6_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'd1;
#0 grp_conv1_fu_52_ap_start_reg = 1'b0;
#0 grp_conv2_fu_64_ap_start_reg = 1'b0;
#0 grp_conv3_fu_76_ap_start_reg = 1'b0;
end

srcnn_layer1_output_RAM_AUTO_1R1W #(
    .DataWidth( 32 ),
    .AddressRange( 4161600 ),
    .AddressWidth( 22 ))
layer1_output_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer1_output_address0),
    .ce0(layer1_output_ce0),
    .we0(layer1_output_we0),
    .d0(grp_conv1_fu_52_layer1_output_d0),
    .q0(layer1_output_q0),
    .address1(grp_conv2_fu_64_layer1_output_address1),
    .ce1(layer1_output_ce1),
    .q1(layer1_output_q1)
);

srcnn_layer2_output_RAM_AUTO_1R1W #(
    .DataWidth( 32 ),
    .AddressRange( 2080800 ),
    .AddressWidth( 21 ))
layer2_output_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer2_output_address0),
    .ce0(layer2_output_ce0),
    .we0(layer2_output_we0),
    .d0(grp_conv2_fu_64_layer2_output_d0),
    .q0(layer2_output_q0)
);

srcnn_conv1 grp_conv1_fu_52(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_conv1_fu_52_ap_start),
    .ap_done(grp_conv1_fu_52_ap_done),
    .ap_idle(grp_conv1_fu_52_ap_idle),
    .ap_ready(grp_conv1_fu_52_ap_ready),
    .input_ftmap_address0(grp_conv1_fu_52_input_ftmap_address0),
    .input_ftmap_ce0(grp_conv1_fu_52_input_ftmap_ce0),
    .input_ftmap_q0(input_ftmap_q0),
    .conv1_weights_address0(grp_conv1_fu_52_conv1_weights_address0),
    .conv1_weights_ce0(grp_conv1_fu_52_conv1_weights_ce0),
    .conv1_weights_q0(conv1_weights_q0),
    .conv1_weights_address1(grp_conv1_fu_52_conv1_weights_address1),
    .conv1_weights_ce1(grp_conv1_fu_52_conv1_weights_ce1),
    .conv1_weights_q1(conv1_weights_q1),
    .conv1_biases_address0(grp_conv1_fu_52_conv1_biases_address0),
    .conv1_biases_ce0(grp_conv1_fu_52_conv1_biases_ce0),
    .conv1_biases_q0(conv1_biases_q0),
    .layer1_output_address0(grp_conv1_fu_52_layer1_output_address0),
    .layer1_output_ce0(grp_conv1_fu_52_layer1_output_ce0),
    .layer1_output_we0(grp_conv1_fu_52_layer1_output_we0),
    .layer1_output_d0(grp_conv1_fu_52_layer1_output_d0),
    .grp_fu_97_p_din0(grp_conv1_fu_52_grp_fu_97_p_din0),
    .grp_fu_97_p_din1(grp_conv1_fu_52_grp_fu_97_p_din1),
    .grp_fu_97_p_opcode(grp_conv1_fu_52_grp_fu_97_p_opcode),
    .grp_fu_97_p_dout0(grp_fu_97_p2),
    .grp_fu_97_p_ce(grp_conv1_fu_52_grp_fu_97_p_ce),
    .grp_fu_101_p_din0(grp_conv1_fu_52_grp_fu_101_p_din0),
    .grp_fu_101_p_din1(grp_conv1_fu_52_grp_fu_101_p_din1),
    .grp_fu_101_p_dout0(grp_fu_101_p2),
    .grp_fu_101_p_ce(grp_conv1_fu_52_grp_fu_101_p_ce),
    .grp_fu_105_p_din0(grp_conv1_fu_52_grp_fu_105_p_din0),
    .grp_fu_105_p_dout0(grp_fu_105_p1),
    .grp_fu_105_p_ce(grp_conv1_fu_52_grp_fu_105_p_ce)
);

srcnn_conv2 grp_conv2_fu_64(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_conv2_fu_64_ap_start),
    .ap_done(grp_conv2_fu_64_ap_done),
    .ap_idle(grp_conv2_fu_64_ap_idle),
    .ap_ready(grp_conv2_fu_64_ap_ready),
    .conv2_weights_address0(grp_conv2_fu_64_conv2_weights_address0),
    .conv2_weights_ce0(grp_conv2_fu_64_conv2_weights_ce0),
    .conv2_weights_q0(conv2_weights_q0),
    .conv2_weights_address1(grp_conv2_fu_64_conv2_weights_address1),
    .conv2_weights_ce1(grp_conv2_fu_64_conv2_weights_ce1),
    .conv2_weights_q1(conv2_weights_q1),
    .conv2_biases_address0(grp_conv2_fu_64_conv2_biases_address0),
    .conv2_biases_ce0(grp_conv2_fu_64_conv2_biases_ce0),
    .conv2_biases_q0(conv2_biases_q0),
    .layer1_output_address0(grp_conv2_fu_64_layer1_output_address0),
    .layer1_output_ce0(grp_conv2_fu_64_layer1_output_ce0),
    .layer1_output_q0(layer1_output_q0),
    .layer1_output_address1(grp_conv2_fu_64_layer1_output_address1),
    .layer1_output_ce1(grp_conv2_fu_64_layer1_output_ce1),
    .layer1_output_q1(layer1_output_q1),
    .layer2_output_address0(grp_conv2_fu_64_layer2_output_address0),
    .layer2_output_ce0(grp_conv2_fu_64_layer2_output_ce0),
    .layer2_output_we0(grp_conv2_fu_64_layer2_output_we0),
    .layer2_output_d0(grp_conv2_fu_64_layer2_output_d0),
    .grp_fu_97_p_din0(grp_conv2_fu_64_grp_fu_97_p_din0),
    .grp_fu_97_p_din1(grp_conv2_fu_64_grp_fu_97_p_din1),
    .grp_fu_97_p_opcode(grp_conv2_fu_64_grp_fu_97_p_opcode),
    .grp_fu_97_p_dout0(grp_fu_97_p2),
    .grp_fu_97_p_ce(grp_conv2_fu_64_grp_fu_97_p_ce),
    .grp_fu_101_p_din0(grp_conv2_fu_64_grp_fu_101_p_din0),
    .grp_fu_101_p_din1(grp_conv2_fu_64_grp_fu_101_p_din1),
    .grp_fu_101_p_dout0(grp_fu_101_p2),
    .grp_fu_101_p_ce(grp_conv2_fu_64_grp_fu_101_p_ce),
    .grp_fu_108_p_din0(grp_conv2_fu_64_grp_fu_108_p_din0),
    .grp_fu_108_p_dout0(grp_fu_108_p1),
    .grp_fu_108_p_ce(grp_conv2_fu_64_grp_fu_108_p_ce)
);

srcnn_conv3 grp_conv3_fu_76(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_conv3_fu_76_ap_start),
    .ap_done(grp_conv3_fu_76_ap_done),
    .ap_idle(grp_conv3_fu_76_ap_idle),
    .ap_ready(grp_conv3_fu_76_ap_ready),
    .conv3_weights_address0(grp_conv3_fu_76_conv3_weights_address0),
    .conv3_weights_ce0(grp_conv3_fu_76_conv3_weights_ce0),
    .conv3_weights_q0(conv3_weights_q0),
    .conv3_weights_address1(grp_conv3_fu_76_conv3_weights_address1),
    .conv3_weights_ce1(grp_conv3_fu_76_conv3_weights_ce1),
    .conv3_weights_q1(conv3_weights_q1),
    .conv3_biases_0_0_val(empty_reg_92),
    .output_ftmap_address0(grp_conv3_fu_76_output_ftmap_address0),
    .output_ftmap_ce0(grp_conv3_fu_76_output_ftmap_ce0),
    .output_ftmap_we0(grp_conv3_fu_76_output_ftmap_we0),
    .output_ftmap_d0(grp_conv3_fu_76_output_ftmap_d0),
    .layer2_output_address0(grp_conv3_fu_76_layer2_output_address0),
    .layer2_output_ce0(grp_conv3_fu_76_layer2_output_ce0),
    .layer2_output_q0(layer2_output_q0),
    .grp_fu_97_p_din0(grp_conv3_fu_76_grp_fu_97_p_din0),
    .grp_fu_97_p_din1(grp_conv3_fu_76_grp_fu_97_p_din1),
    .grp_fu_97_p_opcode(grp_conv3_fu_76_grp_fu_97_p_opcode),
    .grp_fu_97_p_dout0(grp_fu_97_p2),
    .grp_fu_97_p_ce(grp_conv3_fu_76_grp_fu_97_p_ce),
    .grp_fu_108_p_din0(grp_conv3_fu_76_grp_fu_108_p_din0),
    .grp_fu_108_p_dout0(grp_fu_108_p1),
    .grp_fu_108_p_ce(grp_conv3_fu_76_grp_fu_108_p_ce),
    .grp_fu_101_p_din0(grp_conv3_fu_76_grp_fu_101_p_din0),
    .grp_fu_101_p_din1(grp_conv3_fu_76_grp_fu_101_p_din1),
    .grp_fu_101_p_dout0(grp_fu_101_p2),
    .grp_fu_101_p_ce(grp_conv3_fu_76_grp_fu_101_p_ce),
    .grp_fu_105_p_din0(grp_conv3_fu_76_grp_fu_105_p_din0),
    .grp_fu_105_p_dout0(grp_fu_105_p1),
    .grp_fu_105_p_ce(grp_conv3_fu_76_grp_fu_105_p_ce)
);

srcnn_fadd_32ns_32ns_32_4_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fadd_32ns_32ns_32_4_full_dsp_1_U42(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_97_p0),
    .din1(grp_fu_97_p1),
    .ce(grp_fu_97_ce),
    .dout(grp_fu_97_p2)
);

srcnn_fmul_32ns_32ns_32_3_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_3_max_dsp_1_U43(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_101_p0),
    .din1(grp_fu_101_p1),
    .ce(grp_fu_101_ce),
    .dout(grp_fu_101_p2)
);

srcnn_sitodp_32s_64_4_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
sitodp_32s_64_4_no_dsp_1_U44(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_105_p0),
    .ce(grp_fu_105_ce),
    .dout(grp_fu_105_p1)
);

srcnn_sitodp_32s_64_4_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
sitodp_32s_64_4_no_dsp_1_U45(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_108_p0),
    .ce(grp_fu_108_ce),
    .dout(grp_fu_108_p1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_conv1_fu_52_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            grp_conv1_fu_52_ap_start_reg <= 1'b1;
        end else if ((grp_conv1_fu_52_ap_ready == 1'b1)) begin
            grp_conv1_fu_52_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_conv2_fu_64_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_NS_fsm_state3) & (1'b1 == ap_CS_fsm_state2))) begin
            grp_conv2_fu_64_ap_start_reg <= 1'b1;
        end else if ((grp_conv2_fu_64_ap_ready == 1'b1)) begin
            grp_conv2_fu_64_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_conv3_fu_76_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state5)) begin
            grp_conv3_fu_76_ap_start_reg <= 1'b1;
        end else if ((grp_conv3_fu_76_ap_ready == 1'b1)) begin
            grp_conv3_fu_76_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        empty_reg_92 <= empty_fu_87_p1;
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if ((grp_conv1_fu_52_ap_done == 1'b0)) begin
        ap_ST_fsm_state2_blk = 1'b1;
    end else begin
        ap_ST_fsm_state2_blk = 1'b0;
    end
end

assign ap_ST_fsm_state3_blk = 1'b0;

always @ (*) begin
    if ((grp_conv2_fu_64_ap_done == 1'b0)) begin
        ap_ST_fsm_state4_blk = 1'b1;
    end else begin
        ap_ST_fsm_state4_blk = 1'b0;
    end
end

assign ap_ST_fsm_state5_blk = 1'b0;

always @ (*) begin
    if ((grp_conv3_fu_76_ap_done == 1'b0)) begin
        ap_ST_fsm_state6_blk = 1'b1;
    end else begin
        ap_ST_fsm_state6_blk = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) & (grp_conv3_fu_76_ap_done == 1'b1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) & (grp_conv3_fu_76_ap_done == 1'b1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_101_ce = grp_conv3_fu_76_grp_fu_101_p_ce;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_fu_101_ce = grp_conv2_fu_64_grp_fu_101_p_ce;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_101_ce = grp_conv1_fu_52_grp_fu_101_p_ce;
    end else begin
        grp_fu_101_ce = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_101_p0 = grp_conv3_fu_76_grp_fu_101_p_din0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_fu_101_p0 = grp_conv2_fu_64_grp_fu_101_p_din0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_101_p0 = grp_conv1_fu_52_grp_fu_101_p_din0;
    end else begin
        grp_fu_101_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_101_p1 = grp_conv3_fu_76_grp_fu_101_p_din1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_fu_101_p1 = grp_conv2_fu_64_grp_fu_101_p_din1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_101_p1 = grp_conv1_fu_52_grp_fu_101_p_din1;
    end else begin
        grp_fu_101_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_105_ce = grp_conv3_fu_76_grp_fu_105_p_ce;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_105_ce = grp_conv1_fu_52_grp_fu_105_p_ce;
    end else begin
        grp_fu_105_ce = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_105_p0 = grp_conv3_fu_76_grp_fu_105_p_din0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_105_p0 = grp_conv1_fu_52_grp_fu_105_p_din0;
    end else begin
        grp_fu_105_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_108_ce = grp_conv3_fu_76_grp_fu_108_p_ce;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_fu_108_ce = grp_conv2_fu_64_grp_fu_108_p_ce;
    end else begin
        grp_fu_108_ce = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_108_p0 = grp_conv3_fu_76_grp_fu_108_p_din0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_fu_108_p0 = grp_conv2_fu_64_grp_fu_108_p_din0;
    end else begin
        grp_fu_108_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_97_ce = grp_conv3_fu_76_grp_fu_97_p_ce;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_fu_97_ce = grp_conv2_fu_64_grp_fu_97_p_ce;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_97_ce = grp_conv1_fu_52_grp_fu_97_p_ce;
    end else begin
        grp_fu_97_ce = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_97_p0 = grp_conv3_fu_76_grp_fu_97_p_din0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_fu_97_p0 = grp_conv2_fu_64_grp_fu_97_p_din0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_97_p0 = grp_conv1_fu_52_grp_fu_97_p_din0;
    end else begin
        grp_fu_97_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_97_p1 = grp_conv3_fu_76_grp_fu_97_p_din1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_fu_97_p1 = grp_conv2_fu_64_grp_fu_97_p_din1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_97_p1 = grp_conv1_fu_52_grp_fu_97_p_din1;
    end else begin
        grp_fu_97_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        layer1_output_address0 = grp_conv2_fu_64_layer1_output_address0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        layer1_output_address0 = grp_conv1_fu_52_layer1_output_address0;
    end else begin
        layer1_output_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        layer1_output_ce0 = grp_conv2_fu_64_layer1_output_ce0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        layer1_output_ce0 = grp_conv1_fu_52_layer1_output_ce0;
    end else begin
        layer1_output_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        layer1_output_ce1 = grp_conv2_fu_64_layer1_output_ce1;
    end else begin
        layer1_output_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        layer1_output_we0 = grp_conv1_fu_52_layer1_output_we0;
    end else begin
        layer1_output_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        layer2_output_address0 = grp_conv3_fu_76_layer2_output_address0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        layer2_output_address0 = grp_conv2_fu_64_layer2_output_address0;
    end else begin
        layer2_output_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        layer2_output_ce0 = grp_conv3_fu_76_layer2_output_ce0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        layer2_output_ce0 = grp_conv2_fu_64_layer2_output_ce0;
    end else begin
        layer2_output_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        layer2_output_we0 = grp_conv2_fu_64_layer2_output_we0;
    end else begin
        layer2_output_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (grp_conv1_fu_52_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (grp_conv2_fu_64_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (grp_conv3_fu_76_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_NS_fsm_state3 = ap_NS_fsm[32'd2];

assign conv1_biases_address0 = grp_conv1_fu_52_conv1_biases_address0;

assign conv1_biases_ce0 = grp_conv1_fu_52_conv1_biases_ce0;

assign conv1_weights_address0 = grp_conv1_fu_52_conv1_weights_address0;

assign conv1_weights_address1 = grp_conv1_fu_52_conv1_weights_address1;

assign conv1_weights_ce0 = grp_conv1_fu_52_conv1_weights_ce0;

assign conv1_weights_ce1 = grp_conv1_fu_52_conv1_weights_ce1;

assign conv2_biases_address0 = grp_conv2_fu_64_conv2_biases_address0;

assign conv2_biases_ce0 = grp_conv2_fu_64_conv2_biases_ce0;

assign conv2_weights_address0 = grp_conv2_fu_64_conv2_weights_address0;

assign conv2_weights_address1 = grp_conv2_fu_64_conv2_weights_address1;

assign conv2_weights_ce0 = grp_conv2_fu_64_conv2_weights_ce0;

assign conv2_weights_ce1 = grp_conv2_fu_64_conv2_weights_ce1;

assign conv3_weights_address0 = grp_conv3_fu_76_conv3_weights_address0;

assign conv3_weights_address1 = grp_conv3_fu_76_conv3_weights_address1;

assign conv3_weights_ce0 = grp_conv3_fu_76_conv3_weights_ce0;

assign conv3_weights_ce1 = grp_conv3_fu_76_conv3_weights_ce1;

assign empty_fu_87_p1 = conv3_biases;

assign grp_conv1_fu_52_ap_start = grp_conv1_fu_52_ap_start_reg;

assign grp_conv2_fu_64_ap_start = grp_conv2_fu_64_ap_start_reg;

assign grp_conv3_fu_76_ap_start = grp_conv3_fu_76_ap_start_reg;

assign input_ftmap_address0 = grp_conv1_fu_52_input_ftmap_address0;

assign input_ftmap_ce0 = grp_conv1_fu_52_input_ftmap_ce0;

assign output_ftmap_address0 = grp_conv3_fu_76_output_ftmap_address0;

assign output_ftmap_ce0 = grp_conv3_fu_76_output_ftmap_ce0;

assign output_ftmap_d0 = grp_conv3_fu_76_output_ftmap_d0;

assign output_ftmap_we0 = grp_conv3_fu_76_output_ftmap_we0;

endmodule //srcnn
