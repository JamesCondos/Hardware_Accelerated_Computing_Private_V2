// ==============================================================
// Generated by Vitis HLS v2023.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module srcnn_conv2_single_from_c1_Pipeline_VITIS_LOOP_101_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        zext_ln103,
        conv2_weights_address0,
        conv2_weights_ce0,
        conv2_weights_q0,
        wrow_63_out,
        wrow_63_out_ap_vld,
        wrow_62_out,
        wrow_62_out_ap_vld,
        wrow_61_out,
        wrow_61_out_ap_vld,
        wrow_60_out,
        wrow_60_out_ap_vld,
        wrow_59_out,
        wrow_59_out_ap_vld,
        wrow_58_out,
        wrow_58_out_ap_vld,
        wrow_57_out,
        wrow_57_out_ap_vld,
        wrow_56_out,
        wrow_56_out_ap_vld,
        wrow_55_out,
        wrow_55_out_ap_vld,
        wrow_54_out,
        wrow_54_out_ap_vld,
        wrow_53_out,
        wrow_53_out_ap_vld,
        wrow_52_out,
        wrow_52_out_ap_vld,
        wrow_51_out,
        wrow_51_out_ap_vld,
        wrow_50_out,
        wrow_50_out_ap_vld,
        wrow_49_out,
        wrow_49_out_ap_vld,
        wrow_48_out,
        wrow_48_out_ap_vld,
        wrow_47_out,
        wrow_47_out_ap_vld,
        wrow_46_out,
        wrow_46_out_ap_vld,
        wrow_45_out,
        wrow_45_out_ap_vld,
        wrow_44_out,
        wrow_44_out_ap_vld,
        wrow_43_out,
        wrow_43_out_ap_vld,
        wrow_42_out,
        wrow_42_out_ap_vld,
        wrow_41_out,
        wrow_41_out_ap_vld,
        wrow_40_out,
        wrow_40_out_ap_vld,
        wrow_39_out,
        wrow_39_out_ap_vld,
        wrow_38_out,
        wrow_38_out_ap_vld,
        wrow_37_out,
        wrow_37_out_ap_vld,
        wrow_36_out,
        wrow_36_out_ap_vld,
        wrow_35_out,
        wrow_35_out_ap_vld,
        wrow_34_out,
        wrow_34_out_ap_vld,
        wrow_33_out,
        wrow_33_out_ap_vld,
        wrow_32_out,
        wrow_32_out_ap_vld,
        wrow_31_out,
        wrow_31_out_ap_vld,
        wrow_30_out,
        wrow_30_out_ap_vld,
        wrow_29_out,
        wrow_29_out_ap_vld,
        wrow_28_out,
        wrow_28_out_ap_vld,
        wrow_27_out,
        wrow_27_out_ap_vld,
        wrow_26_out,
        wrow_26_out_ap_vld,
        wrow_25_out,
        wrow_25_out_ap_vld,
        wrow_24_out,
        wrow_24_out_ap_vld,
        wrow_23_out,
        wrow_23_out_ap_vld,
        wrow_22_out,
        wrow_22_out_ap_vld,
        wrow_21_out,
        wrow_21_out_ap_vld,
        wrow_20_out,
        wrow_20_out_ap_vld,
        wrow_19_out,
        wrow_19_out_ap_vld,
        wrow_18_out,
        wrow_18_out_ap_vld,
        wrow_17_out,
        wrow_17_out_ap_vld,
        wrow_16_out,
        wrow_16_out_ap_vld,
        wrow_15_out,
        wrow_15_out_ap_vld,
        wrow_14_out,
        wrow_14_out_ap_vld,
        wrow_13_out,
        wrow_13_out_ap_vld,
        wrow_12_out,
        wrow_12_out_ap_vld,
        wrow_11_out,
        wrow_11_out_ap_vld,
        wrow_10_out,
        wrow_10_out_ap_vld,
        wrow_9_out,
        wrow_9_out_ap_vld,
        wrow_8_out,
        wrow_8_out_ap_vld,
        wrow_7_out,
        wrow_7_out_ap_vld,
        wrow_6_out,
        wrow_6_out_ap_vld,
        wrow_5_out,
        wrow_5_out_ap_vld,
        wrow_4_out,
        wrow_4_out_ap_vld,
        wrow_3_out,
        wrow_3_out_ap_vld,
        wrow_2_out,
        wrow_2_out_ap_vld,
        wrow_1_out,
        wrow_1_out_ap_vld,
        wrow_out,
        wrow_out_ap_vld
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [10:0] zext_ln103;
output  [10:0] conv2_weights_address0;
output   conv2_weights_ce0;
input  [31:0] conv2_weights_q0;
output  [31:0] wrow_63_out;
output   wrow_63_out_ap_vld;
output  [31:0] wrow_62_out;
output   wrow_62_out_ap_vld;
output  [31:0] wrow_61_out;
output   wrow_61_out_ap_vld;
output  [31:0] wrow_60_out;
output   wrow_60_out_ap_vld;
output  [31:0] wrow_59_out;
output   wrow_59_out_ap_vld;
output  [31:0] wrow_58_out;
output   wrow_58_out_ap_vld;
output  [31:0] wrow_57_out;
output   wrow_57_out_ap_vld;
output  [31:0] wrow_56_out;
output   wrow_56_out_ap_vld;
output  [31:0] wrow_55_out;
output   wrow_55_out_ap_vld;
output  [31:0] wrow_54_out;
output   wrow_54_out_ap_vld;
output  [31:0] wrow_53_out;
output   wrow_53_out_ap_vld;
output  [31:0] wrow_52_out;
output   wrow_52_out_ap_vld;
output  [31:0] wrow_51_out;
output   wrow_51_out_ap_vld;
output  [31:0] wrow_50_out;
output   wrow_50_out_ap_vld;
output  [31:0] wrow_49_out;
output   wrow_49_out_ap_vld;
output  [31:0] wrow_48_out;
output   wrow_48_out_ap_vld;
output  [31:0] wrow_47_out;
output   wrow_47_out_ap_vld;
output  [31:0] wrow_46_out;
output   wrow_46_out_ap_vld;
output  [31:0] wrow_45_out;
output   wrow_45_out_ap_vld;
output  [31:0] wrow_44_out;
output   wrow_44_out_ap_vld;
output  [31:0] wrow_43_out;
output   wrow_43_out_ap_vld;
output  [31:0] wrow_42_out;
output   wrow_42_out_ap_vld;
output  [31:0] wrow_41_out;
output   wrow_41_out_ap_vld;
output  [31:0] wrow_40_out;
output   wrow_40_out_ap_vld;
output  [31:0] wrow_39_out;
output   wrow_39_out_ap_vld;
output  [31:0] wrow_38_out;
output   wrow_38_out_ap_vld;
output  [31:0] wrow_37_out;
output   wrow_37_out_ap_vld;
output  [31:0] wrow_36_out;
output   wrow_36_out_ap_vld;
output  [31:0] wrow_35_out;
output   wrow_35_out_ap_vld;
output  [31:0] wrow_34_out;
output   wrow_34_out_ap_vld;
output  [31:0] wrow_33_out;
output   wrow_33_out_ap_vld;
output  [31:0] wrow_32_out;
output   wrow_32_out_ap_vld;
output  [31:0] wrow_31_out;
output   wrow_31_out_ap_vld;
output  [31:0] wrow_30_out;
output   wrow_30_out_ap_vld;
output  [31:0] wrow_29_out;
output   wrow_29_out_ap_vld;
output  [31:0] wrow_28_out;
output   wrow_28_out_ap_vld;
output  [31:0] wrow_27_out;
output   wrow_27_out_ap_vld;
output  [31:0] wrow_26_out;
output   wrow_26_out_ap_vld;
output  [31:0] wrow_25_out;
output   wrow_25_out_ap_vld;
output  [31:0] wrow_24_out;
output   wrow_24_out_ap_vld;
output  [31:0] wrow_23_out;
output   wrow_23_out_ap_vld;
output  [31:0] wrow_22_out;
output   wrow_22_out_ap_vld;
output  [31:0] wrow_21_out;
output   wrow_21_out_ap_vld;
output  [31:0] wrow_20_out;
output   wrow_20_out_ap_vld;
output  [31:0] wrow_19_out;
output   wrow_19_out_ap_vld;
output  [31:0] wrow_18_out;
output   wrow_18_out_ap_vld;
output  [31:0] wrow_17_out;
output   wrow_17_out_ap_vld;
output  [31:0] wrow_16_out;
output   wrow_16_out_ap_vld;
output  [31:0] wrow_15_out;
output   wrow_15_out_ap_vld;
output  [31:0] wrow_14_out;
output   wrow_14_out_ap_vld;
output  [31:0] wrow_13_out;
output   wrow_13_out_ap_vld;
output  [31:0] wrow_12_out;
output   wrow_12_out_ap_vld;
output  [31:0] wrow_11_out;
output   wrow_11_out_ap_vld;
output  [31:0] wrow_10_out;
output   wrow_10_out_ap_vld;
output  [31:0] wrow_9_out;
output   wrow_9_out_ap_vld;
output  [31:0] wrow_8_out;
output   wrow_8_out_ap_vld;
output  [31:0] wrow_7_out;
output   wrow_7_out_ap_vld;
output  [31:0] wrow_6_out;
output   wrow_6_out_ap_vld;
output  [31:0] wrow_5_out;
output   wrow_5_out_ap_vld;
output  [31:0] wrow_4_out;
output   wrow_4_out_ap_vld;
output  [31:0] wrow_3_out;
output   wrow_3_out_ap_vld;
output  [31:0] wrow_2_out;
output   wrow_2_out_ap_vld;
output  [31:0] wrow_1_out;
output   wrow_1_out_ap_vld;
output  [31:0] wrow_out;
output   wrow_out_ap_vld;

reg ap_idle;
reg conv2_weights_ce0;
reg wrow_63_out_ap_vld;
reg wrow_62_out_ap_vld;
reg wrow_61_out_ap_vld;
reg wrow_60_out_ap_vld;
reg wrow_59_out_ap_vld;
reg wrow_58_out_ap_vld;
reg wrow_57_out_ap_vld;
reg wrow_56_out_ap_vld;
reg wrow_55_out_ap_vld;
reg wrow_54_out_ap_vld;
reg wrow_53_out_ap_vld;
reg wrow_52_out_ap_vld;
reg wrow_51_out_ap_vld;
reg wrow_50_out_ap_vld;
reg wrow_49_out_ap_vld;
reg wrow_48_out_ap_vld;
reg wrow_47_out_ap_vld;
reg wrow_46_out_ap_vld;
reg wrow_45_out_ap_vld;
reg wrow_44_out_ap_vld;
reg wrow_43_out_ap_vld;
reg wrow_42_out_ap_vld;
reg wrow_41_out_ap_vld;
reg wrow_40_out_ap_vld;
reg wrow_39_out_ap_vld;
reg wrow_38_out_ap_vld;
reg wrow_37_out_ap_vld;
reg wrow_36_out_ap_vld;
reg wrow_35_out_ap_vld;
reg wrow_34_out_ap_vld;
reg wrow_33_out_ap_vld;
reg wrow_32_out_ap_vld;
reg wrow_31_out_ap_vld;
reg wrow_30_out_ap_vld;
reg wrow_29_out_ap_vld;
reg wrow_28_out_ap_vld;
reg wrow_27_out_ap_vld;
reg wrow_26_out_ap_vld;
reg wrow_25_out_ap_vld;
reg wrow_24_out_ap_vld;
reg wrow_23_out_ap_vld;
reg wrow_22_out_ap_vld;
reg wrow_21_out_ap_vld;
reg wrow_20_out_ap_vld;
reg wrow_19_out_ap_vld;
reg wrow_18_out_ap_vld;
reg wrow_17_out_ap_vld;
reg wrow_16_out_ap_vld;
reg wrow_15_out_ap_vld;
reg wrow_14_out_ap_vld;
reg wrow_13_out_ap_vld;
reg wrow_12_out_ap_vld;
reg wrow_11_out_ap_vld;
reg wrow_10_out_ap_vld;
reg wrow_9_out_ap_vld;
reg wrow_8_out_ap_vld;
reg wrow_7_out_ap_vld;
reg wrow_6_out_ap_vld;
reg wrow_5_out_ap_vld;
reg wrow_4_out_ap_vld;
reg wrow_3_out_ap_vld;
reg wrow_2_out_ap_vld;
reg wrow_1_out_ap_vld;
reg wrow_out_ap_vld;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_block_state1_pp0_stage0_iter0;
wire   [0:0] icmp_ln101_fu_1029_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_CS_fsm_state2;
wire    ap_block_state2_pp0_stage1_iter0;
wire   [6:0] add_ln101_fu_1035_p2;
reg   [6:0] add_ln101_reg_2038;
wire   [5:0] trunc_ln101_fu_1056_p1;
reg   [5:0] trunc_ln101_reg_2048;
wire   [63:0] zext_ln103_2_fu_1051_p1;
reg   [6:0] c1_fu_294;
wire    ap_loop_init;
reg   [6:0] ap_sig_allocacmp_c1_2;
reg   [31:0] wrow_fu_298;
wire   [31:0] wrow_64_fu_1060_p1;
reg   [31:0] wrow_1_fu_302;
reg   [31:0] wrow_2_fu_306;
reg   [31:0] wrow_3_fu_310;
reg   [31:0] wrow_4_fu_314;
reg   [31:0] wrow_5_fu_318;
reg   [31:0] wrow_6_fu_322;
reg   [31:0] wrow_7_fu_326;
reg   [31:0] wrow_8_fu_330;
reg   [31:0] wrow_9_fu_334;
reg   [31:0] wrow_10_fu_338;
reg   [31:0] wrow_11_fu_342;
reg   [31:0] wrow_12_fu_346;
reg   [31:0] wrow_13_fu_350;
reg   [31:0] wrow_14_fu_354;
reg   [31:0] wrow_15_fu_358;
reg   [31:0] wrow_16_fu_362;
reg   [31:0] wrow_17_fu_366;
reg   [31:0] wrow_18_fu_370;
reg   [31:0] wrow_19_fu_374;
reg   [31:0] wrow_20_fu_378;
reg   [31:0] wrow_21_fu_382;
reg   [31:0] wrow_22_fu_386;
reg   [31:0] wrow_23_fu_390;
reg   [31:0] wrow_24_fu_394;
reg   [31:0] wrow_25_fu_398;
reg   [31:0] wrow_26_fu_402;
reg   [31:0] wrow_27_fu_406;
reg   [31:0] wrow_28_fu_410;
reg   [31:0] wrow_29_fu_414;
reg   [31:0] wrow_30_fu_418;
reg   [31:0] wrow_31_fu_422;
reg   [31:0] wrow_32_fu_426;
reg   [31:0] wrow_33_fu_430;
reg   [31:0] wrow_34_fu_434;
reg   [31:0] wrow_35_fu_438;
reg   [31:0] wrow_36_fu_442;
reg   [31:0] wrow_37_fu_446;
reg   [31:0] wrow_38_fu_450;
reg   [31:0] wrow_39_fu_454;
reg   [31:0] wrow_40_fu_458;
reg   [31:0] wrow_41_fu_462;
reg   [31:0] wrow_42_fu_466;
reg   [31:0] wrow_43_fu_470;
reg   [31:0] wrow_44_fu_474;
reg   [31:0] wrow_45_fu_478;
reg   [31:0] wrow_46_fu_482;
reg   [31:0] wrow_47_fu_486;
reg   [31:0] wrow_48_fu_490;
reg   [31:0] wrow_49_fu_494;
reg   [31:0] wrow_50_fu_498;
reg   [31:0] wrow_51_fu_502;
reg   [31:0] wrow_52_fu_506;
reg   [31:0] wrow_53_fu_510;
reg   [31:0] wrow_54_fu_514;
reg   [31:0] wrow_55_fu_518;
reg   [31:0] wrow_56_fu_522;
reg   [31:0] wrow_57_fu_526;
reg   [31:0] wrow_58_fu_530;
reg   [31:0] wrow_59_fu_534;
reg   [31:0] wrow_60_fu_538;
reg   [31:0] wrow_61_fu_542;
reg   [31:0] wrow_62_fu_546;
reg   [31:0] wrow_63_fu_550;
wire   [10:0] zext_ln103_1_fu_1041_p1;
wire   [10:0] add_ln103_fu_1045_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [1:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 ap_done_reg = 1'b0;
end

srcnn_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_start_int == 1'b1) & (ap_loop_exit_ready == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (ap_loop_init == 1'b1))) begin
        c1_fu_294 <= 7'd0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        c1_fu_294 <= add_ln101_reg_2038;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        add_ln101_reg_2038 <= add_ln101_fu_1035_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (icmp_ln101_fu_1029_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        trunc_ln101_reg_2048 <= trunc_ln101_fu_1056_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (trunc_ln101_reg_2048 == 6'd10))) begin
        wrow_10_fu_338 <= wrow_64_fu_1060_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (trunc_ln101_reg_2048 == 6'd11))) begin
        wrow_11_fu_342 <= wrow_64_fu_1060_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (trunc_ln101_reg_2048 == 6'd12))) begin
        wrow_12_fu_346 <= wrow_64_fu_1060_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (trunc_ln101_reg_2048 == 6'd13))) begin
        wrow_13_fu_350 <= wrow_64_fu_1060_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (trunc_ln101_reg_2048 == 6'd14))) begin
        wrow_14_fu_354 <= wrow_64_fu_1060_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (trunc_ln101_reg_2048 == 6'd15))) begin
        wrow_15_fu_358 <= wrow_64_fu_1060_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (trunc_ln101_reg_2048 == 6'd16))) begin
        wrow_16_fu_362 <= wrow_64_fu_1060_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (trunc_ln101_reg_2048 == 6'd17))) begin
        wrow_17_fu_366 <= wrow_64_fu_1060_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (trunc_ln101_reg_2048 == 6'd18))) begin
        wrow_18_fu_370 <= wrow_64_fu_1060_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (trunc_ln101_reg_2048 == 6'd19))) begin
        wrow_19_fu_374 <= wrow_64_fu_1060_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (trunc_ln101_reg_2048 == 6'd1))) begin
        wrow_1_fu_302 <= wrow_64_fu_1060_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (trunc_ln101_reg_2048 == 6'd20))) begin
        wrow_20_fu_378 <= wrow_64_fu_1060_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (trunc_ln101_reg_2048 == 6'd21))) begin
        wrow_21_fu_382 <= wrow_64_fu_1060_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (trunc_ln101_reg_2048 == 6'd22))) begin
        wrow_22_fu_386 <= wrow_64_fu_1060_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (trunc_ln101_reg_2048 == 6'd23))) begin
        wrow_23_fu_390 <= wrow_64_fu_1060_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (trunc_ln101_reg_2048 == 6'd24))) begin
        wrow_24_fu_394 <= wrow_64_fu_1060_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (trunc_ln101_reg_2048 == 6'd25))) begin
        wrow_25_fu_398 <= wrow_64_fu_1060_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (trunc_ln101_reg_2048 == 6'd26))) begin
        wrow_26_fu_402 <= wrow_64_fu_1060_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (trunc_ln101_reg_2048 == 6'd27))) begin
        wrow_27_fu_406 <= wrow_64_fu_1060_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (trunc_ln101_reg_2048 == 6'd28))) begin
        wrow_28_fu_410 <= wrow_64_fu_1060_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (trunc_ln101_reg_2048 == 6'd29))) begin
        wrow_29_fu_414 <= wrow_64_fu_1060_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (trunc_ln101_reg_2048 == 6'd2))) begin
        wrow_2_fu_306 <= wrow_64_fu_1060_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (trunc_ln101_reg_2048 == 6'd30))) begin
        wrow_30_fu_418 <= wrow_64_fu_1060_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (trunc_ln101_reg_2048 == 6'd31))) begin
        wrow_31_fu_422 <= wrow_64_fu_1060_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (trunc_ln101_reg_2048 == 6'd32))) begin
        wrow_32_fu_426 <= wrow_64_fu_1060_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (trunc_ln101_reg_2048 == 6'd33))) begin
        wrow_33_fu_430 <= wrow_64_fu_1060_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (trunc_ln101_reg_2048 == 6'd34))) begin
        wrow_34_fu_434 <= wrow_64_fu_1060_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (trunc_ln101_reg_2048 == 6'd35))) begin
        wrow_35_fu_438 <= wrow_64_fu_1060_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (trunc_ln101_reg_2048 == 6'd36))) begin
        wrow_36_fu_442 <= wrow_64_fu_1060_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (trunc_ln101_reg_2048 == 6'd37))) begin
        wrow_37_fu_446 <= wrow_64_fu_1060_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (trunc_ln101_reg_2048 == 6'd38))) begin
        wrow_38_fu_450 <= wrow_64_fu_1060_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (trunc_ln101_reg_2048 == 6'd39))) begin
        wrow_39_fu_454 <= wrow_64_fu_1060_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (trunc_ln101_reg_2048 == 6'd3))) begin
        wrow_3_fu_310 <= wrow_64_fu_1060_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (trunc_ln101_reg_2048 == 6'd40))) begin
        wrow_40_fu_458 <= wrow_64_fu_1060_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (trunc_ln101_reg_2048 == 6'd41))) begin
        wrow_41_fu_462 <= wrow_64_fu_1060_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (trunc_ln101_reg_2048 == 6'd42))) begin
        wrow_42_fu_466 <= wrow_64_fu_1060_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (trunc_ln101_reg_2048 == 6'd43))) begin
        wrow_43_fu_470 <= wrow_64_fu_1060_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (trunc_ln101_reg_2048 == 6'd44))) begin
        wrow_44_fu_474 <= wrow_64_fu_1060_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (trunc_ln101_reg_2048 == 6'd45))) begin
        wrow_45_fu_478 <= wrow_64_fu_1060_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (trunc_ln101_reg_2048 == 6'd46))) begin
        wrow_46_fu_482 <= wrow_64_fu_1060_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (trunc_ln101_reg_2048 == 6'd47))) begin
        wrow_47_fu_486 <= wrow_64_fu_1060_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (trunc_ln101_reg_2048 == 6'd48))) begin
        wrow_48_fu_490 <= wrow_64_fu_1060_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (trunc_ln101_reg_2048 == 6'd49))) begin
        wrow_49_fu_494 <= wrow_64_fu_1060_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (trunc_ln101_reg_2048 == 6'd4))) begin
        wrow_4_fu_314 <= wrow_64_fu_1060_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (trunc_ln101_reg_2048 == 6'd50))) begin
        wrow_50_fu_498 <= wrow_64_fu_1060_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (trunc_ln101_reg_2048 == 6'd51))) begin
        wrow_51_fu_502 <= wrow_64_fu_1060_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (trunc_ln101_reg_2048 == 6'd52))) begin
        wrow_52_fu_506 <= wrow_64_fu_1060_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (trunc_ln101_reg_2048 == 6'd53))) begin
        wrow_53_fu_510 <= wrow_64_fu_1060_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (trunc_ln101_reg_2048 == 6'd54))) begin
        wrow_54_fu_514 <= wrow_64_fu_1060_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (trunc_ln101_reg_2048 == 6'd55))) begin
        wrow_55_fu_518 <= wrow_64_fu_1060_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (trunc_ln101_reg_2048 == 6'd56))) begin
        wrow_56_fu_522 <= wrow_64_fu_1060_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (trunc_ln101_reg_2048 == 6'd57))) begin
        wrow_57_fu_526 <= wrow_64_fu_1060_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (trunc_ln101_reg_2048 == 6'd58))) begin
        wrow_58_fu_530 <= wrow_64_fu_1060_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (trunc_ln101_reg_2048 == 6'd59))) begin
        wrow_59_fu_534 <= wrow_64_fu_1060_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (trunc_ln101_reg_2048 == 6'd5))) begin
        wrow_5_fu_318 <= wrow_64_fu_1060_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (trunc_ln101_reg_2048 == 6'd60))) begin
        wrow_60_fu_538 <= wrow_64_fu_1060_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (trunc_ln101_reg_2048 == 6'd61))) begin
        wrow_61_fu_542 <= wrow_64_fu_1060_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (trunc_ln101_reg_2048 == 6'd62))) begin
        wrow_62_fu_546 <= wrow_64_fu_1060_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (trunc_ln101_reg_2048 == 6'd63))) begin
        wrow_63_fu_550 <= wrow_64_fu_1060_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (trunc_ln101_reg_2048 == 6'd6))) begin
        wrow_6_fu_322 <= wrow_64_fu_1060_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (trunc_ln101_reg_2048 == 6'd7))) begin
        wrow_7_fu_326 <= wrow_64_fu_1060_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (trunc_ln101_reg_2048 == 6'd8))) begin
        wrow_8_fu_330 <= wrow_64_fu_1060_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (trunc_ln101_reg_2048 == 6'd9))) begin
        wrow_9_fu_334 <= wrow_64_fu_1060_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (trunc_ln101_reg_2048 == 6'd0))) begin
        wrow_fu_298 <= wrow_64_fu_1060_p1;
    end
end

always @ (*) begin
    if ((ap_start_int == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln101_fu_1029_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (ap_loop_exit_ready == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_c1_2 = 7'd0;
    end else begin
        ap_sig_allocacmp_c1_2 = c1_fu_294;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        conv2_weights_ce0 = 1'b1;
    end else begin
        conv2_weights_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln101_fu_1029_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        wrow_10_out_ap_vld = 1'b1;
    end else begin
        wrow_10_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln101_fu_1029_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        wrow_11_out_ap_vld = 1'b1;
    end else begin
        wrow_11_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln101_fu_1029_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        wrow_12_out_ap_vld = 1'b1;
    end else begin
        wrow_12_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln101_fu_1029_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        wrow_13_out_ap_vld = 1'b1;
    end else begin
        wrow_13_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln101_fu_1029_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        wrow_14_out_ap_vld = 1'b1;
    end else begin
        wrow_14_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln101_fu_1029_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        wrow_15_out_ap_vld = 1'b1;
    end else begin
        wrow_15_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln101_fu_1029_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        wrow_16_out_ap_vld = 1'b1;
    end else begin
        wrow_16_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln101_fu_1029_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        wrow_17_out_ap_vld = 1'b1;
    end else begin
        wrow_17_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln101_fu_1029_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        wrow_18_out_ap_vld = 1'b1;
    end else begin
        wrow_18_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln101_fu_1029_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        wrow_19_out_ap_vld = 1'b1;
    end else begin
        wrow_19_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln101_fu_1029_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        wrow_1_out_ap_vld = 1'b1;
    end else begin
        wrow_1_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln101_fu_1029_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        wrow_20_out_ap_vld = 1'b1;
    end else begin
        wrow_20_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln101_fu_1029_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        wrow_21_out_ap_vld = 1'b1;
    end else begin
        wrow_21_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln101_fu_1029_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        wrow_22_out_ap_vld = 1'b1;
    end else begin
        wrow_22_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln101_fu_1029_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        wrow_23_out_ap_vld = 1'b1;
    end else begin
        wrow_23_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln101_fu_1029_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        wrow_24_out_ap_vld = 1'b1;
    end else begin
        wrow_24_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln101_fu_1029_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        wrow_25_out_ap_vld = 1'b1;
    end else begin
        wrow_25_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln101_fu_1029_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        wrow_26_out_ap_vld = 1'b1;
    end else begin
        wrow_26_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln101_fu_1029_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        wrow_27_out_ap_vld = 1'b1;
    end else begin
        wrow_27_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln101_fu_1029_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        wrow_28_out_ap_vld = 1'b1;
    end else begin
        wrow_28_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln101_fu_1029_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        wrow_29_out_ap_vld = 1'b1;
    end else begin
        wrow_29_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln101_fu_1029_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        wrow_2_out_ap_vld = 1'b1;
    end else begin
        wrow_2_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln101_fu_1029_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        wrow_30_out_ap_vld = 1'b1;
    end else begin
        wrow_30_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln101_fu_1029_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        wrow_31_out_ap_vld = 1'b1;
    end else begin
        wrow_31_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln101_fu_1029_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        wrow_32_out_ap_vld = 1'b1;
    end else begin
        wrow_32_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln101_fu_1029_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        wrow_33_out_ap_vld = 1'b1;
    end else begin
        wrow_33_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln101_fu_1029_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        wrow_34_out_ap_vld = 1'b1;
    end else begin
        wrow_34_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln101_fu_1029_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        wrow_35_out_ap_vld = 1'b1;
    end else begin
        wrow_35_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln101_fu_1029_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        wrow_36_out_ap_vld = 1'b1;
    end else begin
        wrow_36_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln101_fu_1029_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        wrow_37_out_ap_vld = 1'b1;
    end else begin
        wrow_37_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln101_fu_1029_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        wrow_38_out_ap_vld = 1'b1;
    end else begin
        wrow_38_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln101_fu_1029_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        wrow_39_out_ap_vld = 1'b1;
    end else begin
        wrow_39_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln101_fu_1029_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        wrow_3_out_ap_vld = 1'b1;
    end else begin
        wrow_3_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln101_fu_1029_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        wrow_40_out_ap_vld = 1'b1;
    end else begin
        wrow_40_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln101_fu_1029_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        wrow_41_out_ap_vld = 1'b1;
    end else begin
        wrow_41_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln101_fu_1029_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        wrow_42_out_ap_vld = 1'b1;
    end else begin
        wrow_42_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln101_fu_1029_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        wrow_43_out_ap_vld = 1'b1;
    end else begin
        wrow_43_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln101_fu_1029_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        wrow_44_out_ap_vld = 1'b1;
    end else begin
        wrow_44_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln101_fu_1029_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        wrow_45_out_ap_vld = 1'b1;
    end else begin
        wrow_45_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln101_fu_1029_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        wrow_46_out_ap_vld = 1'b1;
    end else begin
        wrow_46_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln101_fu_1029_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        wrow_47_out_ap_vld = 1'b1;
    end else begin
        wrow_47_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln101_fu_1029_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        wrow_48_out_ap_vld = 1'b1;
    end else begin
        wrow_48_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln101_fu_1029_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        wrow_49_out_ap_vld = 1'b1;
    end else begin
        wrow_49_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln101_fu_1029_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        wrow_4_out_ap_vld = 1'b1;
    end else begin
        wrow_4_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln101_fu_1029_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        wrow_50_out_ap_vld = 1'b1;
    end else begin
        wrow_50_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln101_fu_1029_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        wrow_51_out_ap_vld = 1'b1;
    end else begin
        wrow_51_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln101_fu_1029_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        wrow_52_out_ap_vld = 1'b1;
    end else begin
        wrow_52_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln101_fu_1029_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        wrow_53_out_ap_vld = 1'b1;
    end else begin
        wrow_53_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln101_fu_1029_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        wrow_54_out_ap_vld = 1'b1;
    end else begin
        wrow_54_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln101_fu_1029_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        wrow_55_out_ap_vld = 1'b1;
    end else begin
        wrow_55_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln101_fu_1029_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        wrow_56_out_ap_vld = 1'b1;
    end else begin
        wrow_56_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln101_fu_1029_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        wrow_57_out_ap_vld = 1'b1;
    end else begin
        wrow_57_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln101_fu_1029_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        wrow_58_out_ap_vld = 1'b1;
    end else begin
        wrow_58_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln101_fu_1029_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        wrow_59_out_ap_vld = 1'b1;
    end else begin
        wrow_59_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln101_fu_1029_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        wrow_5_out_ap_vld = 1'b1;
    end else begin
        wrow_5_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln101_fu_1029_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        wrow_60_out_ap_vld = 1'b1;
    end else begin
        wrow_60_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln101_fu_1029_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        wrow_61_out_ap_vld = 1'b1;
    end else begin
        wrow_61_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln101_fu_1029_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        wrow_62_out_ap_vld = 1'b1;
    end else begin
        wrow_62_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln101_fu_1029_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        wrow_63_out_ap_vld = 1'b1;
    end else begin
        wrow_63_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln101_fu_1029_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        wrow_6_out_ap_vld = 1'b1;
    end else begin
        wrow_6_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln101_fu_1029_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        wrow_7_out_ap_vld = 1'b1;
    end else begin
        wrow_7_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln101_fu_1029_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        wrow_8_out_ap_vld = 1'b1;
    end else begin
        wrow_8_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln101_fu_1029_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        wrow_9_out_ap_vld = 1'b1;
    end else begin
        wrow_9_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln101_fu_1029_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        wrow_out_ap_vld = 1'b1;
    end else begin
        wrow_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start_int == 1'b1) & (icmp_ln101_fu_1029_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln101_fu_1035_p2 = (ap_sig_allocacmp_c1_2 + 7'd1);

assign add_ln103_fu_1045_p2 = (zext_ln103 + zext_ln103_1_fu_1041_p1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start_int == 1'b0);
end

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign conv2_weights_address0 = zext_ln103_2_fu_1051_p1;

assign icmp_ln101_fu_1029_p2 = ((ap_sig_allocacmp_c1_2 == 7'd64) ? 1'b1 : 1'b0);

assign trunc_ln101_fu_1056_p1 = ap_sig_allocacmp_c1_2[5:0];

assign wrow_10_out = wrow_10_fu_338;

assign wrow_11_out = wrow_11_fu_342;

assign wrow_12_out = wrow_12_fu_346;

assign wrow_13_out = wrow_13_fu_350;

assign wrow_14_out = wrow_14_fu_354;

assign wrow_15_out = wrow_15_fu_358;

assign wrow_16_out = wrow_16_fu_362;

assign wrow_17_out = wrow_17_fu_366;

assign wrow_18_out = wrow_18_fu_370;

assign wrow_19_out = wrow_19_fu_374;

assign wrow_1_out = wrow_1_fu_302;

assign wrow_20_out = wrow_20_fu_378;

assign wrow_21_out = wrow_21_fu_382;

assign wrow_22_out = wrow_22_fu_386;

assign wrow_23_out = wrow_23_fu_390;

assign wrow_24_out = wrow_24_fu_394;

assign wrow_25_out = wrow_25_fu_398;

assign wrow_26_out = wrow_26_fu_402;

assign wrow_27_out = wrow_27_fu_406;

assign wrow_28_out = wrow_28_fu_410;

assign wrow_29_out = wrow_29_fu_414;

assign wrow_2_out = wrow_2_fu_306;

assign wrow_30_out = wrow_30_fu_418;

assign wrow_31_out = wrow_31_fu_422;

assign wrow_32_out = wrow_32_fu_426;

assign wrow_33_out = wrow_33_fu_430;

assign wrow_34_out = wrow_34_fu_434;

assign wrow_35_out = wrow_35_fu_438;

assign wrow_36_out = wrow_36_fu_442;

assign wrow_37_out = wrow_37_fu_446;

assign wrow_38_out = wrow_38_fu_450;

assign wrow_39_out = wrow_39_fu_454;

assign wrow_3_out = wrow_3_fu_310;

assign wrow_40_out = wrow_40_fu_458;

assign wrow_41_out = wrow_41_fu_462;

assign wrow_42_out = wrow_42_fu_466;

assign wrow_43_out = wrow_43_fu_470;

assign wrow_44_out = wrow_44_fu_474;

assign wrow_45_out = wrow_45_fu_478;

assign wrow_46_out = wrow_46_fu_482;

assign wrow_47_out = wrow_47_fu_486;

assign wrow_48_out = wrow_48_fu_490;

assign wrow_49_out = wrow_49_fu_494;

assign wrow_4_out = wrow_4_fu_314;

assign wrow_50_out = wrow_50_fu_498;

assign wrow_51_out = wrow_51_fu_502;

assign wrow_52_out = wrow_52_fu_506;

assign wrow_53_out = wrow_53_fu_510;

assign wrow_54_out = wrow_54_fu_514;

assign wrow_55_out = wrow_55_fu_518;

assign wrow_56_out = wrow_56_fu_522;

assign wrow_57_out = wrow_57_fu_526;

assign wrow_58_out = wrow_58_fu_530;

assign wrow_59_out = wrow_59_fu_534;

assign wrow_5_out = wrow_5_fu_318;

assign wrow_60_out = wrow_60_fu_538;

assign wrow_61_out = wrow_61_fu_542;

assign wrow_62_out = wrow_62_fu_546;

assign wrow_63_out = wrow_63_fu_550;

assign wrow_64_fu_1060_p1 = conv2_weights_q0;

assign wrow_6_out = wrow_6_fu_322;

assign wrow_7_out = wrow_7_fu_326;

assign wrow_8_out = wrow_8_fu_330;

assign wrow_9_out = wrow_9_fu_334;

assign wrow_out = wrow_fu_298;

assign zext_ln103_1_fu_1041_p1 = ap_sig_allocacmp_c1_2;

assign zext_ln103_2_fu_1051_p1 = add_ln103_fu_1045_p2;

endmodule //srcnn_conv2_single_from_c1_Pipeline_VITIS_LOOP_101_1
