-- ==============================================================
-- Generated by Vitis HLS v2023.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity srcnn_load_patch_tile_Pipeline_VITIS_LOOP_50_1_VITIS_LOOP_51_2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    tmp_cast : IN STD_LOGIC_VECTOR (8 downto 0);
    h0_cast : IN STD_LOGIC_VECTOR (7 downto 0);
    bound : IN STD_LOGIC_VECTOR (16 downto 0);
    add_ln50_1 : IN STD_LOGIC_VECTOR (8 downto 0);
    patch_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    patch_ce0 : OUT STD_LOGIC;
    patch_we0 : OUT STD_LOGIC;
    patch_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    zext_ln50 : IN STD_LOGIC_VECTOR (7 downto 0);
    w0_cast3 : IN STD_LOGIC_VECTOR (7 downto 0);
    input_ftmap_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    input_ftmap_ce0 : OUT STD_LOGIC;
    input_ftmap_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of srcnn_load_patch_tile_Pipeline_VITIS_LOOP_50_1_VITIS_LOOP_51_2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv17_0 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv11_FE : STD_LOGIC_VECTOR (10 downto 0) := "00011111110";
    constant ap_const_lv8_FA : STD_LOGIC_VECTOR (7 downto 0) := "11111010";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv8_FE : STD_LOGIC_VECTOR (7 downto 0) := "11111110";
    constant ap_const_lv17_1 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv9_1FA : STD_LOGIC_VECTOR (8 downto 0) := "111111010";
    constant ap_const_lv10_3FA : STD_LOGIC_VECTOR (9 downto 0) := "1111111010";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv13_4C : STD_LOGIC_VECTOR (12 downto 0) := "0000001001100";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln50_fu_247_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal w0_cast3_cast_fu_154_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal w0_cast3_cast_reg_550 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln50_cast_fu_158_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln50_cast_reg_555 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_cast_cast_fu_162_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_cast_cast_reg_560 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln50_fu_272_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln50_reg_570 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln50_reg_570_pp0_iter2_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln50_2_fu_352_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln50_2_reg_582 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln50_2_reg_582_pp0_iter2_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln56_3_fu_490_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln56_2_fu_495_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal px_fu_80 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln51_fu_360_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal py_fu_84 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln50_1_fu_280_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal indvar_flatten_fu_88 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln50_2_fu_252_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln50_1_fu_187_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal empty_21_fu_195_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal empty_fu_191_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln26_8_fu_214_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_fu_200_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln26_fu_208_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln26_fu_233_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln26_fu_225_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln26_fu_220_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln51_fu_267_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln50_fu_261_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln50_3_fu_292_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_mid1_fu_300_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal empty_22_fu_296_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln26_10_fu_319_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_9_fu_305_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln26_4_fu_313_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln26_5_fu_338_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln26_11_fu_330_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln26_11_fu_325_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln26_12_fu_344_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal yy_fu_239_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_6_fu_384_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln56_fu_381_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln54_fu_406_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln54_fu_411_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln51_fu_400_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln54_1_fu_415_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln54_fu_403_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln26_9_fu_435_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal sext_ln26_fu_441_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_11_fu_450_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_10_fu_421_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln26_5_fu_429_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln26_4_fu_466_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln26_13_fu_458_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln26_4_fu_445_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal xx_fu_472_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln56_fu_391_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln56_fu_480_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln56_1_fu_484_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_504_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_504_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_504_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_504_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal grp_fu_504_p00 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_504_p20 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component srcnn_mac_muladd_9ns_7ns_9ns_13_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (8 downto 0);
        din1 : IN STD_LOGIC_VECTOR (6 downto 0);
        din2 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (12 downto 0) );
    end component;


    component srcnn_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mac_muladd_9ns_7ns_9ns_13_4_1_U1 : component srcnn_mac_muladd_9ns_7ns_9ns_13_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 9,
        din1_WIDTH => 7,
        din2_WIDTH => 9,
        dout_WIDTH => 13)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_504_p0,
        din1 => grp_fu_504_p1,
        din2 => grp_fu_504_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_504_p3);

    flow_control_loop_pipe_sequential_init_U : component srcnn_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter1_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter3_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    indvar_flatten_fu_88_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten_fu_88 <= ap_const_lv17_0;
                elsif (((icmp_ln50_fu_247_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    indvar_flatten_fu_88 <= add_ln50_2_fu_252_p2;
                end if;
            end if; 
        end if;
    end process;

    px_fu_80_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    px_fu_80 <= ap_const_lv9_0;
                elsif (((icmp_ln50_fu_247_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    px_fu_80 <= add_ln51_fu_360_p2;
                end if;
            end if; 
        end if;
    end process;

    py_fu_84_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    py_fu_84 <= ap_const_lv9_0;
                elsif (((icmp_ln50_fu_247_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    py_fu_84 <= select_ln50_1_fu_280_p3;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
                tmp_cast_cast_reg_560 <= tmp_cast_cast_fu_162_p1;
                    w0_cast3_cast_reg_550(7 downto 0) <= w0_cast3_cast_fu_154_p1(7 downto 0);
                    zext_ln50_cast_reg_555(7 downto 0) <= zext_ln50_cast_fu_158_p1(7 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                select_ln50_2_reg_582_pp0_iter2_reg <= select_ln50_2_reg_582;
                select_ln50_reg_570_pp0_iter2_reg <= select_ln50_reg_570;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln50_fu_247_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                select_ln50_2_reg_582 <= select_ln50_2_fu_352_p3;
                select_ln50_reg_570 <= select_ln50_fu_272_p3;
            end if;
        end if;
    end process;
    w0_cast3_cast_reg_550(10 downto 8) <= "000";
    zext_ln50_cast_reg_555(8) <= '0';

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln26_10_fu_319_p2 <= std_logic_vector(unsigned(empty_22_fu_296_p1) + unsigned(ap_const_lv8_FA));
    add_ln26_11_fu_325_p2 <= std_logic_vector(unsigned(add_ln26_10_fu_319_p2) + unsigned(h0_cast));
    add_ln26_4_fu_445_p2 <= std_logic_vector(signed(sext_ln26_fu_441_p1) + signed(w0_cast3_cast_reg_550));
    add_ln26_8_fu_214_p2 <= std_logic_vector(unsigned(empty_fu_191_p1) + unsigned(ap_const_lv8_FA));
    add_ln26_9_fu_435_p2 <= std_logic_vector(unsigned(zext_ln54_fu_403_p1) + unsigned(ap_const_lv10_3FA));
    add_ln26_fu_220_p2 <= std_logic_vector(unsigned(add_ln26_8_fu_214_p2) + unsigned(h0_cast));
    add_ln50_2_fu_252_p2 <= std_logic_vector(unsigned(indvar_flatten_fu_88) + unsigned(ap_const_lv17_1));
    add_ln50_fu_261_p2 <= std_logic_vector(unsigned(py_fu_84) + unsigned(ap_const_lv9_1));
    add_ln51_fu_360_p2 <= std_logic_vector(unsigned(select_ln50_fu_272_p3) + unsigned(ap_const_lv9_1));
    add_ln54_1_fu_415_p2 <= std_logic_vector(signed(sext_ln54_fu_411_p1) + signed(zext_ln51_fu_400_p1));
    add_ln54_fu_406_p2 <= std_logic_vector(unsigned(zext_ln50_cast_reg_555) + unsigned(ap_const_lv9_1FA));
    add_ln56_1_fu_484_p2 <= std_logic_vector(unsigned(sub_ln56_fu_391_p2) + unsigned(sext_ln56_fu_480_p1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, icmp_ln50_fu_247_p2)
    begin
        if (((icmp_ln50_fu_247_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter3_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter3_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter1_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;

    empty_21_fu_195_p2 <= std_logic_vector(signed(tmp_cast_cast_reg_560) + signed(zext_ln50_1_fu_187_p1));
    empty_22_fu_296_p1 <= add_ln50_fu_261_p2(8 - 1 downto 0);
    empty_fu_191_p1 <= py_fu_84(8 - 1 downto 0);
    grp_fu_504_p0 <= grp_fu_504_p00(9 - 1 downto 0);
    grp_fu_504_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln50_1_fu_280_p3),13));
    grp_fu_504_p1 <= ap_const_lv13_4C(7 - 1 downto 0);
    grp_fu_504_p2 <= grp_fu_504_p20(9 - 1 downto 0);
    grp_fu_504_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln50_reg_570_pp0_iter2_reg),13));
    icmp_ln26_4_fu_313_p2 <= "1" when (signed(p_mid1_fu_300_p2) > signed(ap_const_lv11_FE)) else "0";
    icmp_ln26_5_fu_429_p2 <= "1" when (signed(add_ln54_1_fu_415_p2) > signed(ap_const_lv11_FE)) else "0";
    icmp_ln26_fu_208_p2 <= "1" when (signed(empty_21_fu_195_p2) > signed(ap_const_lv11_FE)) else "0";
    icmp_ln50_fu_247_p2 <= "1" when (indvar_flatten_fu_88 = bound) else "0";
    icmp_ln51_fu_267_p2 <= "1" when (px_fu_80 = add_ln50_1) else "0";
    input_ftmap_address0 <= zext_ln56_3_fu_490_p1(16 - 1 downto 0);

    input_ftmap_ce0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            input_ftmap_ce0 <= ap_const_logic_1;
        else 
            input_ftmap_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    or_ln26_4_fu_466_p2 <= (tmp_10_fu_421_p3 or icmp_ln26_5_fu_429_p2);
    or_ln26_5_fu_338_p2 <= (tmp_9_fu_305_p3 or icmp_ln26_4_fu_313_p2);
    or_ln26_fu_233_p2 <= (tmp_fu_200_p3 or icmp_ln26_fu_208_p2);
    p_mid1_fu_300_p2 <= std_logic_vector(signed(tmp_cast_cast_reg_560) + signed(zext_ln50_3_fu_292_p1));
    patch_address0 <= zext_ln56_2_fu_495_p1(13 - 1 downto 0);

    patch_ce0_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            patch_ce0 <= ap_const_logic_1;
        else 
            patch_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_d0 <= input_ftmap_q0;

    patch_we0_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            patch_we0 <= ap_const_logic_1;
        else 
            patch_we0 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln26_11_fu_330_p3 <= 
        ap_const_lv8_0 when (tmp_9_fu_305_p3(0) = '1') else 
        ap_const_lv8_FE;
    select_ln26_12_fu_344_p3 <= 
        select_ln26_11_fu_330_p3 when (or_ln26_5_fu_338_p2(0) = '1') else 
        add_ln26_11_fu_325_p2;
    select_ln26_13_fu_458_p3 <= 
        ap_const_lv11_0 when (tmp_11_fu_450_p3(0) = '1') else 
        ap_const_lv11_FE;
    select_ln26_fu_225_p3 <= 
        ap_const_lv8_0 when (tmp_fu_200_p3(0) = '1') else 
        ap_const_lv8_FE;
    select_ln50_1_fu_280_p3 <= 
        add_ln50_fu_261_p2 when (icmp_ln51_fu_267_p2(0) = '1') else 
        py_fu_84;
    select_ln50_2_fu_352_p3 <= 
        select_ln26_12_fu_344_p3 when (icmp_ln51_fu_267_p2(0) = '1') else 
        yy_fu_239_p3;
    select_ln50_fu_272_p3 <= 
        ap_const_lv9_0 when (icmp_ln51_fu_267_p2(0) = '1') else 
        px_fu_80;
        sext_ln26_fu_441_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln26_9_fu_435_p2),11));

        sext_ln54_fu_411_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln54_fu_406_p2),11));

        sext_ln56_fu_480_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(xx_fu_472_p3),16));

    sub_ln56_fu_391_p2 <= std_logic_vector(unsigned(tmp_6_fu_384_p3) - unsigned(zext_ln56_fu_381_p1));
    tmp_10_fu_421_p3 <= add_ln54_1_fu_415_p2(10 downto 10);
    tmp_11_fu_450_p3 <= add_ln54_1_fu_415_p2(10 downto 10);
    tmp_6_fu_384_p3 <= (select_ln50_2_reg_582_pp0_iter2_reg & ap_const_lv8_0);
    tmp_9_fu_305_p3 <= p_mid1_fu_300_p2(10 downto 10);
        tmp_cast_cast_fu_162_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_cast),11));

    tmp_fu_200_p3 <= empty_21_fu_195_p2(10 downto 10);
    w0_cast3_cast_fu_154_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(w0_cast3),11));
    xx_fu_472_p3 <= 
        select_ln26_13_fu_458_p3 when (or_ln26_4_fu_466_p2(0) = '1') else 
        add_ln26_4_fu_445_p2;
    yy_fu_239_p3 <= 
        select_ln26_fu_225_p3 when (or_ln26_fu_233_p2(0) = '1') else 
        add_ln26_fu_220_p2;
    zext_ln50_1_fu_187_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(py_fu_84),11));
    zext_ln50_3_fu_292_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln50_fu_261_p2),11));
    zext_ln50_cast_fu_158_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln50),9));
    zext_ln51_fu_400_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln50_reg_570_pp0_iter2_reg),11));
    zext_ln54_fu_403_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln50_reg_570_pp0_iter2_reg),10));
    zext_ln56_2_fu_495_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_504_p3),64));
    zext_ln56_3_fu_490_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln56_1_fu_484_p2),64));
    zext_ln56_fu_381_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln50_2_reg_582_pp0_iter2_reg),16));
end behav;
