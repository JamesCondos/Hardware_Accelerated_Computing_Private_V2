-- ==============================================================
-- Generated by Vitis HLS v2023.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity srcnn_conv2_Pipeline_OUT_STATIONARY_CONV2_VITIS_LOOP_43_3_VITIS_LOOP_44_4 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    empty_32 : IN STD_LOGIC_VECTOR (31 downto 0);
    empty_33 : IN STD_LOGIC_VECTOR (31 downto 0);
    empty_34 : IN STD_LOGIC_VECTOR (31 downto 0);
    empty_35 : IN STD_LOGIC_VECTOR (31 downto 0);
    empty_36 : IN STD_LOGIC_VECTOR (31 downto 0);
    empty_37 : IN STD_LOGIC_VECTOR (31 downto 0);
    empty_38 : IN STD_LOGIC_VECTOR (31 downto 0);
    empty_39 : IN STD_LOGIC_VECTOR (31 downto 0);
    empty_40 : IN STD_LOGIC_VECTOR (31 downto 0);
    empty_41 : IN STD_LOGIC_VECTOR (31 downto 0);
    empty_42 : IN STD_LOGIC_VECTOR (31 downto 0);
    empty_43 : IN STD_LOGIC_VECTOR (31 downto 0);
    empty_44 : IN STD_LOGIC_VECTOR (31 downto 0);
    empty_45 : IN STD_LOGIC_VECTOR (31 downto 0);
    empty_46 : IN STD_LOGIC_VECTOR (31 downto 0);
    empty_47 : IN STD_LOGIC_VECTOR (31 downto 0);
    empty_48 : IN STD_LOGIC_VECTOR (31 downto 0);
    empty_49 : IN STD_LOGIC_VECTOR (31 downto 0);
    empty_50 : IN STD_LOGIC_VECTOR (31 downto 0);
    empty_51 : IN STD_LOGIC_VECTOR (31 downto 0);
    empty_52 : IN STD_LOGIC_VECTOR (31 downto 0);
    empty_53 : IN STD_LOGIC_VECTOR (31 downto 0);
    empty_54 : IN STD_LOGIC_VECTOR (31 downto 0);
    empty_55 : IN STD_LOGIC_VECTOR (31 downto 0);
    empty_56 : IN STD_LOGIC_VECTOR (31 downto 0);
    empty_57 : IN STD_LOGIC_VECTOR (31 downto 0);
    empty_58 : IN STD_LOGIC_VECTOR (31 downto 0);
    empty_59 : IN STD_LOGIC_VECTOR (31 downto 0);
    empty_60 : IN STD_LOGIC_VECTOR (31 downto 0);
    empty_61 : IN STD_LOGIC_VECTOR (31 downto 0);
    empty_62 : IN STD_LOGIC_VECTOR (31 downto 0);
    empty : IN STD_LOGIC_VECTOR (31 downto 0);
    layer2_output_tile_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    layer2_output_tile_ce0 : OUT STD_LOGIC;
    layer2_output_tile_we0 : OUT STD_LOGIC;
    layer2_output_tile_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    layer2_output_tile_1_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    layer2_output_tile_1_ce0 : OUT STD_LOGIC;
    layer2_output_tile_1_we0 : OUT STD_LOGIC;
    layer2_output_tile_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    layer2_output_tile_2_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    layer2_output_tile_2_ce0 : OUT STD_LOGIC;
    layer2_output_tile_2_we0 : OUT STD_LOGIC;
    layer2_output_tile_2_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    layer2_output_tile_3_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    layer2_output_tile_3_ce0 : OUT STD_LOGIC;
    layer2_output_tile_3_we0 : OUT STD_LOGIC;
    layer2_output_tile_3_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    layer2_output_tile_4_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    layer2_output_tile_4_ce0 : OUT STD_LOGIC;
    layer2_output_tile_4_we0 : OUT STD_LOGIC;
    layer2_output_tile_4_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    layer2_output_tile_5_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    layer2_output_tile_5_ce0 : OUT STD_LOGIC;
    layer2_output_tile_5_we0 : OUT STD_LOGIC;
    layer2_output_tile_5_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    layer2_output_tile_6_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    layer2_output_tile_6_ce0 : OUT STD_LOGIC;
    layer2_output_tile_6_we0 : OUT STD_LOGIC;
    layer2_output_tile_6_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    layer2_output_tile_7_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    layer2_output_tile_7_ce0 : OUT STD_LOGIC;
    layer2_output_tile_7_we0 : OUT STD_LOGIC;
    layer2_output_tile_7_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    layer2_output_tile_8_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    layer2_output_tile_8_ce0 : OUT STD_LOGIC;
    layer2_output_tile_8_we0 : OUT STD_LOGIC;
    layer2_output_tile_8_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    layer2_output_tile_9_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    layer2_output_tile_9_ce0 : OUT STD_LOGIC;
    layer2_output_tile_9_we0 : OUT STD_LOGIC;
    layer2_output_tile_9_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    layer2_output_tile_10_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    layer2_output_tile_10_ce0 : OUT STD_LOGIC;
    layer2_output_tile_10_we0 : OUT STD_LOGIC;
    layer2_output_tile_10_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    layer2_output_tile_11_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    layer2_output_tile_11_ce0 : OUT STD_LOGIC;
    layer2_output_tile_11_we0 : OUT STD_LOGIC;
    layer2_output_tile_11_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    layer2_output_tile_12_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    layer2_output_tile_12_ce0 : OUT STD_LOGIC;
    layer2_output_tile_12_we0 : OUT STD_LOGIC;
    layer2_output_tile_12_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    layer2_output_tile_13_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    layer2_output_tile_13_ce0 : OUT STD_LOGIC;
    layer2_output_tile_13_we0 : OUT STD_LOGIC;
    layer2_output_tile_13_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    layer2_output_tile_14_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    layer2_output_tile_14_ce0 : OUT STD_LOGIC;
    layer2_output_tile_14_we0 : OUT STD_LOGIC;
    layer2_output_tile_14_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    layer2_output_tile_15_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    layer2_output_tile_15_ce0 : OUT STD_LOGIC;
    layer2_output_tile_15_we0 : OUT STD_LOGIC;
    layer2_output_tile_15_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    layer2_output_tile_16_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    layer2_output_tile_16_ce0 : OUT STD_LOGIC;
    layer2_output_tile_16_we0 : OUT STD_LOGIC;
    layer2_output_tile_16_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of srcnn_conv2_Pipeline_OUT_STATIONARY_CONV2_VITIS_LOOP_43_3_VITIS_LOOP_44_4 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv5_F : STD_LOGIC_VECTOR (4 downto 0) := "01111";
    constant ap_const_lv5_E : STD_LOGIC_VECTOR (4 downto 0) := "01110";
    constant ap_const_lv5_D : STD_LOGIC_VECTOR (4 downto 0) := "01101";
    constant ap_const_lv5_C : STD_LOGIC_VECTOR (4 downto 0) := "01100";
    constant ap_const_lv5_B : STD_LOGIC_VECTOR (4 downto 0) := "01011";
    constant ap_const_lv5_A : STD_LOGIC_VECTOR (4 downto 0) := "01010";
    constant ap_const_lv5_9 : STD_LOGIC_VECTOR (4 downto 0) := "01001";
    constant ap_const_lv5_8 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_const_lv5_7 : STD_LOGIC_VECTOR (4 downto 0) := "00111";
    constant ap_const_lv5_6 : STD_LOGIC_VECTOR (4 downto 0) := "00110";
    constant ap_const_lv5_5 : STD_LOGIC_VECTOR (4 downto 0) := "00101";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_const_lv5_3 : STD_LOGIC_VECTOR (4 downto 0) := "00011";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv14_2420 : STD_LOGIC_VECTOR (13 downto 0) := "10010000100000";
    constant ap_const_lv14_1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv10_121 : STD_LOGIC_VECTOR (9 downto 0) := "0100100001";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv5_11 : STD_LOGIC_VECTOR (4 downto 0) := "10001";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln42_fu_689_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal zext_ln46_2_fu_876_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal j_fu_180 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln44_fu_897_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal i_2_fu_184 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln43_4_fu_858_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvar_flatten104_fu_188 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln43_5_fu_909_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal out_feat_fu_192 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln42_3_fu_727_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal indvar_flatten117_fu_196 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln42_26_fu_695_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal select_ln43_fu_850_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln42_4_fu_795_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_651_p33 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln43_fu_713_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln42_fu_707_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_s_fu_739_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln46_fu_735_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_mid1_fu_757_p33 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_mid1_fu_757_p34 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_651_p34 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln44_fu_826_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln42_fu_820_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln42_fu_719_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal and_ln42_fu_832_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln43_fu_844_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln43_fu_838_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln46_fu_747_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln46_1_fu_866_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln46_1_fu_870_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln43_2_fu_903_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component srcnn_mux_32_5_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        din10_WIDTH : INTEGER;
        din11_WIDTH : INTEGER;
        din12_WIDTH : INTEGER;
        din13_WIDTH : INTEGER;
        din14_WIDTH : INTEGER;
        din15_WIDTH : INTEGER;
        din16_WIDTH : INTEGER;
        din17_WIDTH : INTEGER;
        din18_WIDTH : INTEGER;
        din19_WIDTH : INTEGER;
        din20_WIDTH : INTEGER;
        din21_WIDTH : INTEGER;
        din22_WIDTH : INTEGER;
        din23_WIDTH : INTEGER;
        din24_WIDTH : INTEGER;
        din25_WIDTH : INTEGER;
        din26_WIDTH : INTEGER;
        din27_WIDTH : INTEGER;
        din28_WIDTH : INTEGER;
        din29_WIDTH : INTEGER;
        din30_WIDTH : INTEGER;
        din31_WIDTH : INTEGER;
        din32_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (31 downto 0);
        din5 : IN STD_LOGIC_VECTOR (31 downto 0);
        din6 : IN STD_LOGIC_VECTOR (31 downto 0);
        din7 : IN STD_LOGIC_VECTOR (31 downto 0);
        din8 : IN STD_LOGIC_VECTOR (31 downto 0);
        din9 : IN STD_LOGIC_VECTOR (31 downto 0);
        din10 : IN STD_LOGIC_VECTOR (31 downto 0);
        din11 : IN STD_LOGIC_VECTOR (31 downto 0);
        din12 : IN STD_LOGIC_VECTOR (31 downto 0);
        din13 : IN STD_LOGIC_VECTOR (31 downto 0);
        din14 : IN STD_LOGIC_VECTOR (31 downto 0);
        din15 : IN STD_LOGIC_VECTOR (31 downto 0);
        din16 : IN STD_LOGIC_VECTOR (31 downto 0);
        din17 : IN STD_LOGIC_VECTOR (31 downto 0);
        din18 : IN STD_LOGIC_VECTOR (31 downto 0);
        din19 : IN STD_LOGIC_VECTOR (31 downto 0);
        din20 : IN STD_LOGIC_VECTOR (31 downto 0);
        din21 : IN STD_LOGIC_VECTOR (31 downto 0);
        din22 : IN STD_LOGIC_VECTOR (31 downto 0);
        din23 : IN STD_LOGIC_VECTOR (31 downto 0);
        din24 : IN STD_LOGIC_VECTOR (31 downto 0);
        din25 : IN STD_LOGIC_VECTOR (31 downto 0);
        din26 : IN STD_LOGIC_VECTOR (31 downto 0);
        din27 : IN STD_LOGIC_VECTOR (31 downto 0);
        din28 : IN STD_LOGIC_VECTOR (31 downto 0);
        din29 : IN STD_LOGIC_VECTOR (31 downto 0);
        din30 : IN STD_LOGIC_VECTOR (31 downto 0);
        din31 : IN STD_LOGIC_VECTOR (31 downto 0);
        din32 : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component srcnn_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mux_32_5_32_1_1_U1805 : component srcnn_mux_32_5_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 32,
        din8_WIDTH => 32,
        din9_WIDTH => 32,
        din10_WIDTH => 32,
        din11_WIDTH => 32,
        din12_WIDTH => 32,
        din13_WIDTH => 32,
        din14_WIDTH => 32,
        din15_WIDTH => 32,
        din16_WIDTH => 32,
        din17_WIDTH => 32,
        din18_WIDTH => 32,
        din19_WIDTH => 32,
        din20_WIDTH => 32,
        din21_WIDTH => 32,
        din22_WIDTH => 32,
        din23_WIDTH => 32,
        din24_WIDTH => 32,
        din25_WIDTH => 32,
        din26_WIDTH => 32,
        din27_WIDTH => 32,
        din28_WIDTH => 32,
        din29_WIDTH => 32,
        din30_WIDTH => 32,
        din31_WIDTH => 32,
        din32_WIDTH => 5,
        dout_WIDTH => 32)
    port map (
        din0 => empty_32,
        din1 => empty_33,
        din2 => empty_34,
        din3 => empty_35,
        din4 => empty_36,
        din5 => empty_37,
        din6 => empty_38,
        din7 => empty_39,
        din8 => empty_40,
        din9 => empty_41,
        din10 => empty_42,
        din11 => empty_43,
        din12 => empty_44,
        din13 => empty_45,
        din14 => empty_46,
        din15 => empty_47,
        din16 => empty_48,
        din17 => empty_49,
        din18 => empty_50,
        din19 => empty_51,
        din20 => empty_52,
        din21 => empty_53,
        din22 => empty_54,
        din23 => empty_55,
        din24 => empty_56,
        din25 => empty_57,
        din26 => empty_58,
        din27 => empty_59,
        din28 => empty_60,
        din29 => empty_61,
        din30 => empty_62,
        din31 => empty,
        din32 => tmp_fu_651_p33,
        dout => tmp_fu_651_p34);

    mux_32_5_32_1_1_U1806 : component srcnn_mux_32_5_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 32,
        din8_WIDTH => 32,
        din9_WIDTH => 32,
        din10_WIDTH => 32,
        din11_WIDTH => 32,
        din12_WIDTH => 32,
        din13_WIDTH => 32,
        din14_WIDTH => 32,
        din15_WIDTH => 32,
        din16_WIDTH => 32,
        din17_WIDTH => 32,
        din18_WIDTH => 32,
        din19_WIDTH => 32,
        din20_WIDTH => 32,
        din21_WIDTH => 32,
        din22_WIDTH => 32,
        din23_WIDTH => 32,
        din24_WIDTH => 32,
        din25_WIDTH => 32,
        din26_WIDTH => 32,
        din27_WIDTH => 32,
        din28_WIDTH => 32,
        din29_WIDTH => 32,
        din30_WIDTH => 32,
        din31_WIDTH => 32,
        din32_WIDTH => 5,
        dout_WIDTH => 32)
    port map (
        din0 => empty_32,
        din1 => empty_33,
        din2 => empty_34,
        din3 => empty_35,
        din4 => empty_36,
        din5 => empty_37,
        din6 => empty_38,
        din7 => empty_39,
        din8 => empty_40,
        din9 => empty_41,
        din10 => empty_42,
        din11 => empty_43,
        din12 => empty_44,
        din13 => empty_45,
        din14 => empty_46,
        din15 => empty_47,
        din16 => empty_48,
        din17 => empty_49,
        din18 => empty_50,
        din19 => empty_51,
        din20 => empty_52,
        din21 => empty_53,
        din22 => empty_54,
        din23 => empty_55,
        din24 => empty_56,
        din25 => empty_57,
        din26 => empty_58,
        din27 => empty_59,
        din28 => empty_60,
        din29 => empty_61,
        din30 => empty_62,
        din31 => empty,
        din32 => tmp_mid1_fu_757_p33,
        dout => tmp_mid1_fu_757_p34);

    flow_control_loop_pipe_sequential_init_U : component srcnn_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter1_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    i_2_fu_184_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    i_2_fu_184 <= ap_const_lv5_0;
                elsif (((icmp_ln42_fu_689_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    i_2_fu_184 <= select_ln43_4_fu_858_p3;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten104_fu_188_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten104_fu_188 <= ap_const_lv10_0;
                elsif (((icmp_ln42_fu_689_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    indvar_flatten104_fu_188 <= select_ln43_5_fu_909_p3;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten117_fu_196_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten117_fu_196 <= ap_const_lv14_0;
                elsif (((icmp_ln42_fu_689_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    indvar_flatten117_fu_196 <= add_ln42_26_fu_695_p2;
                end if;
            end if; 
        end if;
    end process;

    j_fu_180_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    j_fu_180 <= ap_const_lv5_0;
                elsif (((icmp_ln42_fu_689_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    j_fu_180 <= add_ln44_fu_897_p2;
                end if;
            end if; 
        end if;
    end process;

    out_feat_fu_192_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    out_feat_fu_192 <= ap_const_lv6_0;
                elsif (((icmp_ln42_fu_689_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    out_feat_fu_192 <= select_ln42_3_fu_727_p3;
                end if;
            end if; 
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln42_26_fu_695_p2 <= std_logic_vector(unsigned(indvar_flatten117_fu_196) + unsigned(ap_const_lv14_1));
    add_ln42_fu_707_p2 <= std_logic_vector(unsigned(out_feat_fu_192) + unsigned(ap_const_lv6_1));
    add_ln43_2_fu_903_p2 <= std_logic_vector(unsigned(indvar_flatten104_fu_188) + unsigned(ap_const_lv10_1));
    add_ln43_fu_838_p2 <= std_logic_vector(unsigned(select_ln42_fu_719_p3) + unsigned(ap_const_lv5_1));
    add_ln44_fu_897_p2 <= std_logic_vector(unsigned(select_ln43_fu_850_p3) + unsigned(ap_const_lv5_1));
    add_ln46_1_fu_870_p2 <= std_logic_vector(unsigned(add_ln46_fu_747_p2) + unsigned(zext_ln46_1_fu_866_p1));
    add_ln46_fu_747_p2 <= std_logic_vector(unsigned(tmp_s_fu_739_p3) + unsigned(zext_ln46_fu_735_p1));
    and_ln42_fu_832_p2 <= (xor_ln42_fu_820_p2 and icmp_ln44_fu_826_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, icmp_ln42_fu_689_p2)
    begin
        if (((icmp_ln42_fu_689_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter1_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln42_fu_689_p2 <= "1" when (indvar_flatten117_fu_196 = ap_const_lv14_2420) else "0";
    icmp_ln43_fu_713_p2 <= "1" when (indvar_flatten104_fu_188 = ap_const_lv10_121) else "0";
    icmp_ln44_fu_826_p2 <= "1" when (j_fu_180 = ap_const_lv5_11) else "0";
    layer2_output_tile_10_address0 <= zext_ln46_2_fu_876_p1(10 - 1 downto 0);

    layer2_output_tile_10_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            layer2_output_tile_10_ce0 <= ap_const_logic_1;
        else 
            layer2_output_tile_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer2_output_tile_10_d0 <= select_ln42_4_fu_795_p3;

    layer2_output_tile_10_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln42_fu_689_p2, ap_block_pp0_stage0_11001, select_ln43_fu_850_p3)
    begin
        if (((icmp_ln42_fu_689_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (select_ln43_fu_850_p3 = ap_const_lv5_A) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            layer2_output_tile_10_we0 <= ap_const_logic_1;
        else 
            layer2_output_tile_10_we0 <= ap_const_logic_0;
        end if; 
    end process;

    layer2_output_tile_11_address0 <= zext_ln46_2_fu_876_p1(10 - 1 downto 0);

    layer2_output_tile_11_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            layer2_output_tile_11_ce0 <= ap_const_logic_1;
        else 
            layer2_output_tile_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer2_output_tile_11_d0 <= select_ln42_4_fu_795_p3;

    layer2_output_tile_11_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln42_fu_689_p2, ap_block_pp0_stage0_11001, select_ln43_fu_850_p3)
    begin
        if (((icmp_ln42_fu_689_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (select_ln43_fu_850_p3 = ap_const_lv5_B) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            layer2_output_tile_11_we0 <= ap_const_logic_1;
        else 
            layer2_output_tile_11_we0 <= ap_const_logic_0;
        end if; 
    end process;

    layer2_output_tile_12_address0 <= zext_ln46_2_fu_876_p1(10 - 1 downto 0);

    layer2_output_tile_12_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            layer2_output_tile_12_ce0 <= ap_const_logic_1;
        else 
            layer2_output_tile_12_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer2_output_tile_12_d0 <= select_ln42_4_fu_795_p3;

    layer2_output_tile_12_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln42_fu_689_p2, ap_block_pp0_stage0_11001, select_ln43_fu_850_p3)
    begin
        if (((icmp_ln42_fu_689_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (select_ln43_fu_850_p3 = ap_const_lv5_C) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            layer2_output_tile_12_we0 <= ap_const_logic_1;
        else 
            layer2_output_tile_12_we0 <= ap_const_logic_0;
        end if; 
    end process;

    layer2_output_tile_13_address0 <= zext_ln46_2_fu_876_p1(10 - 1 downto 0);

    layer2_output_tile_13_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            layer2_output_tile_13_ce0 <= ap_const_logic_1;
        else 
            layer2_output_tile_13_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer2_output_tile_13_d0 <= select_ln42_4_fu_795_p3;

    layer2_output_tile_13_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln42_fu_689_p2, ap_block_pp0_stage0_11001, select_ln43_fu_850_p3)
    begin
        if (((icmp_ln42_fu_689_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (select_ln43_fu_850_p3 = ap_const_lv5_D) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            layer2_output_tile_13_we0 <= ap_const_logic_1;
        else 
            layer2_output_tile_13_we0 <= ap_const_logic_0;
        end if; 
    end process;

    layer2_output_tile_14_address0 <= zext_ln46_2_fu_876_p1(10 - 1 downto 0);

    layer2_output_tile_14_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            layer2_output_tile_14_ce0 <= ap_const_logic_1;
        else 
            layer2_output_tile_14_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer2_output_tile_14_d0 <= select_ln42_4_fu_795_p3;

    layer2_output_tile_14_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln42_fu_689_p2, ap_block_pp0_stage0_11001, select_ln43_fu_850_p3)
    begin
        if (((icmp_ln42_fu_689_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (select_ln43_fu_850_p3 = ap_const_lv5_E) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            layer2_output_tile_14_we0 <= ap_const_logic_1;
        else 
            layer2_output_tile_14_we0 <= ap_const_logic_0;
        end if; 
    end process;

    layer2_output_tile_15_address0 <= zext_ln46_2_fu_876_p1(10 - 1 downto 0);

    layer2_output_tile_15_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            layer2_output_tile_15_ce0 <= ap_const_logic_1;
        else 
            layer2_output_tile_15_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer2_output_tile_15_d0 <= select_ln42_4_fu_795_p3;

    layer2_output_tile_15_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln42_fu_689_p2, ap_block_pp0_stage0_11001, select_ln43_fu_850_p3)
    begin
        if (((icmp_ln42_fu_689_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (select_ln43_fu_850_p3 = ap_const_lv5_F) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            layer2_output_tile_15_we0 <= ap_const_logic_1;
        else 
            layer2_output_tile_15_we0 <= ap_const_logic_0;
        end if; 
    end process;

    layer2_output_tile_16_address0 <= zext_ln46_2_fu_876_p1(10 - 1 downto 0);

    layer2_output_tile_16_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            layer2_output_tile_16_ce0 <= ap_const_logic_1;
        else 
            layer2_output_tile_16_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer2_output_tile_16_d0 <= select_ln42_4_fu_795_p3;

    layer2_output_tile_16_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln42_fu_689_p2, ap_block_pp0_stage0_11001, select_ln43_fu_850_p3)
    begin
        if ((not((select_ln43_fu_850_p3 = ap_const_lv5_0)) and not((select_ln43_fu_850_p3 = ap_const_lv5_1)) and not((select_ln43_fu_850_p3 = ap_const_lv5_2)) and not((select_ln43_fu_850_p3 = ap_const_lv5_3)) and not((select_ln43_fu_850_p3 = ap_const_lv5_4)) and not((select_ln43_fu_850_p3 = ap_const_lv5_5)) and not((select_ln43_fu_850_p3 = ap_const_lv5_6)) and not((select_ln43_fu_850_p3 = ap_const_lv5_7)) and not((select_ln43_fu_850_p3 = ap_const_lv5_8)) and not((select_ln43_fu_850_p3 = ap_const_lv5_9)) and not((select_ln43_fu_850_p3 = ap_const_lv5_A)) and not((select_ln43_fu_850_p3 = ap_const_lv5_B)) and not((select_ln43_fu_850_p3 = ap_const_lv5_C)) and not((select_ln43_fu_850_p3 = ap_const_lv5_D)) and not((select_ln43_fu_850_p3 = ap_const_lv5_E)) and not((select_ln43_fu_850_p3 = ap_const_lv5_F)) and (icmp_ln42_fu_689_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            layer2_output_tile_16_we0 <= ap_const_logic_1;
        else 
            layer2_output_tile_16_we0 <= ap_const_logic_0;
        end if; 
    end process;

    layer2_output_tile_1_address0 <= zext_ln46_2_fu_876_p1(10 - 1 downto 0);

    layer2_output_tile_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            layer2_output_tile_1_ce0 <= ap_const_logic_1;
        else 
            layer2_output_tile_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer2_output_tile_1_d0 <= select_ln42_4_fu_795_p3;

    layer2_output_tile_1_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln42_fu_689_p2, ap_block_pp0_stage0_11001, select_ln43_fu_850_p3)
    begin
        if (((icmp_ln42_fu_689_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (select_ln43_fu_850_p3 = ap_const_lv5_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            layer2_output_tile_1_we0 <= ap_const_logic_1;
        else 
            layer2_output_tile_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    layer2_output_tile_2_address0 <= zext_ln46_2_fu_876_p1(10 - 1 downto 0);

    layer2_output_tile_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            layer2_output_tile_2_ce0 <= ap_const_logic_1;
        else 
            layer2_output_tile_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer2_output_tile_2_d0 <= select_ln42_4_fu_795_p3;

    layer2_output_tile_2_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln42_fu_689_p2, ap_block_pp0_stage0_11001, select_ln43_fu_850_p3)
    begin
        if (((icmp_ln42_fu_689_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (select_ln43_fu_850_p3 = ap_const_lv5_2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            layer2_output_tile_2_we0 <= ap_const_logic_1;
        else 
            layer2_output_tile_2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    layer2_output_tile_3_address0 <= zext_ln46_2_fu_876_p1(10 - 1 downto 0);

    layer2_output_tile_3_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            layer2_output_tile_3_ce0 <= ap_const_logic_1;
        else 
            layer2_output_tile_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer2_output_tile_3_d0 <= select_ln42_4_fu_795_p3;

    layer2_output_tile_3_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln42_fu_689_p2, ap_block_pp0_stage0_11001, select_ln43_fu_850_p3)
    begin
        if (((icmp_ln42_fu_689_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (select_ln43_fu_850_p3 = ap_const_lv5_3) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            layer2_output_tile_3_we0 <= ap_const_logic_1;
        else 
            layer2_output_tile_3_we0 <= ap_const_logic_0;
        end if; 
    end process;

    layer2_output_tile_4_address0 <= zext_ln46_2_fu_876_p1(10 - 1 downto 0);

    layer2_output_tile_4_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            layer2_output_tile_4_ce0 <= ap_const_logic_1;
        else 
            layer2_output_tile_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer2_output_tile_4_d0 <= select_ln42_4_fu_795_p3;

    layer2_output_tile_4_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln42_fu_689_p2, ap_block_pp0_stage0_11001, select_ln43_fu_850_p3)
    begin
        if (((icmp_ln42_fu_689_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (select_ln43_fu_850_p3 = ap_const_lv5_4) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            layer2_output_tile_4_we0 <= ap_const_logic_1;
        else 
            layer2_output_tile_4_we0 <= ap_const_logic_0;
        end if; 
    end process;

    layer2_output_tile_5_address0 <= zext_ln46_2_fu_876_p1(10 - 1 downto 0);

    layer2_output_tile_5_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            layer2_output_tile_5_ce0 <= ap_const_logic_1;
        else 
            layer2_output_tile_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer2_output_tile_5_d0 <= select_ln42_4_fu_795_p3;

    layer2_output_tile_5_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln42_fu_689_p2, ap_block_pp0_stage0_11001, select_ln43_fu_850_p3)
    begin
        if (((icmp_ln42_fu_689_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (select_ln43_fu_850_p3 = ap_const_lv5_5) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            layer2_output_tile_5_we0 <= ap_const_logic_1;
        else 
            layer2_output_tile_5_we0 <= ap_const_logic_0;
        end if; 
    end process;

    layer2_output_tile_6_address0 <= zext_ln46_2_fu_876_p1(10 - 1 downto 0);

    layer2_output_tile_6_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            layer2_output_tile_6_ce0 <= ap_const_logic_1;
        else 
            layer2_output_tile_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer2_output_tile_6_d0 <= select_ln42_4_fu_795_p3;

    layer2_output_tile_6_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln42_fu_689_p2, ap_block_pp0_stage0_11001, select_ln43_fu_850_p3)
    begin
        if (((icmp_ln42_fu_689_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (select_ln43_fu_850_p3 = ap_const_lv5_6) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            layer2_output_tile_6_we0 <= ap_const_logic_1;
        else 
            layer2_output_tile_6_we0 <= ap_const_logic_0;
        end if; 
    end process;

    layer2_output_tile_7_address0 <= zext_ln46_2_fu_876_p1(10 - 1 downto 0);

    layer2_output_tile_7_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            layer2_output_tile_7_ce0 <= ap_const_logic_1;
        else 
            layer2_output_tile_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer2_output_tile_7_d0 <= select_ln42_4_fu_795_p3;

    layer2_output_tile_7_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln42_fu_689_p2, ap_block_pp0_stage0_11001, select_ln43_fu_850_p3)
    begin
        if (((icmp_ln42_fu_689_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (select_ln43_fu_850_p3 = ap_const_lv5_7) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            layer2_output_tile_7_we0 <= ap_const_logic_1;
        else 
            layer2_output_tile_7_we0 <= ap_const_logic_0;
        end if; 
    end process;

    layer2_output_tile_8_address0 <= zext_ln46_2_fu_876_p1(10 - 1 downto 0);

    layer2_output_tile_8_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            layer2_output_tile_8_ce0 <= ap_const_logic_1;
        else 
            layer2_output_tile_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer2_output_tile_8_d0 <= select_ln42_4_fu_795_p3;

    layer2_output_tile_8_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln42_fu_689_p2, ap_block_pp0_stage0_11001, select_ln43_fu_850_p3)
    begin
        if (((icmp_ln42_fu_689_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (select_ln43_fu_850_p3 = ap_const_lv5_8) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            layer2_output_tile_8_we0 <= ap_const_logic_1;
        else 
            layer2_output_tile_8_we0 <= ap_const_logic_0;
        end if; 
    end process;

    layer2_output_tile_9_address0 <= zext_ln46_2_fu_876_p1(10 - 1 downto 0);

    layer2_output_tile_9_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            layer2_output_tile_9_ce0 <= ap_const_logic_1;
        else 
            layer2_output_tile_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer2_output_tile_9_d0 <= select_ln42_4_fu_795_p3;

    layer2_output_tile_9_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln42_fu_689_p2, ap_block_pp0_stage0_11001, select_ln43_fu_850_p3)
    begin
        if (((icmp_ln42_fu_689_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (select_ln43_fu_850_p3 = ap_const_lv5_9) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            layer2_output_tile_9_we0 <= ap_const_logic_1;
        else 
            layer2_output_tile_9_we0 <= ap_const_logic_0;
        end if; 
    end process;

    layer2_output_tile_address0 <= zext_ln46_2_fu_876_p1(10 - 1 downto 0);

    layer2_output_tile_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            layer2_output_tile_ce0 <= ap_const_logic_1;
        else 
            layer2_output_tile_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer2_output_tile_d0 <= select_ln42_4_fu_795_p3;

    layer2_output_tile_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln42_fu_689_p2, ap_block_pp0_stage0_11001, select_ln43_fu_850_p3)
    begin
        if (((icmp_ln42_fu_689_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (select_ln43_fu_850_p3 = ap_const_lv5_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            layer2_output_tile_we0 <= ap_const_logic_1;
        else 
            layer2_output_tile_we0 <= ap_const_logic_0;
        end if; 
    end process;

    or_ln43_fu_844_p2 <= (icmp_ln43_fu_713_p2 or and_ln42_fu_832_p2);
    select_ln42_3_fu_727_p3 <= 
        add_ln42_fu_707_p2 when (icmp_ln43_fu_713_p2(0) = '1') else 
        out_feat_fu_192;
    select_ln42_4_fu_795_p3 <= 
        tmp_mid1_fu_757_p34 when (icmp_ln43_fu_713_p2(0) = '1') else 
        tmp_fu_651_p34;
    select_ln42_fu_719_p3 <= 
        ap_const_lv5_0 when (icmp_ln43_fu_713_p2(0) = '1') else 
        i_2_fu_184;
    select_ln43_4_fu_858_p3 <= 
        add_ln43_fu_838_p2 when (and_ln42_fu_832_p2(0) = '1') else 
        select_ln42_fu_719_p3;
    select_ln43_5_fu_909_p3 <= 
        ap_const_lv10_1 when (icmp_ln43_fu_713_p2(0) = '1') else 
        add_ln43_2_fu_903_p2;
    select_ln43_fu_850_p3 <= 
        ap_const_lv5_0 when (or_ln43_fu_844_p2(0) = '1') else 
        j_fu_180;
    tmp_fu_651_p33 <= out_feat_fu_192(5 - 1 downto 0);
    tmp_mid1_fu_757_p33 <= add_ln42_fu_707_p2(5 - 1 downto 0);
    tmp_s_fu_739_p3 <= (select_ln42_3_fu_727_p3 & ap_const_lv4_0);
    xor_ln42_fu_820_p2 <= (icmp_ln43_fu_713_p2 xor ap_const_lv1_1);
    zext_ln46_1_fu_866_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln43_4_fu_858_p3),10));
    zext_ln46_2_fu_876_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln46_1_fu_870_p2),64));
    zext_ln46_fu_735_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln42_3_fu_727_p3),10));
end behav;
