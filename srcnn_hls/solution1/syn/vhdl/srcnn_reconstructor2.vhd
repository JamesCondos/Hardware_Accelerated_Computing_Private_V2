-- ==============================================================
-- Generated by Vitis HLS v2023.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity srcnn_reconstructor2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    output_ftmap_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    output_ftmap_ce0 : OUT STD_LOGIC;
    output_ftmap_we0 : OUT STD_LOGIC;
    output_ftmap_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    output_tile_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    output_tile_ce0 : OUT STD_LOGIC;
    output_tile_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    tile_h : IN STD_LOGIC_VECTOR (7 downto 0);
    tile_w : IN STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of srcnn_reconstructor2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv5_11 : STD_LOGIC_VECTOR (4 downto 0) := "10001";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal zext_ln66_fu_101_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln66_reg_235 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln68_1_fu_125_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln68_1_reg_240 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal add_ln66_fu_141_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln66_reg_248 : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_ln68_fu_164_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal sub_ln68_reg_253 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln66_fu_135_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal add_ln67_fu_190_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln67_reg_266 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln68_3_fu_205_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln68_3_reg_271 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln67_fu_184_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_reg_90 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal zext_ln68_3_fu_179_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln68_5_fu_214_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_fu_48 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_fu_117_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln68_fu_113_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln66_1_fu_131_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_fu_147_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_1_fu_156_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln68_1_fu_152_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln68_2_fu_170_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln68_2_fu_174_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln68_fu_196_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln68_4_fu_201_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_fu_48_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_fu_48 <= ap_const_lv5_0;
            elsif (((icmp_ln67_fu_184_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_fu_48 <= add_ln66_reg_248;
            end if; 
        end if;
    end process;

    j_reg_90_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln66_fu_135_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                j_reg_90 <= ap_const_lv5_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                j_reg_90 <= add_ln67_reg_266;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln66_reg_248 <= add_ln66_fu_141_p2;
                add_ln68_1_reg_240 <= add_ln68_1_fu_125_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                add_ln67_reg_266 <= add_ln67_fu_190_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln67_fu_184_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                add_ln68_3_reg_271 <= add_ln68_3_fu_205_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln66_fu_135_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                sub_ln68_reg_253 <= sub_ln68_fu_164_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                    zext_ln66_reg_235(7 downto 0) <= zext_ln66_fu_101_p1(7 downto 0);
            end if;
        end if;
    end process;
    zext_ln66_reg_235(8) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln66_fu_135_p2, ap_CS_fsm_state3, icmp_ln67_fu_184_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln66_fu_135_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln67_fu_184_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    add_ln66_fu_141_p2 <= std_logic_vector(unsigned(i_fu_48) + unsigned(ap_const_lv5_1));
    add_ln67_fu_190_p2 <= std_logic_vector(unsigned(j_reg_90) + unsigned(ap_const_lv5_1));
    add_ln68_1_fu_125_p2 <= std_logic_vector(unsigned(tmp_fu_117_p3) + unsigned(zext_ln68_fu_113_p1));
    add_ln68_2_fu_174_p2 <= std_logic_vector(unsigned(add_ln68_1_reg_240) + unsigned(zext_ln68_2_fu_170_p1));
    add_ln68_3_fu_205_p2 <= std_logic_vector(unsigned(sub_ln68_reg_253) + unsigned(zext_ln68_4_fu_201_p1));
    add_ln68_fu_196_p2 <= std_logic_vector(unsigned(zext_ln66_reg_235) + unsigned(zext_ln68_2_fu_170_p1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln66_fu_135_p2)
    begin
        if ((((icmp_ln66_fu_135_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln66_fu_135_p2)
    begin
        if (((icmp_ln66_fu_135_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    empty_fu_147_p2 <= std_logic_vector(unsigned(zext_ln66_1_fu_131_p1) + unsigned(tile_h));
    icmp_ln66_fu_135_p2 <= "1" when (i_fu_48 = ap_const_lv5_11) else "0";
    icmp_ln67_fu_184_p2 <= "1" when (j_reg_90 = ap_const_lv5_11) else "0";
    output_ftmap_address0 <= zext_ln68_5_fu_214_p1(16 - 1 downto 0);

    output_ftmap_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            output_ftmap_ce0 <= ap_const_logic_1;
        else 
            output_ftmap_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_ftmap_d0 <= output_tile_q0;

    output_ftmap_we0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            output_ftmap_we0 <= ap_const_logic_1;
        else 
            output_ftmap_we0 <= ap_const_logic_0;
        end if; 
    end process;

    output_tile_address0 <= zext_ln68_3_fu_179_p1(9 - 1 downto 0);

    output_tile_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            output_tile_ce0 <= ap_const_logic_1;
        else 
            output_tile_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sub_ln68_fu_164_p2 <= std_logic_vector(unsigned(tmp_1_fu_156_p3) - unsigned(zext_ln68_1_fu_152_p1));
    tmp_1_fu_156_p3 <= (empty_fu_147_p2 & ap_const_lv8_0);
    tmp_fu_117_p3 <= (i_fu_48 & ap_const_lv4_0);
    zext_ln66_1_fu_131_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_fu_48),8));
    zext_ln66_fu_101_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tile_w),9));
    zext_ln68_1_fu_152_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_fu_147_p2),16));
    zext_ln68_2_fu_170_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_90),9));
    zext_ln68_3_fu_179_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln68_2_fu_174_p2),64));
    zext_ln68_4_fu_201_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln68_fu_196_p2),16));
    zext_ln68_5_fu_214_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln68_3_reg_271),64));
    zext_ln68_fu_113_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_fu_48),9));
end behav;
