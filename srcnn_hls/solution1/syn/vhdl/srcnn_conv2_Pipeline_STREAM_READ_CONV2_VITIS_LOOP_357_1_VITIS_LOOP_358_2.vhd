-- ==============================================================
-- Generated by Vitis HLS v2023.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity srcnn_conv2_Pipeline_STREAM_READ_CONV2_VITIS_LOOP_357_1_VITIS_LOOP_358_2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    conv1_to_conv2_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    conv1_to_conv2_num_data_valid : IN STD_LOGIC_VECTOR (9 downto 0);
    conv1_to_conv2_fifo_cap : IN STD_LOGIC_VECTOR (9 downto 0);
    conv1_to_conv2_empty_n : IN STD_LOGIC;
    conv1_to_conv2_read : OUT STD_LOGIC;
    input_tile_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    input_tile_ce0 : OUT STD_LOGIC;
    input_tile_we0 : OUT STD_LOGIC;
    input_tile_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    input_tile_1_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    input_tile_1_ce0 : OUT STD_LOGIC;
    input_tile_1_we0 : OUT STD_LOGIC;
    input_tile_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    input_tile_2_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    input_tile_2_ce0 : OUT STD_LOGIC;
    input_tile_2_we0 : OUT STD_LOGIC;
    input_tile_2_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    input_tile_3_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    input_tile_3_ce0 : OUT STD_LOGIC;
    input_tile_3_we0 : OUT STD_LOGIC;
    input_tile_3_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    input_tile_4_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    input_tile_4_ce0 : OUT STD_LOGIC;
    input_tile_4_we0 : OUT STD_LOGIC;
    input_tile_4_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    input_tile_5_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    input_tile_5_ce0 : OUT STD_LOGIC;
    input_tile_5_we0 : OUT STD_LOGIC;
    input_tile_5_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    input_tile_6_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    input_tile_6_ce0 : OUT STD_LOGIC;
    input_tile_6_we0 : OUT STD_LOGIC;
    input_tile_6_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    input_tile_7_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    input_tile_7_ce0 : OUT STD_LOGIC;
    input_tile_7_we0 : OUT STD_LOGIC;
    input_tile_7_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    input_tile_8_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    input_tile_8_ce0 : OUT STD_LOGIC;
    input_tile_8_we0 : OUT STD_LOGIC;
    input_tile_8_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    input_tile_9_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    input_tile_9_ce0 : OUT STD_LOGIC;
    input_tile_9_we0 : OUT STD_LOGIC;
    input_tile_9_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    input_tile_10_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    input_tile_10_ce0 : OUT STD_LOGIC;
    input_tile_10_we0 : OUT STD_LOGIC;
    input_tile_10_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    input_tile_11_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    input_tile_11_ce0 : OUT STD_LOGIC;
    input_tile_11_we0 : OUT STD_LOGIC;
    input_tile_11_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    input_tile_12_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    input_tile_12_ce0 : OUT STD_LOGIC;
    input_tile_12_we0 : OUT STD_LOGIC;
    input_tile_12_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    input_tile_13_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    input_tile_13_ce0 : OUT STD_LOGIC;
    input_tile_13_we0 : OUT STD_LOGIC;
    input_tile_13_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    input_tile_14_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    input_tile_14_ce0 : OUT STD_LOGIC;
    input_tile_14_we0 : OUT STD_LOGIC;
    input_tile_14_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    input_tile_15_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    input_tile_15_ce0 : OUT STD_LOGIC;
    input_tile_15_we0 : OUT STD_LOGIC;
    input_tile_15_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    input_tile_16_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    input_tile_16_ce0 : OUT STD_LOGIC;
    input_tile_16_we0 : OUT STD_LOGIC;
    input_tile_16_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of srcnn_conv2_Pipeline_STREAM_READ_CONV2_VITIS_LOOP_357_1_VITIS_LOOP_358_2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_lv5_F : STD_LOGIC_VECTOR (4 downto 0) := "01111";
    constant ap_const_lv5_E : STD_LOGIC_VECTOR (4 downto 0) := "01110";
    constant ap_const_lv5_D : STD_LOGIC_VECTOR (4 downto 0) := "01101";
    constant ap_const_lv5_C : STD_LOGIC_VECTOR (4 downto 0) := "01100";
    constant ap_const_lv5_B : STD_LOGIC_VECTOR (4 downto 0) := "01011";
    constant ap_const_lv5_A : STD_LOGIC_VECTOR (4 downto 0) := "01010";
    constant ap_const_lv5_9 : STD_LOGIC_VECTOR (4 downto 0) := "01001";
    constant ap_const_lv5_8 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_const_lv5_7 : STD_LOGIC_VECTOR (4 downto 0) := "00111";
    constant ap_const_lv5_6 : STD_LOGIC_VECTOR (4 downto 0) := "00110";
    constant ap_const_lv5_5 : STD_LOGIC_VECTOR (4 downto 0) := "00101";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_const_lv5_3 : STD_LOGIC_VECTOR (4 downto 0) := "00011";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv15_4840 : STD_LOGIC_VECTOR (14 downto 0) := "100100001000000";
    constant ap_const_lv15_1 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    constant ap_const_lv10_121 : STD_LOGIC_VECTOR (9 downto 0) := "0100100001";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv5_11 : STD_LOGIC_VECTOR (4 downto 0) := "10001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln356_fu_410_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal conv1_to_conv2_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln357_fu_422_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln357_reg_654 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal zext_ln359_2_fu_553_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_fu_132 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln358_fu_595_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal i_fu_136 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln357_1_fu_535_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvar_flatten_fu_140 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln357_2_fu_434_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_sig_allocacmp_indvar_flatten_load : STD_LOGIC_VECTOR (9 downto 0);
    signal feat_fu_144 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln356_1_fu_474_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal indvar_flatten29_fu_148 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln356_1_fu_416_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_sig_allocacmp_indvar_flatten29_load : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln357_fu_527_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal bitcast_ln359_fu_574_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln357_1_fu_428_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln356_fu_461_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_s_fu_485_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln359_fu_481_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln358_fu_504_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln356_fu_499_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln356_fu_467_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal and_ln356_fu_510_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln357_fu_522_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln357_fu_516_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln359_fu_493_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln359_1_fu_543_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln359_1_fu_547_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component srcnn_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component srcnn_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    feat_fu_144_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    feat_fu_144 <= ap_const_lv7_0;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    feat_fu_144 <= select_ln356_1_fu_474_p3;
                end if;
            end if; 
        end if;
    end process;

    i_fu_136_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_136 <= ap_const_lv5_0;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    i_fu_136 <= select_ln357_1_fu_535_p3;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten29_fu_148_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln356_fu_410_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    indvar_flatten29_fu_148 <= add_ln356_1_fu_416_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten29_fu_148 <= ap_const_lv15_0;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten_fu_140_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln356_fu_410_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    indvar_flatten_fu_140 <= select_ln357_2_fu_434_p3;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten_fu_140 <= ap_const_lv10_0;
                end if;
            end if; 
        end if;
    end process;

    j_fu_132_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    j_fu_132 <= ap_const_lv5_0;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    j_fu_132 <= add_ln358_fu_595_p2;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln356_fu_410_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln357_reg_654 <= icmp_ln357_fu_422_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln356_1_fu_416_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten29_load) + unsigned(ap_const_lv15_1));
    add_ln356_fu_461_p2 <= std_logic_vector(unsigned(feat_fu_144) + unsigned(ap_const_lv7_1));
    add_ln357_1_fu_428_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten_load) + unsigned(ap_const_lv10_1));
    add_ln357_fu_516_p2 <= std_logic_vector(unsigned(select_ln356_fu_467_p3) + unsigned(ap_const_lv5_1));
    add_ln358_fu_595_p2 <= std_logic_vector(unsigned(select_ln357_fu_527_p3) + unsigned(ap_const_lv5_1));
    add_ln359_1_fu_547_p2 <= std_logic_vector(unsigned(add_ln359_fu_493_p2) + unsigned(zext_ln359_1_fu_543_p1));
    add_ln359_fu_493_p2 <= std_logic_vector(unsigned(tmp_s_fu_485_p3) + unsigned(zext_ln359_fu_481_p1));
    and_ln356_fu_510_p2 <= (xor_ln356_fu_499_p2 and icmp_ln358_fu_504_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, conv1_to_conv2_empty_n)
    begin
                ap_block_pp0_stage0_11001 <= ((conv1_to_conv2_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, conv1_to_conv2_empty_n)
    begin
                ap_block_pp0_stage0_subdone <= ((conv1_to_conv2_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;

        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state2_pp0_stage0_iter1_assign_proc : process(conv1_to_conv2_empty_n)
    begin
                ap_block_state2_pp0_stage0_iter1 <= (conv1_to_conv2_empty_n = ap_const_logic_0);
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln356_fu_410_p2)
    begin
        if (((icmp_ln356_fu_410_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten29_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten29_fu_148)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_indvar_flatten29_load <= ap_const_lv15_0;
        else 
            ap_sig_allocacmp_indvar_flatten29_load <= indvar_flatten29_fu_148;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten_fu_140)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_indvar_flatten_load <= ap_const_lv10_0;
        else 
            ap_sig_allocacmp_indvar_flatten_load <= indvar_flatten_fu_140;
        end if; 
    end process;

    bitcast_ln359_fu_574_p1 <= conv1_to_conv2_dout;

    conv1_to_conv2_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, conv1_to_conv2_empty_n, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            conv1_to_conv2_blk_n <= conv1_to_conv2_empty_n;
        else 
            conv1_to_conv2_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    conv1_to_conv2_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            conv1_to_conv2_read <= ap_const_logic_1;
        else 
            conv1_to_conv2_read <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln356_fu_410_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten29_load = ap_const_lv15_4840) else "0";
    icmp_ln357_fu_422_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten_load = ap_const_lv10_121) else "0";
    icmp_ln358_fu_504_p2 <= "1" when (j_fu_132 = ap_const_lv5_11) else "0";
    input_tile_10_address0 <= zext_ln359_2_fu_553_p1(11 - 1 downto 0);

    input_tile_10_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_tile_10_ce0 <= ap_const_logic_1;
        else 
            input_tile_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    input_tile_10_d0 <= bitcast_ln359_fu_574_p1;

    input_tile_10_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, select_ln357_fu_527_p3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (select_ln357_fu_527_p3 = ap_const_lv5_A) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_tile_10_we0 <= ap_const_logic_1;
        else 
            input_tile_10_we0 <= ap_const_logic_0;
        end if; 
    end process;

    input_tile_11_address0 <= zext_ln359_2_fu_553_p1(11 - 1 downto 0);

    input_tile_11_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_tile_11_ce0 <= ap_const_logic_1;
        else 
            input_tile_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    input_tile_11_d0 <= bitcast_ln359_fu_574_p1;

    input_tile_11_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, select_ln357_fu_527_p3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (select_ln357_fu_527_p3 = ap_const_lv5_B) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_tile_11_we0 <= ap_const_logic_1;
        else 
            input_tile_11_we0 <= ap_const_logic_0;
        end if; 
    end process;

    input_tile_12_address0 <= zext_ln359_2_fu_553_p1(11 - 1 downto 0);

    input_tile_12_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_tile_12_ce0 <= ap_const_logic_1;
        else 
            input_tile_12_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    input_tile_12_d0 <= bitcast_ln359_fu_574_p1;

    input_tile_12_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, select_ln357_fu_527_p3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (select_ln357_fu_527_p3 = ap_const_lv5_C) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_tile_12_we0 <= ap_const_logic_1;
        else 
            input_tile_12_we0 <= ap_const_logic_0;
        end if; 
    end process;

    input_tile_13_address0 <= zext_ln359_2_fu_553_p1(11 - 1 downto 0);

    input_tile_13_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_tile_13_ce0 <= ap_const_logic_1;
        else 
            input_tile_13_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    input_tile_13_d0 <= bitcast_ln359_fu_574_p1;

    input_tile_13_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, select_ln357_fu_527_p3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (select_ln357_fu_527_p3 = ap_const_lv5_D) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_tile_13_we0 <= ap_const_logic_1;
        else 
            input_tile_13_we0 <= ap_const_logic_0;
        end if; 
    end process;

    input_tile_14_address0 <= zext_ln359_2_fu_553_p1(11 - 1 downto 0);

    input_tile_14_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_tile_14_ce0 <= ap_const_logic_1;
        else 
            input_tile_14_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    input_tile_14_d0 <= bitcast_ln359_fu_574_p1;

    input_tile_14_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, select_ln357_fu_527_p3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (select_ln357_fu_527_p3 = ap_const_lv5_E) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_tile_14_we0 <= ap_const_logic_1;
        else 
            input_tile_14_we0 <= ap_const_logic_0;
        end if; 
    end process;

    input_tile_15_address0 <= zext_ln359_2_fu_553_p1(11 - 1 downto 0);

    input_tile_15_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_tile_15_ce0 <= ap_const_logic_1;
        else 
            input_tile_15_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    input_tile_15_d0 <= bitcast_ln359_fu_574_p1;

    input_tile_15_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, select_ln357_fu_527_p3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (select_ln357_fu_527_p3 = ap_const_lv5_F) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_tile_15_we0 <= ap_const_logic_1;
        else 
            input_tile_15_we0 <= ap_const_logic_0;
        end if; 
    end process;

    input_tile_16_address0 <= zext_ln359_2_fu_553_p1(11 - 1 downto 0);

    input_tile_16_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_tile_16_ce0 <= ap_const_logic_1;
        else 
            input_tile_16_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    input_tile_16_d0 <= bitcast_ln359_fu_574_p1;

    input_tile_16_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, select_ln357_fu_527_p3)
    begin
        if ((not((select_ln357_fu_527_p3 = ap_const_lv5_0)) and not((select_ln357_fu_527_p3 = ap_const_lv5_1)) and not((select_ln357_fu_527_p3 = ap_const_lv5_2)) and not((select_ln357_fu_527_p3 = ap_const_lv5_3)) and not((select_ln357_fu_527_p3 = ap_const_lv5_4)) and not((select_ln357_fu_527_p3 = ap_const_lv5_5)) and not((select_ln357_fu_527_p3 = ap_const_lv5_6)) and not((select_ln357_fu_527_p3 = ap_const_lv5_7)) and not((select_ln357_fu_527_p3 = ap_const_lv5_8)) and not((select_ln357_fu_527_p3 = ap_const_lv5_9)) and not((select_ln357_fu_527_p3 = ap_const_lv5_A)) and not((select_ln357_fu_527_p3 = ap_const_lv5_B)) and not((select_ln357_fu_527_p3 = ap_const_lv5_C)) and not((select_ln357_fu_527_p3 = ap_const_lv5_D)) and not((select_ln357_fu_527_p3 = ap_const_lv5_E)) and not((select_ln357_fu_527_p3 = ap_const_lv5_F)) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_tile_16_we0 <= ap_const_logic_1;
        else 
            input_tile_16_we0 <= ap_const_logic_0;
        end if; 
    end process;

    input_tile_1_address0 <= zext_ln359_2_fu_553_p1(11 - 1 downto 0);

    input_tile_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_tile_1_ce0 <= ap_const_logic_1;
        else 
            input_tile_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    input_tile_1_d0 <= bitcast_ln359_fu_574_p1;

    input_tile_1_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, select_ln357_fu_527_p3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (select_ln357_fu_527_p3 = ap_const_lv5_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_tile_1_we0 <= ap_const_logic_1;
        else 
            input_tile_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    input_tile_2_address0 <= zext_ln359_2_fu_553_p1(11 - 1 downto 0);

    input_tile_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_tile_2_ce0 <= ap_const_logic_1;
        else 
            input_tile_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    input_tile_2_d0 <= bitcast_ln359_fu_574_p1;

    input_tile_2_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, select_ln357_fu_527_p3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (select_ln357_fu_527_p3 = ap_const_lv5_2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_tile_2_we0 <= ap_const_logic_1;
        else 
            input_tile_2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    input_tile_3_address0 <= zext_ln359_2_fu_553_p1(11 - 1 downto 0);

    input_tile_3_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_tile_3_ce0 <= ap_const_logic_1;
        else 
            input_tile_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    input_tile_3_d0 <= bitcast_ln359_fu_574_p1;

    input_tile_3_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, select_ln357_fu_527_p3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (select_ln357_fu_527_p3 = ap_const_lv5_3) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_tile_3_we0 <= ap_const_logic_1;
        else 
            input_tile_3_we0 <= ap_const_logic_0;
        end if; 
    end process;

    input_tile_4_address0 <= zext_ln359_2_fu_553_p1(11 - 1 downto 0);

    input_tile_4_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_tile_4_ce0 <= ap_const_logic_1;
        else 
            input_tile_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    input_tile_4_d0 <= bitcast_ln359_fu_574_p1;

    input_tile_4_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, select_ln357_fu_527_p3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (select_ln357_fu_527_p3 = ap_const_lv5_4) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_tile_4_we0 <= ap_const_logic_1;
        else 
            input_tile_4_we0 <= ap_const_logic_0;
        end if; 
    end process;

    input_tile_5_address0 <= zext_ln359_2_fu_553_p1(11 - 1 downto 0);

    input_tile_5_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_tile_5_ce0 <= ap_const_logic_1;
        else 
            input_tile_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    input_tile_5_d0 <= bitcast_ln359_fu_574_p1;

    input_tile_5_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, select_ln357_fu_527_p3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (select_ln357_fu_527_p3 = ap_const_lv5_5) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_tile_5_we0 <= ap_const_logic_1;
        else 
            input_tile_5_we0 <= ap_const_logic_0;
        end if; 
    end process;

    input_tile_6_address0 <= zext_ln359_2_fu_553_p1(11 - 1 downto 0);

    input_tile_6_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_tile_6_ce0 <= ap_const_logic_1;
        else 
            input_tile_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    input_tile_6_d0 <= bitcast_ln359_fu_574_p1;

    input_tile_6_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, select_ln357_fu_527_p3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (select_ln357_fu_527_p3 = ap_const_lv5_6) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_tile_6_we0 <= ap_const_logic_1;
        else 
            input_tile_6_we0 <= ap_const_logic_0;
        end if; 
    end process;

    input_tile_7_address0 <= zext_ln359_2_fu_553_p1(11 - 1 downto 0);

    input_tile_7_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_tile_7_ce0 <= ap_const_logic_1;
        else 
            input_tile_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    input_tile_7_d0 <= bitcast_ln359_fu_574_p1;

    input_tile_7_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, select_ln357_fu_527_p3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (select_ln357_fu_527_p3 = ap_const_lv5_7) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_tile_7_we0 <= ap_const_logic_1;
        else 
            input_tile_7_we0 <= ap_const_logic_0;
        end if; 
    end process;

    input_tile_8_address0 <= zext_ln359_2_fu_553_p1(11 - 1 downto 0);

    input_tile_8_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_tile_8_ce0 <= ap_const_logic_1;
        else 
            input_tile_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    input_tile_8_d0 <= bitcast_ln359_fu_574_p1;

    input_tile_8_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, select_ln357_fu_527_p3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (select_ln357_fu_527_p3 = ap_const_lv5_8) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_tile_8_we0 <= ap_const_logic_1;
        else 
            input_tile_8_we0 <= ap_const_logic_0;
        end if; 
    end process;

    input_tile_9_address0 <= zext_ln359_2_fu_553_p1(11 - 1 downto 0);

    input_tile_9_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_tile_9_ce0 <= ap_const_logic_1;
        else 
            input_tile_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    input_tile_9_d0 <= bitcast_ln359_fu_574_p1;

    input_tile_9_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, select_ln357_fu_527_p3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (select_ln357_fu_527_p3 = ap_const_lv5_9) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_tile_9_we0 <= ap_const_logic_1;
        else 
            input_tile_9_we0 <= ap_const_logic_0;
        end if; 
    end process;

    input_tile_address0 <= zext_ln359_2_fu_553_p1(11 - 1 downto 0);

    input_tile_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_tile_ce0 <= ap_const_logic_1;
        else 
            input_tile_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    input_tile_d0 <= bitcast_ln359_fu_574_p1;

    input_tile_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, select_ln357_fu_527_p3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (select_ln357_fu_527_p3 = ap_const_lv5_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_tile_we0 <= ap_const_logic_1;
        else 
            input_tile_we0 <= ap_const_logic_0;
        end if; 
    end process;

    or_ln357_fu_522_p2 <= (icmp_ln357_reg_654 or and_ln356_fu_510_p2);
    select_ln356_1_fu_474_p3 <= 
        add_ln356_fu_461_p2 when (icmp_ln357_reg_654(0) = '1') else 
        feat_fu_144;
    select_ln356_fu_467_p3 <= 
        ap_const_lv5_0 when (icmp_ln357_reg_654(0) = '1') else 
        i_fu_136;
    select_ln357_1_fu_535_p3 <= 
        add_ln357_fu_516_p2 when (and_ln356_fu_510_p2(0) = '1') else 
        select_ln356_fu_467_p3;
    select_ln357_2_fu_434_p3 <= 
        ap_const_lv10_1 when (icmp_ln357_fu_422_p2(0) = '1') else 
        add_ln357_1_fu_428_p2;
    select_ln357_fu_527_p3 <= 
        ap_const_lv5_0 when (or_ln357_fu_522_p2(0) = '1') else 
        j_fu_132;
    tmp_s_fu_485_p3 <= (select_ln356_1_fu_474_p3 & ap_const_lv4_0);
    xor_ln356_fu_499_p2 <= (icmp_ln357_reg_654 xor ap_const_lv1_1);
    zext_ln359_1_fu_543_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln357_1_fu_535_p3),11));
    zext_ln359_2_fu_553_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln359_1_fu_547_p2),64));
    zext_ln359_fu_481_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln356_1_fu_474_p3),11));
end behav;
